[
  {
    "input": "Compress the file data.txt using bzip2",
    "output": "bzip2 data.txt"
  },
  {
    "input": "Use bzip2 to compress log.txt",
    "output": "bzip2 log.txt"
  },
  {
    "input": "Compress backup.tar with bzip2",
    "output": "bzip2 backup.tar"
  },
  {
    "input": "Use bzip2 for compressing notes.md",
    "output": "bzip2 notes.md"
  },
  {
    "input": "Compress the CSV file records.csv using bzip2",
    "output": "bzip2 records.csv"
  },
  {
    "input": "Apply bzip2 to script.sh",
    "output": "bzip2 script.sh"
  },
  {
    "input": "Compress the image.png file using bzip2",
    "output": "bzip2 image.png"
  },
  {
    "input": "Use bzip2 for project.docx",
    "output": "bzip2 project.docx"
  },
  {
    "input": "Compress app.py using bzip2",
    "output": "bzip2 app.py"
  },
  {
    "input": "Use bzip2 to compress data.json",
    "output": "bzip2 data.json"
  },
  {
    "input": "Compress access.log with bzip2",
    "output": "bzip2 access.log"
  },
  {
    "input": "Compress testfile.txt using bzip2",
    "output": "bzip2 testfile.txt"
  },
  {
    "input": "Use bzip2 to compress video.mp4",
    "output": "bzip2 video.mp4"
  },
  {
    "input": "Apply bzip2 to main.js",
    "output": "bzip2 main.js"
  },
  {
    "input": "Compress results.csv with bzip2",
    "output": "bzip2 results.csv"
  },
  {
    "input": "Use bzip2 for index.html",
    "output": "bzip2 index.html"
  },
  {
    "input": "Compress makefile using bzip2",
    "output": "bzip2 makefile"
  },
  {
    "input": "Compress the PDF file paper.pdf using bzip2",
    "output": "bzip2 paper.pdf"
  },
  {
    "input": "Apply bzip2 to output.txt",
    "output": "bzip2 output.txt"
  },
  {
    "input": "Compress config.yaml using bzip2",
    "output": "bzip2 config.yaml"
  },
  {
    "input": "Use bzip2 on test.py",
    "output": "bzip2 test.py"
  },
  {
    "input": "Compress audio.mp3 with bzip2",
    "output": "bzip2 audio.mp3"
  },
  {
    "input": "Compress changelog using bzip2",
    "output": "bzip2 changelog"
  },
  {
    "input": "Use bzip2 on README.md",
    "output": "bzip2 README.md"
  },
  {
    "input": "Compress the SQL file dump.sql with bzip2",
    "output": "bzip2 dump.sql"
  },
  {
    "input": "Compress source.cpp using bzip2",
    "output": "bzip2 source.cpp"
  },
  {
    "input": "Use bzip2 for compressing archive.zip",
    "output": "bzip2 archive.zip"
  },
  {
    "input": "Compress the image.jpeg file with bzip2",
    "output": "bzip2 image.jpeg"
  },
  {
    "input": "Apply bzip2 to binary.bin",
    "output": "bzip2 binary.bin"
  },
  {
    "input": "Compress summary.txt using bzip2",
    "output": "bzip2 summary.txt"
  },
  {
    "input": "Use bzip2 to compress music.wav",
    "output": "bzip2 music.wav"
  },
  {
    "input": "Compress picture.jpg using bzip2",
    "output": "bzip2 picture.jpg"
  },
  {
    "input": "Apply bzip2 on the file analytics.csv",
    "output": "bzip2 analytics.csv"
  },
  {
    "input": "Use bzip2 to compress diagram.svg",
    "output": "bzip2 diagram.svg"
  },
  {
    "input": "Compress log_output.log using bzip2",
    "output": "bzip2 log_output.log"
  },
  {
    "input": "Compress function.java with bzip2",
    "output": "bzip2 function.java"
  },
  {
    "input": "Use bzip2 for notesfinal.txt",
    "output": "bzip2 notesfinal.txt"
  },
  {
    "input": "Compress todo.md with bzip2",
    "output": "bzip2 todo.md"
  },
  {
    "input": "Apply bzip2 to export.csv",
    "output": "bzip2 export.csv"
  },
  {
    "input": "Use bzip2 to shrink the doc.doc file",
    "output": "bzip2 doc.doc"
  },
  {
    "input": "Compress vm_state.dmp using bzip2",
    "output": "bzip2 vm_state.dmp"
  },
  {
    "input": "Use bzip2 to compress file.dat",
    "output": "bzip2 file.dat"
  },
  {
    "input": "Compress file1.txt using bzip2",
    "output": "bzip2 file1.txt"
  },
  {
    "input": "Compress largefile.iso with bzip2",
    "output": "bzip2 largefile.iso"
  },
  {
    "input": "Use bzip2 for api.txt",
    "output": "bzip2 api.txt"
  },
  {
    "input": "Compress temp.log using bzip2",
    "output": "bzip2 temp.log"
  },
  {
    "input": "Compress login.json with bzip2",
    "output": "bzip2 login.json"
  },
  {
    "input": "Apply bzip2 to compression_test.txt",
    "output": "bzip2 compression_test.txt"
  },
  {
    "input": "Use bzip2 to compress graph.png",
    "output": "bzip2 graph.png"
  },
  {
    "input": "Compress screenshot.bmp with bzip2",
    "output": "bzip2 screenshot.bmp"
  },
  {
    "input": "Apply bzip2 to linux.img",
    "output": "bzip2 linux.img"
  },
  {
    "input": "Compress letter.doc using bzip2",
    "output": "bzip2 letter.doc"
  },
  {
    "input": "Compress slide.ppt with bzip2",
    "output": "bzip2 slide.ppt"
  },
  {
    "input": "Use bzip2 to compress textfile.txt",
    "output": "bzip2 textfile.txt"
  },
  {
    "input": "Compress the python file module.py",
    "output": "bzip2 module.py"
  },
  {
    "input": "Compress the photo.png using bzip2",
    "output": "bzip2 photo.png"
  },
  {
    "input": "Compress patch.diff using bzip2",
    "output": "bzip2 patch.diff"
  },
  {
    "input": "Use bzip2 for mynotes.txt",
    "output": "bzip2 mynotes.txt"
  },
  {
    "input": "Compress setup.sh using bzip2",
    "output": "bzip2 setup.sh"
  },
  {
    "input": "Compress camera.jpg using bzip2",
    "output": "bzip2 camera.jpg"
  },
  {
    "input": "Compress the telemetry.csv file with bzip2",
    "output": "bzip2 telemetry.csv"
  },
  {
    "input": "Use bzip2 to compress the message.txt file",
    "output": "bzip2 message.txt"
  },
  {
    "input": "Compress the android.apk using bzip2",
    "output": "bzip2 android.apk"
  },
  {
    "input": "Compress logs_2023.log using bzip2",
    "output": "bzip2 logs_2023.log"
  },
  {
    "input": "Use bzip2 for user_data.json",
    "output": "bzip2 user_data.json"
  },
  {
    "input": "Compress backup_2024.tar with bzip2",
    "output": "bzip2 backup_2024.tar"
  },
  {
    "input": "Apply bzip2 to resume.docx",
    "output": "bzip2 resume.docx"
  },
  {
    "input": "Compress report.xlsx using bzip2",
    "output": "bzip2 report.xlsx"
  },
  {
    "input": "Compress olddata.txt with bzip2",
    "output": "bzip2 olddata.txt"
  },
  {
    "input": "Use bzip2 for compressing the text.txt",
    "output": "bzip2 text.txt"
  },
  {
    "input": "Apply bzip2 to the spreadsheet.xls file",
    "output": "bzip2 spreadsheet.xls"
  },
  {
    "input": "Compress jsonfile.json using bzip2",
    "output": "bzip2 jsonfile.json"
  },
  {
    "input": "Compress email.eml using bzip2",
    "output": "bzip2 email.eml"
  },
  {
    "input": "Use bzip2 to shrink backup.sql",
    "output": "bzip2 backup.sql"
  },
  {
    "input": "Compress the binary file binarydata.bin with bzip2",
    "output": "bzip2 binarydata.bin"
  },
  {
    "input": "Compress errorlog.txt using bzip2",
    "output": "bzip2 errorlog.txt"
  },
  {
    "input": "Compress all_logs.log using bzip2",
    "output": "bzip2 all_logs.log"
  },
  {
    "input": "Use bzip2 for compressing the archive.tgz",
    "output": "bzip2 archive.tgz"
  },
  {
    "input": "Compress metrics.txt using bzip2",
    "output": "bzip2 metrics.txt"
  },
  {
    "input": "Compress model.pkl using bzip2",
    "output": "bzip2 model.pkl"
  },
  {
    "input": "Use bzip2 to shrink setup.cfg",
    "output": "bzip2 setup.cfg"
  },
  {
    "input": "Compress the R script analysis.R using bzip2",
    "output": "bzip2 analysis.R"
  },
  {
    "input": "Compress the CSV export file sales.csv with bzip2",
    "output": "bzip2 sales.csv"
  },
  {
    "input": "Apply bzip2 to the markdown file index.md",
    "output": "bzip2 index.md"
  },
  {
    "input": "Use bzip2 to compress the metadata.xml",
    "output": "bzip2 metadata.xml"
  },
  {
    "input": "Compress the chatlog.log file using bzip2",
    "output": "bzip2 chatlog.log"
  },
  {
    "input": "Use bzip2 on design.ai",
    "output": "bzip2 design.ai"
  },
  {
    "input": "Compress the netstat.txt using bzip2",
    "output": "bzip2 netstat.txt"
  },
  {
    "input": "Compress the session.dat file using bzip2",
    "output": "bzip2 session.dat"
  },
  {
    "input": "Compress the file notes.txt",
    "output": "gzip notes.txt"
  },
  {
    "input": "Use gzip to compress data.csv",
    "output": "gzip data.csv"
  },
  {
    "input": "Gzip the report.doc file",
    "output": "gzip report.doc"
  },
  {
    "input": "Compress the image.png using gzip",
    "output": "gzip image.png"
  },
  {
    "input": "Use gzip on log.txt",
    "output": "gzip log.txt"
  },
  {
    "input": "Create a compressed version of backup.tar",
    "output": "gzip backup.tar"
  },
  {
    "input": "Compress the script.sh file",
    "output": "gzip script.sh"
  },
  {
    "input": "Gzip archive.zip",
    "output": "gzip archive.zip"
  },
  {
    "input": "Compress test1.txt using gzip",
    "output": "gzip test1.txt"
  },
  {
    "input": "Use gzip for the binary file program.bin",
    "output": "gzip program.bin"
  },
  {
    "input": "Gzip the notes.md file",
    "output": "gzip notes.md"
  },
  {
    "input": "Compress the presentation.ppt file",
    "output": "gzip presentation.ppt"
  },
  {
    "input": "Use gzip to compress the results.csv",
    "output": "gzip results.csv"
  },
  {
    "input": "Compress the Python script app.py",
    "output": "gzip app.py"
  },
  {
    "input": "Compress the index.html file with gzip",
    "output": "gzip index.html"
  },
  {
    "input": "Gzip the JavaScript file main.js",
    "output": "gzip main.js"
  },
  {
    "input": "Compress the style.css file using gzip",
    "output": "gzip style.css"
  },
  {
    "input": "Use gzip on log_2020.log",
    "output": "gzip log_2020.log"
  },
  {
    "input": "Gzip the XML file config.xml",
    "output": "gzip config.xml"
  },
  {
    "input": "Compress file1.txt",
    "output": "gzip file1.txt"
  },
  {
    "input": "Gzip the markdown file README.md",
    "output": "gzip README.md"
  },
  {
    "input": "Compress download.tar using gzip",
    "output": "gzip download.tar"
  },
  {
    "input": "Use gzip to shrink bigfile.iso",
    "output": "gzip bigfile.iso"
  },
  {
    "input": "Gzip the file letter.txt",
    "output": "gzip letter.txt"
  },
  {
    "input": "Compress test_data.json with gzip",
    "output": "gzip test_data.json"
  },
  {
    "input": "Compress image.jpeg using gzip",
    "output": "gzip image.jpeg"
  },
  {
    "input": "Gzip the makefile",
    "output": "gzip makefile"
  },
  {
    "input": "Compress the database.db",
    "output": "gzip database.db"
  },
  {
    "input": "Use gzip for old_backup.sql",
    "output": "gzip old_backup.sql"
  },
  {
    "input": "Compress server.log using gzip",
    "output": "gzip server.log"
  },
  {
    "input": "Gzip temp.txt",
    "output": "gzip temp.txt"
  },
  {
    "input": "Compress api_response.json using gzip",
    "output": "gzip api_response.json"
  },
  {
    "input": "Compress movie.mp4",
    "output": "gzip movie.mp4"
  },
  {
    "input": "Gzip today's backup.bak",
    "output": "gzip backup.bak"
  },
  {
    "input": "Compress file_a.txt",
    "output": "gzip file_a.txt"
  },
  {
    "input": "Gzip anotherfile.dat",
    "output": "gzip anotherfile.dat"
  },
  {
    "input": "Compress a file called rawdata.csv",
    "output": "gzip rawdata.csv"
  },
  {
    "input": "Use gzip to compress textfile.txt",
    "output": "gzip textfile.txt"
  },
  {
    "input": "Gzip the file output.log",
    "output": "gzip output.log"
  },
  {
    "input": "Compress the test.exe using gzip",
    "output": "gzip test.exe"
  },
  {
    "input": "Use gzip on track.wav",
    "output": "gzip track.wav"
  },
  {
    "input": "Gzip pdf_document.pdf",
    "output": "gzip pdf_document.pdf"
  },
  {
    "input": "Compress project_info.txt",
    "output": "gzip project_info.txt"
  },
  {
    "input": "Gzip the file named demo",
    "output": "gzip demo"
  },
  {
    "input": "Compress the source.cpp file",
    "output": "gzip source.cpp"
  },
  {
    "input": "Use gzip to compress function.java",
    "output": "gzip function.java"
  },
  {
    "input": "Gzip the dataset file data_train.csv",
    "output": "gzip data_train.csv"
  },
  {
    "input": "Compress book.epub using gzip",
    "output": "gzip book.epub"
  },
  {
    "input": "Gzip the SQL dump dump.sql",
    "output": "gzip dump.sql"
  },
  {
    "input": "Compress tracklist.txt using gzip",
    "output": "gzip tracklist.txt"
  },
  {
    "input": "Gzip the folder listing.txt",
    "output": "gzip listing.txt"
  },
  {
    "input": "Compress the changelog file",
    "output": "gzip changelog"
  },
  {
    "input": "Use gzip to compress index.json",
    "output": "gzip index.json"
  },
  {
    "input": "Gzip tutorial.py file",
    "output": "gzip tutorial.py"
  },
  {
    "input": "Compress readme using gzip",
    "output": "gzip readme"
  },
  {
    "input": "Gzip notes from class",
    "output": "gzip class_notes.txt"
  },
  {
    "input": "Compress img001.png with gzip",
    "output": "gzip img001.png"
  },
  {
    "input": "Use gzip on settings.ini",
    "output": "gzip settings.ini"
  },
  {
    "input": "Gzip system.dmp",
    "output": "gzip system.dmp"
  },
  {
    "input": "Compress notes_backup.txt",
    "output": "gzip notes_backup.txt"
  },
  {
    "input": "Gzip user.log file",
    "output": "gzip user.log"
  },
  {
    "input": "Use gzip for file data.out",
    "output": "gzip data.out"
  },
  {
    "input": "Compress the video.mkv file",
    "output": "gzip video.mkv"
  },
  {
    "input": "Gzip metrics.csv",
    "output": "gzip metrics.csv"
  },
  {
    "input": "Use gzip for analysis.xlsx",
    "output": "gzip analysis.xlsx"
  },
  {
    "input": "Compress folder-listing.txt",
    "output": "gzip folder-listing.txt"
  },
  {
    "input": "Gzip the test_code.py",
    "output": "gzip test_code.py"
  },
  {
    "input": "Compress yourfile.txt",
    "output": "gzip yourfile.txt"
  },
  {
    "input": "Use gzip on audio.flac",
    "output": "gzip audio.flac"
  },
  {
    "input": "Gzip filename.txt",
    "output": "gzip filename.txt"
  },
  {
    "input": "Compress the export.csv file",
    "output": "gzip export.csv"
  },
  {
    "input": "Gzip python_code.py",
    "output": "gzip python_code.py"
  },
  {
    "input": "Use gzip for resume.docx",
    "output": "gzip resume.docx"
  },
  {
    "input": "Compress netstats.txt",
    "output": "gzip netstats.txt"
  },
  {
    "input": "Gzip error_log.txt",
    "output": "gzip error_log.txt"
  },
  {
    "input": "Compress zipped_file.tar with gzip",
    "output": "gzip zipped_file.tar"
  },
  {
    "input": "Use gzip to compress graph.svg",
    "output": "gzip graph.svg"
  },
  {
    "input": "Gzip the logfile.log",
    "output": "gzip logfile.log"
  },
  {
    "input": "Compress audio_record.mp3 using gzip",
    "output": "gzip audio_record.mp3"
  },
  {
    "input": "Gzip the file that stores feedback.txt",
    "output": "gzip feedback.txt"
  },
  {
    "input": "Compress notesfinal.doc with gzip",
    "output": "gzip notesfinal.doc"
  },
  {
    "input": "Use gzip to shrink translation.txt",
    "output": "gzip translation.txt"
  },
  {
    "input": "Gzip data1.csv",
    "output": "gzip data1.csv"
  },
  {
    "input": "Compress the metrics_output.json",
    "output": "gzip metrics_output.json"
  },
  {
    "input": "Gzip todo.md file",
    "output": "gzip todo.md"
  },
  {
    "input": "Use gzip for the diagram.pdf",
    "output": "gzip diagram.pdf"
  },
  {
    "input": "Compress the debug.txt file",
    "output": "gzip debug.txt"
  },
  {
    "input": "Gzip the tarball.tar",
    "output": "gzip tarball.tar"
  },
  {
    "input": "Compress gpu_stats.txt using gzip",
    "output": "gzip gpu_stats.txt"
  },
  {
    "input": "Gzip config.yaml",
    "output": "gzip config.yaml"
  },
  {
    "input": "Compress cronjobs.txt",
    "output": "gzip cronjobs.txt"
  },
  {
    "input": "Gzip info.txt",
    "output": "gzip info.txt"
  },
  {
    "input": "Use gzip to compress the log_report.log",
    "output": "gzip log_report.log"
  },
  {
    "input": "Create a zip archive named archive.zip containing file1.txt",
    "output": "zip archive.zip file1.txt"
  },
  {
    "input": "Compress notes.txt into notes.zip",
    "output": "zip notes.zip notes.txt"
  },
  {
    "input": "Zip the files doc1.txt and doc2.txt into documents.zip",
    "output": "zip documents.zip doc1.txt doc2.txt"
  },
  {
    "input": "Make a zip file called images.zip with photo1.jpg and photo2.jpg",
    "output": "zip images.zip photo1.jpg photo2.jpg"
  },
  {
    "input": "Create an archive myfiles.zip from main.py and utils.py",
    "output": "zip myfiles.zip main.py utils.py"
  },
  {
    "input": "Zip up the directory project into project.zip",
    "output": "zip -r project.zip project"
  },
  {
    "input": "Create compressed zip folder music.zip from audio1.mp3 and audio2.mp3",
    "output": "zip music.zip audio1.mp3 audio2.mp3"
  },
  {
    "input": "Add README.md to existing archive code.zip",
    "output": "zip code.zip README.md"
  },
  {
    "input": "Zip all text files into texts.zip",
    "output": "zip texts.zip *.txt"
  },
  {
    "input": "Create zip file source.zip with all python files",
    "output": "zip source.zip *.py"
  },
  {
    "input": "Zip everything inside the folder my_folder into zipped_folder.zip",
    "output": "zip -r zipped_folder.zip my_folder"
  },
  {
    "input": "Make a zip file photos.zip from all jpg files",
    "output": "zip photos.zip *.jpg"
  },
  {
    "input": "Compress the current directory contents into current.zip",
    "output": "zip -r current.zip ."
  },
  {
    "input": "Zip log.txt and data.csv into logs.zip",
    "output": "zip logs.zip log.txt data.csv"
  },
  {
    "input": "Create a zip named backup.zip containing all CSV files",
    "output": "zip backup.zip *.csv"
  },
  {
    "input": "Zip everything in src folder to src.zip",
    "output": "zip -r src.zip src"
  },
  {
    "input": "Make zip file configs.zip with config.yaml and settings.ini",
    "output": "zip configs.zip config.yaml settings.ini"
  },
  {
    "input": "Archive all html files into site.zip",
    "output": "zip site.zip *.html"
  },
  {
    "input": "Compress the scripts folder recursively to scripts.zip",
    "output": "zip -r scripts.zip scripts"
  },
  {
    "input": "Zip up project files index.html, style.css and app.js into web.zip",
    "output": "zip web.zip index.html style.css app.js"
  },
  {
    "input": "Create zip archive codes.zip from all .c and .h files",
    "output": "zip codes.zip *.c *.h"
  },
  {
    "input": "Zip all pdfs in folder books into books.zip",
    "output": "zip books.zip books/*.pdf"
  },
  {
    "input": "Compress all log files into logs.zip",
    "output": "zip logs.zip *.log"
  },
  {
    "input": "Zip report.docx and summary.pdf into report.zip",
    "output": "zip report.zip report.docx summary.pdf"
  },
  {
    "input": "Zip multiple folders folder1 and folder2 into folders.zip",
    "output": "zip -r folders.zip folder1 folder2"
  },
  {
    "input": "Zip videos from the folder movies into movies.zip",
    "output": "zip -r movies.zip movies"
  },
  {
    "input": "Create zip file bin.zip with all executables in /usr/bin",
    "output": "zip bin.zip /usr/bin/*"
  },
  {
    "input": "Zip the log directory into logs_backup.zip",
    "output": "zip -r logs_backup.zip log"
  },
  {
    "input": "Compress everything in /home/user/docs into docs.zip",
    "output": "zip -r docs.zip /home/user/docs"
  },
  {
    "input": "Zip the bash files into scripts.zip",
    "output": "zip scripts.zip *.sh"
  },
  {
    "input": "Make a zip of the backup directory",
    "output": "zip -r backup.zip backup"
  },
  {
    "input": "Zip the folder archive and ignore symbolic links",
    "output": "zip -r -y archive.zip archive"
  },
  {
    "input": "Compress index.md and license.txt into release.zip",
    "output": "zip release.zip index.md license.txt"
  },
  {
    "input": "Zip the entire directory structure of dev into dev_backup.zip",
    "output": "zip -r dev_backup.zip dev"
  },
  {
    "input": "Create archive.zip from main.c and input.txt",
    "output": "zip archive.zip main.c input.txt"
  },
  {
    "input": "Create a zip named user_data.zip containing user.csv",
    "output": "zip user_data.zip user.csv"
  },
  {
    "input": "Compress the entire game directory",
    "output": "zip -r game.zip game"
  },
  {
    "input": "Zip all markdown files into markdowns.zip",
    "output": "zip markdowns.zip *.md"
  },
  {
    "input": "Zip all XML files in current folder",
    "output": "zip xml_files.zip *.xml"
  },
  {
    "input": "Create a zip from .env and config.json",
    "output": "zip settings.zip .env config.json"
  },
  {
    "input": "Zip a folder named demo recursively",
    "output": "zip -r demo.zip demo"
  },
  {
    "input": "Make a zip of the bin folder",
    "output": "zip -r bin.zip bin"
  },
  {
    "input": "Compress java files into java_source.zip",
    "output": "zip java_source.zip *.java"
  },
  {
    "input": "Zip docker-compose.yml and Dockerfile",
    "output": "zip docker.zip docker-compose.yml Dockerfile"
  },
  {
    "input": "Zip all files with .out extension",
    "output": "zip output_files.zip *.out"
  },
  {
    "input": "Make a zip archive of all files starting with temp",
    "output": "zip temp_files.zip temp*"
  },
  {
    "input": "Zip .gitignore and LICENSE",
    "output": "zip git_license.zip .gitignore LICENSE"
  },
  {
    "input": "Zip everything under public_html",
    "output": "zip -r website.zip public_html"
  },
  {
    "input": "Zip the images and thumbnails folders together",
    "output": "zip -r pics.zip images thumbnails"
  },
  {
    "input": "Add test.txt to myarchive.zip",
    "output": "zip myarchive.zip test.txt"
  },
  {
    "input": "Zip python directory and output to py.zip",
    "output": "zip -r py.zip python"
  },
  {
    "input": "Compress all SVG files",
    "output": "zip svgs.zip *.svg"
  },
  {
    "input": "Make a zip archive from codebase folder",
    "output": "zip -r codebase.zip codebase"
  },
  {
    "input": "Create a zip file containing config and templates folders",
    "output": "zip -r config_templates.zip config templates"
  },
  {
    "input": "Compress all js files into frontend.zip",
    "output": "zip frontend.zip *.js"
  },
  {
    "input": "Zip all txt files in notes folder",
    "output": "zip notes.zip notes/*.txt"
  },
  {
    "input": "Zip the file example.py and data.csv",
    "output": "zip files.zip example.py data.csv"
  },
  {
    "input": "Create zip from testcases folder",
    "output": "zip -r testcases.zip testcases"
  },
  {
    "input": "Zip all dat files in current directory",
    "output": "zip datafiles.zip *.dat"
  },
  {
    "input": "Zip all files except images",
    "output": "zip -r archive.zip . -x images/*"
  },
  {
    "input": "Add another file to an existing zip",
    "output": "zip existing.zip newfile.txt"
  },
  {
    "input": "Create a compressed archive of utilities folder",
    "output": "zip -r utilities.zip utilities"
  },
  {
    "input": "Zip python scripts from scripts/ folder",
    "output": "zip scripts.zip scripts/*.py"
  },
  {
    "input": "Zip server logs into serverlogs.zip",
    "output": "zip serverlogs.zip server.log access.log"
  },
  {
    "input": "Create a zip for deployment folder",
    "output": "zip -r deployment.zip deployment"
  },
  {
    "input": "Zip up the homework files",
    "output": "zip homework.zip homework/*.txt"
  },
  {
    "input": "Archive all docs and PDFs",
    "output": "zip documents.zip *.doc *.pdf"
  },
  {
    "input": "Make a zip from random folder",
    "output": "zip -r random.zip random"
  },
  {
    "input": "Zip test results and analysis",
    "output": "zip results.zip test_results.txt analysis.txt"
  },
  {
    "input": "Compress the logs folder recursively",
    "output": "zip -r logs.zip logs"
  },
  {
    "input": "Zip all configuration files",
    "output": "zip configfiles.zip *.conf"
  },
  {
    "input": "Create a zip archive for deployment.sh and config.env",
    "output": "zip deploy.zip deployment.sh config.env"
  },
  {
    "input": "Zip the screenshots folder",
    "output": "zip -r screenshots.zip screenshots"
  },
  {
    "input": "Zip input1.txt and input2.txt into inputs.zip",
    "output": "zip inputs.zip input1.txt input2.txt"
  },
  {
    "input": "Create a zip from the notebook.ipynb",
    "output": "zip notebook.zip notebook.ipynb"
  },
  {
    "input": "Zip data directory recursively",
    "output": "zip -r data.zip data"
  },
  {
    "input": "Compress the tests folder with zip",
    "output": "zip -r tests.zip tests"
  },
  {
    "input": "Zip the archive folder into archive.zip",
    "output": "zip -r archive.zip archive"
  },
  {
    "input": "Zip up project source and docs folders",
    "output": "zip -r project.zip source docs"
  },
  {
    "input": "Make a zip file that includes readme and changelog",
    "output": "zip files.zip readme changelog"
  },
  {
    "input": "Zip main.go and config.yaml",
    "output": "zip go_app.zip main.go config.yaml"
  },
  {
    "input": "Zip the directory public into public.zip",
    "output": "zip -r public.zip public"
  },
  {
    "input": "Zip every PNG in the folder images",
    "output": "zip images.zip images/*.png"
  },
  {
    "input": "Compress all markdown and HTML files",
    "output": "zip web_docs.zip *.md *.html"
  },
  {
    "input": "Zip bash and zsh config files",
    "output": "zip shell_configs.zip .bashrc .zshrc"
  },
  {
    "input": "Create zip from requirements.txt and setup.py",
    "output": "zip python_package.zip requirements.txt setup.py"
  },
  {
    "input": "Zip nginx config directory",
    "output": "zip -r nginx.zip /etc/nginx"
  },
  {
    "input": "Compress resume.docx and photo.jpg into application.zip",
    "output": "zip application.zip resume.docx photo.jpg"
  },
  {
    "input": "Zip scripts and results directories",
    "output": "zip -r job.zip scripts results"
  },
  {
    "input": "Zip the videos directory",
    "output": "zip -r videos.zip videos"
  },
  {
    "input": "Zip a specific file from downloads",
    "output": "zip myfile.zip ~/Downloads/targetfile.txt"
  },
  {
    "input": "Zip two different folders logs and configs",
    "output": "zip -r archive.zip logs configs"
  },
  {
    "input": "Compress everything but the node_modules folder",
    "output": "zip -r app.zip . -x node_modules/*"
  },
  {
    "input": "List UUIDs of all block devices",
    "output": "blkid"
  },
  {
    "input": "Check the UUID of /dev/sda1",
    "output": "blkid /dev/sda1"
  },
  {
    "input": "Get filesystem type of /dev/sdb1",
    "output": "blkid /dev/sdb1"
  },
  {
    "input": "Identify all attached partitions",
    "output": "blkid"
  },
  {
    "input": "Get label and UUID of /dev/sdc2",
    "output": "blkid /dev/sdc2"
  },
  {
    "input": "Show info about /dev/sdd1",
    "output": "blkid /dev/sdd1"
  },
  {
    "input": "Print details of /dev/sde",
    "output": "blkid /dev/sde"
  },
  {
    "input": "Display filesystem type of /dev/sdf2",
    "output": "blkid /dev/sdf2"
  },
  {
    "input": "View UUID of /dev/sdg1",
    "output": "blkid /dev/sdg1"
  },
  {
    "input": "Show label of /dev/sdh3",
    "output": "blkid /dev/sdh3"
  },
  {
    "input": "Check partition info for /dev/sdi",
    "output": "blkid /dev/sdi"
  },
  {
    "input": "Scan for all block device identifiers",
    "output": "blkid"
  },
  {
    "input": "Find UUID of /dev/sda2",
    "output": "blkid /dev/sda2"
  },
  {
    "input": "Get filesystem info of /dev/sdb3",
    "output": "blkid /dev/sdb3"
  },
  {
    "input": "List block devices",
    "output": "blkid"
  },
  {
    "input": "Print block info of USB drive /dev/sdc1",
    "output": "blkid /dev/sdc1"
  },
  {
    "input": "See all partitions and their labels",
    "output": "blkid"
  },
  {
    "input": "Show details of partition /dev/sdd2",
    "output": "blkid /dev/sdd2"
  },
  {
    "input": "Print label and UUID of /dev/sde1",
    "output": "blkid /dev/sde1"
  },
  {
    "input": "Get info of /dev/sdf1",
    "output": "blkid /dev/sdf1"
  },
  {
    "input": "Display UUIDs and labels",
    "output": "blkid"
  },
  {
    "input": "View filesystem label of /dev/sdg2",
    "output": "blkid /dev/sdg2"
  },
  {
    "input": "List UUIDs for all mounted devices",
    "output": "blkid"
  },
  {
    "input": "Get the type of filesystem on /dev/sdh2",
    "output": "blkid /dev/sdh2"
  },
  {
    "input": "Get full block info of /dev/sdi1",
    "output": "blkid /dev/sdi1"
  },
  {
    "input": "View details of root partition /dev/sda3",
    "output": "blkid /dev/sda3"
  },
  {
    "input": "Get partition type of /dev/sdb2",
    "output": "blkid /dev/sdb2"
  },
  {
    "input": "Print block device data",
    "output": "blkid"
  },
  {
    "input": "Get blkid info of swap partition /dev/sdc2",
    "output": "blkid /dev/sdc2"
  },
  {
    "input": "Identify block info for /dev/sdd3",
    "output": "blkid /dev/sdd3"
  },
  {
    "input": "Check blkid of external disk /dev/sde2",
    "output": "blkid /dev/sde2"
  },
  {
    "input": "Fetch filesystem type of partition /dev/sdf3",
    "output": "blkid /dev/sdf3"
  },
  {
    "input": "Check all device UUIDs",
    "output": "blkid"
  },
  {
    "input": "Print label of /dev/sdg3",
    "output": "blkid /dev/sdg3"
  },
  {
    "input": "Get block info from /dev/sdh4",
    "output": "blkid /dev/sdh4"
  },
  {
    "input": "List fs type and UUID of USB at /dev/sdi2",
    "output": "blkid /dev/sdi2"
  },
  {
    "input": "Display all filesystem labels",
    "output": "blkid"
  },
  {
    "input": "Scan and show UUID for /dev/sda4",
    "output": "blkid /dev/sda4"
  },
  {
    "input": "List filesystems on partitions",
    "output": "blkid"
  },
  {
    "input": "Print UUID and label for /dev/sdb4",
    "output": "blkid /dev/sdb4"
  },
  {
    "input": "Get fs type and label from /dev/sdc4",
    "output": "blkid /dev/sdc4"
  },
  {
    "input": "View blkid info of /dev/sdd4",
    "output": "blkid /dev/sdd4"
  },
  {
    "input": "Check disk label of /dev/sde3",
    "output": "blkid /dev/sde3"
  },
  {
    "input": "Identify all block devices with UUID",
    "output": "blkid"
  },
  {
    "input": "Get partition UUID for /dev/sdf4",
    "output": "blkid /dev/sdf4"
  },
  {
    "input": "Display UUID and fs type of /dev/sdg4",
    "output": "blkid /dev/sdg4"
  },
  {
    "input": "Fetch block info of /dev/sdh5",
    "output": "blkid /dev/sdh5"
  },
  {
    "input": "Get blkid for /dev/sdi3",
    "output": "blkid /dev/sdi3"
  },
  {
    "input": "Scan disk identifiers",
    "output": "blkid"
  },
  {
    "input": "Print info of all storage partitions",
    "output": "blkid"
  },
  {
    "input": "Show UUID and type of /dev/sda5",
    "output": "blkid /dev/sda5"
  },
  {
    "input": "Fetch UUID for sdb5",
    "output": "blkid /dev/sdb5"
  },
  {
    "input": "Display block information for /dev/sdc5",
    "output": "blkid /dev/sdc5"
  },
  {
    "input": "Check details of /dev/sdd5",
    "output": "blkid /dev/sdd5"
  },
  {
    "input": "List info for /dev/sde5",
    "output": "blkid /dev/sde5"
  },
  {
    "input": "See filesystem on /dev/sdf5",
    "output": "blkid /dev/sdf5"
  },
  {
    "input": "View info of /dev/sdg5",
    "output": "blkid /dev/sdg5"
  },
  {
    "input": "Identify blkid for /dev/sdh6",
    "output": "blkid /dev/sdh6"
  },
  {
    "input": "Print UUIDs and filesystem names",
    "output": "blkid"
  },
  {
    "input": "Print label of /dev/sdi4",
    "output": "blkid /dev/sdi4"
  },
  {
    "input": "Get full details of /dev/sda6",
    "output": "blkid /dev/sda6"
  },
  {
    "input": "Get filesystem and UUID info from /dev/sdb6",
    "output": "blkid /dev/sdb6"
  },
  {
    "input": "Check filesystem details of /dev/sdc6",
    "output": "blkid /dev/sdc6"
  },
  {
    "input": "View device label for /dev/sdd6",
    "output": "blkid /dev/sdd6"
  },
  {
    "input": "Get label of sde6",
    "output": "blkid /dev/sde6"
  },
  {
    "input": "Scan partition UUIDs",
    "output": "blkid"
  },
  {
    "input": "List partition info of /dev/sdf6",
    "output": "blkid /dev/sdf6"
  },
  {
    "input": "Display info of /dev/sdg6",
    "output": "blkid /dev/sdg6"
  },
  {
    "input": "Check blkid info for /dev/sdh7",
    "output": "blkid /dev/sdh7"
  },
  {
    "input": "Get UUID from /dev/sdi5",
    "output": "blkid /dev/sdi5"
  },
  {
    "input": "Show all device UUIDs and types",
    "output": "blkid"
  },
  {
    "input": "Identify filesystem on /dev/sda7",
    "output": "blkid /dev/sda7"
  },
  {
    "input": "Get block data for /dev/sdb7",
    "output": "blkid /dev/sdb7"
  },
  {
    "input": "Check partition label and UUID /dev/sdc7",
    "output": "blkid /dev/sdc7"
  },
  {
    "input": "View UUID of external drive /dev/sdd7",
    "output": "blkid /dev/sdd7"
  },
  {
    "input": "See label and type of /dev/sde7",
    "output": "blkid /dev/sde7"
  },
  {
    "input": "Get type of /dev/sdf7",
    "output": "blkid /dev/sdf7"
  },
  {
    "input": "Print fs type and UUID for /dev/sdg7",
    "output": "blkid /dev/sdg7"
  },
  {
    "input": "Check blkid for partition /dev/sdh8",
    "output": "blkid /dev/sdh8"
  },
  {
    "input": "Fetch block device info of /dev/sdi6",
    "output": "blkid /dev/sdi6"
  },
  {
    "input": "List all fs labels using blkid",
    "output": "blkid"
  },
  {
    "input": "Identify partition info of /dev/sda8",
    "output": "blkid /dev/sda8"
  },
  {
    "input": "Check UUID and label of /dev/sdb8",
    "output": "blkid /dev/sdb8"
  },
  {
    "input": "View file system type on /dev/sdc8",
    "output": "blkid /dev/sdc8"
  },
  {
    "input": "Show all blkid results",
    "output": "blkid"
  },
  {
    "input": "Get blkid details of /dev/sdd8",
    "output": "blkid /dev/sdd8"
  },
  {
    "input": "Print blkid info for partition /dev/sde8",
    "output": "blkid /dev/sde8"
  },
  {
    "input": "Fetch data of USB stick at /dev/sdf8",
    "output": "blkid /dev/sdf8"
  },
  {
    "input": "List partition UUIDs with blkid",
    "output": "blkid"
  },
  {
    "input": "Show full info for /dev/sdg8",
    "output": "blkid /dev/sdg8"
  },
  {
    "input": "Display block details of /dev/sdh9",
    "output": "blkid /dev/sdh9"
  },
  {
    "input": "Check label and UUID of /dev/sdi7",
    "output": "blkid /dev/sdi7"
  },
  {
    "input": "Create a bootable USB from ISO file",
    "output": "dd if=ubuntu.iso of=/dev/sdX bs=4M status=progress oflag=sync"
  },
  {
    "input": "Backup MBR of disk",
    "output": "dd if=/dev/sda of=mbr_backup.img bs=512 count=1"
  },
  {
    "input": "Write zeros to an entire disk",
    "output": "dd if=/dev/zero of=/dev/sdX bs=1M"
  },
  {
    "input": "Create a 1GB file with zeros",
    "output": "dd if=/dev/zero of=zero_file.img bs=1M count=1024"
  },
  {
    "input": "Create an ISO image from CD-ROM",
    "output": "dd if=/dev/cdrom of=cd_image.iso bs=2048"
  },
  {
    "input": "Clone entire hard disk",
    "output": "dd if=/dev/sda of=/dev/sdb bs=64K conv=noerror,sync"
  },
  {
    "input": "Test write speed of disk",
    "output": "dd if=/dev/zero of=testfile bs=1G count=1 oflag=dsync"
  },
  {
    "input": "Securely wipe a drive using random data",
    "output": "dd if=/dev/urandom of=/dev/sdX bs=1M"
  },
  {
    "input": "Create a 100MB empty file",
    "output": "dd if=/dev/zero of=empty.img bs=1M count=100"
  },
  {
    "input": "Restore disk from image file",
    "output": "dd if=backup.img of=/dev/sdX bs=4M"
  },
  {
    "input": "Make a bootable SD card from image",
    "output": "dd if=raspbian.img of=/dev/mmcblk0 bs=4M status=progress"
  },
  {
    "input": "Copy 10 blocks of 1KB from file",
    "output": "dd if=input.txt of=output.txt bs=1K count=10"
  },
  {
    "input": "Skip first 512 bytes when copying",
    "output": "dd if=file.bin of=out.bin bs=512 skip=1"
  },
  {
    "input": "Read from device without output",
    "output": "dd if=/dev/sda of=/dev/null bs=1M"
  },
  {
    "input": "Truncate file by overwriting with zeroes",
    "output": "dd if=/dev/zero of=file.txt bs=1K count=1 conv=notrunc"
  },
  {
    "input": "Backup a USB stick",
    "output": "dd if=/dev/sdb of=usb_backup.img bs=4M"
  },
  {
    "input": "Create a sparse file",
    "output": "dd if=/dev/zero of=sparse.img bs=1 count=0 seek=1G"
  },
  {
    "input": "Extract specific part of file",
    "output": "dd if=largefile of=part.bin bs=1 skip=1048576 count=1024"
  },
  {
    "input": "Wipe free space with zeros",
    "output": "dd if=/dev/zero of=zero.fill bs=1M; rm zero.fill"
  },
  {
    "input": "Convert text file to uppercase",
    "output": "dd if=text.txt of=out.txt conv=ucase"
  },
  {
    "input": "Create a 10MB random file",
    "output": "dd if=/dev/urandom of=random.bin bs=1M count=10"
  },
  {
    "input": "Benchmark disk read speed",
    "output": "dd if=/dev/sda of=/dev/null bs=4M count=100"
  },
  {
    "input": "Burn an ISO to CD",
    "output": "dd if=linux.iso of=/dev/cdrom bs=2K"
  },
  {
    "input": "Fill disk with data until full",
    "output": "dd if=/dev/zero of=fillfile bs=1M"
  },
  {
    "input": "Copy file with progress bar",
    "output": "dd if=source.dat of=dest.dat bs=4M status=progress"
  },
  {
    "input": "Write image to SD card",
    "output": "dd if=boot.img of=/dev/mmcblk0 bs=1M"
  },
  {
    "input": "Make exact image of disk",
    "output": "dd if=/dev/sda of=disk.img bs=512"
  },
  {
    "input": "Write a binary blob to EEPROM",
    "output": "dd if=eeprom.bin of=/dev/i2c-1 bs=1"
  },
  {
    "input": "Copy image skipping 1st 2MB",
    "output": "dd if=image.iso of=/dev/sdX bs=1M skip=2"
  },
  {
    "input": "Write zeros with sync",
    "output": "dd if=/dev/zero of=/dev/sdX bs=1M conv=fdatasync"
  },
  {
    "input": "Overwrite drive multiple times",
    "output": "for i in {1..3}; do dd if=/dev/urandom of=/dev/sdX bs=1M; done"
  },
  {
    "input": "Split image into 100MB chunks",
    "output": "dd if=big.img bs=100M count=1 | split -b 100M - part_"
  },
  {
    "input": "Recreate image from chunks",
    "output": "cat part_* > big.img"
  },
  {
    "input": "Skip 100MB of input file",
    "output": "dd if=input.img of=out.img bs=1M skip=100"
  },
  {
    "input": "Copy file and remove carriage returns",
    "output": "dd if=input.txt of=output.txt conv=notrunc,unblock"
  },
  {
    "input": "Backup entire boot sector",
    "output": "dd if=/dev/sda of=bootsector.bin bs=512 count=1"
  },
  {
    "input": "Create a raw floppy image",
    "output": "dd if=/dev/fd0 of=floppy.img bs=1440k"
  },
  {
    "input": "Copy a CD image to file",
    "output": "dd if=/dev/cdrom of=disc.iso bs=2048"
  },
  {
    "input": "Create 512-byte file",
    "output": "dd if=/dev/zero of=block512.img bs=512 count=1"
  },
  {
    "input": "Extract MBR to file",
    "output": "dd if=/dev/sda of=mbr.bin bs=446 count=1"
  },
  {
    "input": "Copy binary file and strip metadata",
    "output": "dd if=file.bin of=clean.bin bs=1 conv=sync,noerror"
  },
  {
    "input": "Create 5GB empty file",
    "output": "dd if=/dev/zero of=empty5gb.img bs=1G count=5"
  },
  {
    "input": "Write image using 2MB block size",
    "output": "dd if=image.iso of=/dev/sdX bs=2M status=progress"
  },
  {
    "input": "Clone /dev/sdb to image file",
    "output": "dd if=/dev/sdb of=disk_backup.img bs=4M"
  },
  {
    "input": "Simulate disk read with /dev/null",
    "output": "dd if=/dev/sda of=/dev/null bs=512"
  },
  {
    "input": "Create a blank 200MB image",
    "output": "dd if=/dev/zero of=blank.img bs=1M count=200"
  },
  {
    "input": "Overwrite beginning of file",
    "output": "dd if=newheader.bin of=oldfile.img conv=notrunc"
  },
  {
    "input": "Append binary data to file",
    "output": "dd if=tail.bin >> fullfile.img"
  },
  {
    "input": "Backup LVM volume",
    "output": "dd if=/dev/mapper/vg-lv of=lvm_backup.img bs=1M"
  },
  {
    "input": "Create file with 100 null bytes",
    "output": "dd if=/dev/zero of=100bytes bs=100 count=1"
  },
  {
    "input": "Remove all data from partition",
    "output": "dd if=/dev/zero of=/dev/sdX1 bs=512"
  },
  {
    "input": "Create test file with pattern",
    "output": "yes | tr -d '\\n' | dd bs=1024 count=100 of=testfile"
  },
  {
    "input": "Measure write performance",
    "output": "dd if=/dev/zero of=write.test bs=8k count=100000 conv=fdatasync"
  },
  {
    "input": "Dump memory to file",
    "output": "dd if=/dev/mem of=memory.dump bs=1024"
  },
  {
    "input": "Read 10MB from raw image",
    "output": "dd if=raw.img of=output.img bs=1M count=10"
  },
  {
    "input": "Clone USB drive",
    "output": "dd if=/dev/sdb of=/dev/sdc bs=4M"
  },
  {
    "input": "Create floppy disk image",
    "output": "dd if=/dev/fd0 of=floppy.img bs=1440k"
  },
  {
    "input": "Strip padding from binary",
    "output": "dd if=input.bin of=output.bin bs=512 count=1 conv=notrunc"
  },
  {
    "input": "Test reading SSD",
    "output": "dd if=/dev/nvme0n1 of=/dev/null bs=1M"
  },
  {
    "input": "Fill file with ones (converted)",
    "output": "yes | tr -d '\\n' | dd of=ones.txt bs=1M count=1"
  },
  {
    "input": "Quick format by zeroing start",
    "output": "dd if=/dev/zero of=/dev/sdX bs=1M count=100"
  },
  {
    "input": "Create 50MB swap file",
    "output": "dd if=/dev/zero of=/swapfile bs=1M count=50"
  },
  {
    "input": "Copy only 1GB from disk",
    "output": "dd if=/dev/sda of=partial.img bs=1M count=1024"
  },
  {
    "input": "Copy partition image to USB",
    "output": "dd if=partition.img of=/dev/sdb bs=4M status=progress"
  },
  {
    "input": "Dump physical memory",
    "output": "dd if=/dev/mem of=physmem.bin bs=4096"
  },
  {
    "input": "Create 10K file with /dev/zero",
    "output": "dd if=/dev/zero of=zero10k.img bs=1K count=10"
  },
  {
    "input": "Get first 100 bytes from file",
    "output": "dd if=input.txt of=first100 bs=1 count=100"
  },
  {
    "input": "Copy 1 block and skip 5",
    "output": "dd if=file.bin of=output.bin bs=1 count=1 skip=5"
  },
  {
    "input": "Skip first 1MB of ISO",
    "output": "dd if=ubuntu.iso of=ubuntu_trimmed.iso bs=1M skip=1"
  },
  {
    "input": "Clone partition with dd",
    "output": "dd if=/dev/sda1 of=/dev/sdb1 bs=4M"
  },
  {
    "input": "Open partition table for disk /dev/sda",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "List all available disk partitions",
    "output": "fdisk -l"
  },
  {
    "input": "Display partitions on disk /dev/sdb",
    "output": "fdisk -l /dev/sdb"
  },
  {
    "input": "View the partition table of /dev/nvme0n1",
    "output": "fdisk -l /dev/nvme0n1"
  },
  {
    "input": "Start fdisk on disk /dev/sdc",
    "output": "fdisk /dev/sdc"
  },
  {
    "input": "Open interactive fdisk session for /dev/vda",
    "output": "fdisk /dev/vda"
  },
  {
    "input": "Show all disks with partition info",
    "output": "fdisk -l"
  },
  {
    "input": "List details of /dev/xvda partitions",
    "output": "fdisk -l /dev/xvda"
  },
  {
    "input": "Run fdisk on /dev/mmcblk0",
    "output": "fdisk /dev/mmcblk0"
  },
  {
    "input": "Open fdisk prompt for /dev/sdd",
    "output": "fdisk /dev/sdd"
  },
  {
    "input": "List all partition tables",
    "output": "fdisk -l"
  },
  {
    "input": "Display partition layout of disk /dev/sde",
    "output": "fdisk -l /dev/sde"
  },
  {
    "input": "Enter partition editor for /dev/nvme1n1",
    "output": "fdisk /dev/nvme1n1"
  },
  {
    "input": "Open fdisk for USB drive /dev/sdf",
    "output": "fdisk /dev/sdf"
  },
  {
    "input": "See all devices and partitions",
    "output": "fdisk -l"
  },
  {
    "input": "Launch fdisk for editing /dev/sdg",
    "output": "fdisk /dev/sdg"
  },
  {
    "input": "Check the structure of /dev/sda1",
    "output": "fdisk -l /dev/sda1"
  },
  {
    "input": "View partitions on system disk",
    "output": "fdisk -l /dev/sda"
  },
  {
    "input": "Check available partitions on nvme disk",
    "output": "fdisk -l /dev/nvme0n1"
  },
  {
    "input": "Start partition manager on new HDD /dev/sdh",
    "output": "fdisk /dev/sdh"
  },
  {
    "input": "Run fdisk in interactive mode on /dev/vdb",
    "output": "fdisk /dev/vdb"
  },
  {
    "input": "View current partitions on /dev/sdi",
    "output": "fdisk -l /dev/sdi"
  },
  {
    "input": "Inspect partitions of /dev/sdb2",
    "output": "fdisk -l /dev/sdb2"
  },
  {
    "input": "Check partition scheme of /dev/mmcblk0p1",
    "output": "fdisk -l /dev/mmcblk0p1"
  },
  {
    "input": "Use fdisk to explore /dev/sdj",
    "output": "fdisk /dev/sdj"
  },
  {
    "input": "Print partition table of /dev/sda3",
    "output": "fdisk -l /dev/sda3"
  },
  {
    "input": "Access partition tool for SATA drive",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Display all mounted devices",
    "output": "fdisk -l"
  },
  {
    "input": "Open fdisk for embedded flash storage",
    "output": "fdisk /dev/mmcblk0"
  },
  {
    "input": "Examine disk layout of /dev/sdc1",
    "output": "fdisk -l /dev/sdc1"
  },
  {
    "input": "Start fdisk session on /dev/vdc",
    "output": "fdisk /dev/vdc"
  },
  {
    "input": "Print disk layout of /dev/nvme1n1p1",
    "output": "fdisk -l /dev/nvme1n1p1"
  },
  {
    "input": "List all partitions with details",
    "output": "fdisk -l"
  },
  {
    "input": "Access disk partition interface for /dev/sdl",
    "output": "fdisk /dev/sdl"
  },
  {
    "input": "Check how /dev/sdm is partitioned",
    "output": "fdisk -l /dev/sdm"
  },
  {
    "input": "Open partition manager for removable disk",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "Inspect MBR of /dev/sda",
    "output": "fdisk -l /dev/sda"
  },
  {
    "input": "Start fdisk tool for /dev/sdn",
    "output": "fdisk /dev/sdn"
  },
  {
    "input": "List partition information of boot disk",
    "output": "fdisk -l /dev/sda"
  },
  {
    "input": "Use fdisk to manage /dev/vdd",
    "output": "fdisk /dev/vdd"
  },
  {
    "input": "View partitions on external HDD",
    "output": "fdisk -l /dev/sdb"
  },
  {
    "input": "Launch fdisk CLI for /dev/sdo",
    "output": "fdisk /dev/sdo"
  },
  {
    "input": "Open fdisk for partitioning",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Show partition layout for /dev/sdp",
    "output": "fdisk -l /dev/sdp"
  },
  {
    "input": "Run fdisk to list /dev/vde",
    "output": "fdisk -l /dev/vde"
  },
  {
    "input": "List partition details of /dev/sdq",
    "output": "fdisk -l /dev/sdq"
  },
  {
    "input": "Partition disk /dev/sdr using fdisk",
    "output": "fdisk /dev/sdr"
  },
  {
    "input": "Display partition layout on /dev/mmcblk1",
    "output": "fdisk -l /dev/mmcblk1"
  },
  {
    "input": "Check partition info of SD card",
    "output": "fdisk -l /dev/mmcblk0"
  },
  {
    "input": "Inspect disk partitions of /dev/nvme2n1",
    "output": "fdisk -l /dev/nvme2n1"
  },
  {
    "input": "Open interactive session for /dev/vdf",
    "output": "fdisk /dev/vdf"
  },
  {
    "input": "Check layout of USB disk /dev/sds",
    "output": "fdisk -l /dev/sds"
  },
  {
    "input": "Run fdisk on the boot drive",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Use fdisk to view SSD partition table",
    "output": "fdisk -l /dev/nvme0n1"
  },
  {
    "input": "Get full partition list",
    "output": "fdisk -l"
  },
  {
    "input": "Use fdisk to manage partitions",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Open partition editor for /dev/sdt",
    "output": "fdisk /dev/sdt"
  },
  {
    "input": "List all partitions of every disk",
    "output": "fdisk -l"
  },
  {
    "input": "Open fdisk on /dev/sdu",
    "output": "fdisk /dev/sdu"
  },
  {
    "input": "Launch fdisk to manage storage",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Inspect drive partitioning with fdisk",
    "output": "fdisk -l"
  },
  {
    "input": "Print all partition tables with fdisk",
    "output": "fdisk -l"
  },
  {
    "input": "Use fdisk to view partitions on /dev/sdv",
    "output": "fdisk -l /dev/sdv"
  },
  {
    "input": "Run fdisk on SATA drive",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Display partition map of /dev/sdw",
    "output": "fdisk -l /dev/sdw"
  },
  {
    "input": "Partition manager for USB",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "Open partition utility for SSD",
    "output": "fdisk /dev/nvme0n1"
  },
  {
    "input": "Print all partition tables",
    "output": "fdisk -l"
  },
  {
    "input": "Check the format of storage /dev/sdy",
    "output": "fdisk -l /dev/sdy"
  },
  {
    "input": "Run fdisk to inspect /dev/sdz",
    "output": "fdisk /dev/sdz"
  },
  {
    "input": "View partition information using fdisk",
    "output": "fdisk -l"
  },
  {
    "input": "Inspect the disk structure of /dev/vdg",
    "output": "fdisk -l /dev/vdg"
  },
  {
    "input": "Run fdisk on drive vdh",
    "output": "fdisk /dev/vdh"
  },
  {
    "input": "Display layout of mmc device",
    "output": "fdisk -l /dev/mmcblk0"
  },
  {
    "input": "Inspect storage volume /dev/vdi",
    "output": "fdisk -l /dev/vdi"
  },
  {
    "input": "Check partition table of SATA disk",
    "output": "fdisk -l /dev/sda"
  },
  {
    "input": "Launch fdisk session for removable media",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "Use fdisk to manage /dev/nvme1n1",
    "output": "fdisk /dev/nvme1n1"
  },
  {
    "input": "Run fdisk on new external drive",
    "output": "fdisk /dev/sdf"
  },
  {
    "input": "Start fdisk on a block device",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "View details of the partition /dev/sdc2",
    "output": "fdisk -l /dev/sdc2"
  },
  {
    "input": "Open fdisk for inspection of bootable partitions",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Use fdisk to look at structure of /dev/vdj",
    "output": "fdisk -l /dev/vdj"
  },
  {
    "input": "Open fdisk to manage partitions on new disk",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "Use fdisk to inspect disk schema",
    "output": "fdisk -l"
  },
  {
    "input": "Check layout of Linux partitions",
    "output": "fdisk -l /dev/sda"
  },
  {
    "input": "Open fdisk CLI tool for volume",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Print layout of /dev/vdk",
    "output": "fdisk -l /dev/vdk"
  },
  {
    "input": "Open fdisk for viewing partitions of nvme SSD",
    "output": "fdisk /dev/nvme0n1"
  },
  {
    "input": "Launch fdisk terminal for USB drive",
    "output": "fdisk /dev/sdb"
  },
  {
    "input": "Check partitions of disk manually",
    "output": "fdisk /dev/sda"
  },
  {
    "input": "Format /dev/sda1 as ext4",
    "output": "mkfs.ext4 /dev/sda1"
  },
  {
    "input": "Make ext3 filesystem on /dev/sdb1",
    "output": "mkfs.ext3 /dev/sdb1"
  },
  {
    "input": "Create an xfs file system on /dev/sdc1",
    "output": "mkfs.xfs /dev/sdc1"
  },
  {
    "input": "Format the USB at /dev/sdd1 using FAT32",
    "output": "mkfs.vfat /dev/sdd1"
  },
  {
    "input": "Initialize a new NTFS partition on /dev/sde1",
    "output": "mkfs.ntfs /dev/sde1"
  },
  {
    "input": "Create a new ext4 filesystem on disk /dev/sdf1",
    "output": "mkfs.ext4 /dev/sdf1"
  },
  {
    "input": "Make a file system of type exfat on /dev/sdg1",
    "output": "mkfs.exfat /dev/sdg1"
  },
  {
    "input": "Format external drive /dev/sdh1 to xfs",
    "output": "mkfs.xfs /dev/sdh1"
  },
  {
    "input": "Make a vfat file system on /dev/sdi1",
    "output": "mkfs.vfat /dev/sdi1"
  },
  {
    "input": "Format /dev/sdj1 with ext2",
    "output": "mkfs.ext2 /dev/sdj1"
  },
  {
    "input": "Create ext4 on /dev/nvme0n1p1",
    "output": "mkfs.ext4 /dev/nvme0n1p1"
  },
  {
    "input": "Format partition /dev/sdb2 as ext3",
    "output": "mkfs.ext3 /dev/sdb2"
  },
  {
    "input": "Initialize a FAT file system on /dev/sda2",
    "output": "mkfs.vfat /dev/sda2"
  },
  {
    "input": "Create a new ext4 fs on USB at /dev/sdc2",
    "output": "mkfs.ext4 /dev/sdc2"
  },
  {
    "input": "Make ext2 filesystem for /dev/sdd2",
    "output": "mkfs.ext2 /dev/sdd2"
  },
  {
    "input": "Format /dev/sde2 with ntfs",
    "output": "mkfs.ntfs /dev/sde2"
  },
  {
    "input": "Make filesystem on /dev/sdf2 using exfat",
    "output": "mkfs.exfat /dev/sdf2"
  },
  {
    "input": "Create a linux file system xfs on /dev/sdg2",
    "output": "mkfs.xfs /dev/sdg2"
  },
  {
    "input": "Set up ext4 on /dev/sdh2",
    "output": "mkfs.ext4 /dev/sdh2"
  },
  {
    "input": "Make vfat system on USB stick /dev/sdi2",
    "output": "mkfs.vfat /dev/sdi2"
  },
  {
    "input": "Create file system ext3 on /dev/sdj2",
    "output": "mkfs.ext3 /dev/sdj2"
  },
  {
    "input": "Format nvme disk partition /dev/nvme1n1p1 to ext4",
    "output": "mkfs.ext4 /dev/nvme1n1p1"
  },
  {
    "input": "Format sd card at /dev/mmcblk0p1 as FAT32",
    "output": "mkfs.vfat /dev/mmcblk0p1"
  },
  {
    "input": "Make ntfs fs on external drive /dev/sda3",
    "output": "mkfs.ntfs /dev/sda3"
  },
  {
    "input": "Format backup disk /dev/sdb3 using xfs",
    "output": "mkfs.xfs /dev/sdb3"
  },
  {
    "input": "Create filesystem exfat on /dev/sdc3",
    "output": "mkfs.exfat /dev/sdc3"
  },
  {
    "input": "Format /dev/sdd3 with ext2",
    "output": "mkfs.ext2 /dev/sdd3"
  },
  {
    "input": "Create ext4 file system on /dev/sde3",
    "output": "mkfs.ext4 /dev/sde3"
  },
  {
    "input": "Format partition /dev/sdf3 to ext3",
    "output": "mkfs.ext3 /dev/sdf3"
  },
  {
    "input": "Create vfat on /dev/sdg3",
    "output": "mkfs.vfat /dev/sdg3"
  },
  {
    "input": "Make file system on /dev/sdh3 as ntfs",
    "output": "mkfs.ntfs /dev/sdh3"
  },
  {
    "input": "Set up exfat system on /dev/sdi3",
    "output": "mkfs.exfat /dev/sdi3"
  },
  {
    "input": "Format partition 3 on ssd to xfs",
    "output": "mkfs.xfs /dev/sdj3"
  },
  {
    "input": "Format nvme partition /dev/nvme0n1p2 to ext2",
    "output": "mkfs.ext2 /dev/nvme0n1p2"
  },
  {
    "input": "Create ext3 on /dev/nvme0n1p3",
    "output": "mkfs.ext3 /dev/nvme0n1p3"
  },
  {
    "input": "Make ext4 on /dev/nvme1n1p2",
    "output": "mkfs.ext4 /dev/nvme1n1p2"
  },
  {
    "input": "Create filesystem vfat for /dev/sda4",
    "output": "mkfs.vfat /dev/sda4"
  },
  {
    "input": "Format device /dev/sdb4 using ext3",
    "output": "mkfs.ext3 /dev/sdb4"
  },
  {
    "input": "Format partition 4 as ext2",
    "output": "mkfs.ext2 /dev/sdc4"
  },
  {
    "input": "Create xfs on /dev/sdd4",
    "output": "mkfs.xfs /dev/sdd4"
  },
  {
    "input": "Initialize exfat on /dev/sde4",
    "output": "mkfs.exfat /dev/sde4"
  },
  {
    "input": "Make new ntfs file system on /dev/sdf4",
    "output": "mkfs.ntfs /dev/sdf4"
  },
  {
    "input": "Create ext4 file system on disk /dev/sdg4",
    "output": "mkfs.ext4 /dev/sdg4"
  },
  {
    "input": "Build ext3 on external drive /dev/sdh4",
    "output": "mkfs.ext3 /dev/sdh4"
  },
  {
    "input": "Set up file system ext2 on /dev/sdi4",
    "output": "mkfs.ext2 /dev/sdi4"
  },
  {
    "input": "Format partition on USB as fat32",
    "output": "mkfs.vfat /dev/sdj4"
  },
  {
    "input": "Format nvme1n1p3 as xfs",
    "output": "mkfs.xfs /dev/nvme1n1p3"
  },
  {
    "input": "Create filesystem ext4 on /dev/sda5",
    "output": "mkfs.ext4 /dev/sda5"
  },
  {
    "input": "Make exfat file system on /dev/sdb5",
    "output": "mkfs.exfat /dev/sdb5"
  },
  {
    "input": "Make vfat system on /dev/sdc5",
    "output": "mkfs.vfat /dev/sdc5"
  },
  {
    "input": "Format backup partition to ntfs",
    "output": "mkfs.ntfs /dev/sdd5"
  },
  {
    "input": "Create xfs on /dev/sde5",
    "output": "mkfs.xfs /dev/sde5"
  },
  {
    "input": "Make ext2 file system on /dev/sdf5",
    "output": "mkfs.ext2 /dev/sdf5"
  },
  {
    "input": "Format /dev/sdg5 as ext3",
    "output": "mkfs.ext3 /dev/sdg5"
  },
  {
    "input": "Initialize FAT32 file system on /dev/sdh5",
    "output": "mkfs.vfat /dev/sdh5"
  },
  {
    "input": "Create ext4 fs for /dev/sdi5",
    "output": "mkfs.ext4 /dev/sdi5"
  },
  {
    "input": "Make ntfs file system on /dev/sdj5",
    "output": "mkfs.ntfs /dev/sdj5"
  },
  {
    "input": "Create file system of type ext3 for /dev/sda6",
    "output": "mkfs.ext3 /dev/sda6"
  },
  {
    "input": "Build file system using xfs on /dev/sdb6",
    "output": "mkfs.xfs /dev/sdb6"
  },
  {
    "input": "Make ext4 on USB device /dev/sdc6",
    "output": "mkfs.ext4 /dev/sdc6"
  },
  {
    "input": "Format external HDD /dev/sdd6 to exfat",
    "output": "mkfs.exfat /dev/sdd6"
  },
  {
    "input": "Make filesystem vfat for /dev/sde6",
    "output": "mkfs.vfat /dev/sde6"
  },
  {
    "input": "Create linux file system ext2 on /dev/sdf6",
    "output": "mkfs.ext2 /dev/sdf6"
  },
  {
    "input": "Format flash drive to ntfs on /dev/sdg6",
    "output": "mkfs.ntfs /dev/sdg6"
  },
  {
    "input": "Initialize xfs on /dev/sdh6",
    "output": "mkfs.xfs /dev/sdh6"
  },
  {
    "input": "Format /dev/sdi6 as ext4",
    "output": "mkfs.ext4 /dev/sdi6"
  },
  {
    "input": "Create ext3 system on /dev/sdj6",
    "output": "mkfs.ext3 /dev/sdj6"
  },
  {
    "input": "Make a fat32 file system on nvme /dev/nvme0n1p4",
    "output": "mkfs.vfat /dev/nvme0n1p4"
  },
  {
    "input": "Initialize partition /dev/sda7 to ext2",
    "output": "mkfs.ext2 /dev/sda7"
  },
  {
    "input": "Create NTFS file system on /dev/sdb7",
    "output": "mkfs.ntfs /dev/sdb7"
  },
  {
    "input": "Create exfat system on USB drive /dev/sdc7",
    "output": "mkfs.exfat /dev/sdc7"
  },
  {
    "input": "Build ext4 fs on /dev/sdd7",
    "output": "mkfs.ext4 /dev/sdd7"
  },
  {
    "input": "Make file system of type ext3 for /dev/sde7",
    "output": "mkfs.ext3 /dev/sde7"
  },
  {
    "input": "Format partition 7 as xfs",
    "output": "mkfs.xfs /dev/sdf7"
  },
  {
    "input": "Create a new vfat file system on /dev/sdg7",
    "output": "mkfs.vfat /dev/sdg7"
  },
  {
    "input": "Format /dev/sdh7 to ext2",
    "output": "mkfs.ext2 /dev/sdh7"
  },
  {
    "input": "Set up exfat file system on /dev/sdi7",
    "output": "mkfs.exfat /dev/sdi7"
  },
  {
    "input": "Format disk partition /dev/sdj7 using ntfs",
    "output": "mkfs.ntfs /dev/sdj7"
  },
  {
    "input": "Format usb partition /dev/sda8 to ext4",
    "output": "mkfs.ext4 /dev/sda8"
  },
  {
    "input": "Create xfs file system on /dev/sdb8",
    "output": "mkfs.xfs /dev/sdb8"
  },
  {
    "input": "Make ext3 system on /dev/sdc8",
    "output": "mkfs.ext3 /dev/sdc8"
  },
  {
    "input": "Format SD card partition /dev/mmcblk0p2 as vfat",
    "output": "mkfs.vfat /dev/mmcblk0p2"
  },
  {
    "input": "Mount the USB drive located at /dev/sdb1 to the /media/usb directory",
    "output": "mount /dev/sdb1 /media/usb"
  },
  {
    "input": "Mount an ext4 filesystem from /dev/sda2 to /mnt/data",
    "output": "mount -t ext4 /dev/sda2 /mnt/data"
  },
  {
    "input": "Attach ISO image file disk.iso to /mnt/iso",
    "output": "mount -o loop disk.iso /mnt/iso"
  },
  {
    "input": "Mount the CD-ROM to /media/cdrom",
    "output": "mount /dev/cdrom /media/cdrom"
  },
  {
    "input": "Mount a remote NFS share from 192.168.1.10:/export/nfs to /mnt/nfs",
    "output": "mount -t nfs 192.168.1.10:/export/nfs /mnt/nfs"
  },
  {
    "input": "Mount a Windows network share to /mnt/smb",
    "output": "mount -t cifs //192.168.1.20/shared /mnt/smb -o username=guest"
  },
  {
    "input": "Attach the filesystem of /dev/sdc1 to /mnt/usb",
    "output": "mount /dev/sdc1 /mnt/usb"
  },
  {
    "input": "Mount an xfs disk on /mnt/storage",
    "output": "mount -t xfs /dev/sdd1 /mnt/storage"
  },
  {
    "input": "Mount disk /dev/sda3 in read-only mode at /mnt/ro",
    "output": "mount -o ro /dev/sda3 /mnt/ro"
  },
  {
    "input": "Use mount to list all mounted filesystems",
    "output": "mount"
  },
  {
    "input": "Mount tmpfs of size 1G on /mnt/tmp",
    "output": "mount -t tmpfs -o size=1G tmpfs /mnt/tmp"
  },
  {
    "input": "Mount a Btrfs filesystem on /mnt/btrfs",
    "output": "mount -t btrfs /dev/sde1 /mnt/btrfs"
  },
  {
    "input": "Mount /dev/sdf1 to /mnt with noatime option",
    "output": "mount -o noatime /dev/sdf1 /mnt"
  },
  {
    "input": "Attach floppy drive to /mnt/floppy",
    "output": "mount /dev/fd0 /mnt/floppy"
  },
  {
    "input": "Mount VFAT USB to /mnt/usbdrive",
    "output": "mount -t vfat /dev/sdg1 /mnt/usbdrive"
  },
  {
    "input": "Mount a partition /dev/sdh1 with UTF8 encoding",
    "output": "mount -t vfat -o iocharset=utf8 /dev/sdh1 /mnt/drive"
  },
  {
    "input": "Mount ISO with read-only option",
    "output": "mount -o loop,ro file.iso /mnt/iso"
  },
  {
    "input": "Mount encrypted LUKS partition /dev/sdi1 to /mnt/secure",
    "output": "mount /dev/mapper/secure /mnt/secure"
  },
  {
    "input": "Mount squashfs image file",
    "output": "mount -t squashfs -o loop image.squashfs /mnt/squash"
  },
  {
    "input": "Mount ISO to /mnt/cdrom with loopback",
    "output": "mount -o loop /home/user/image.iso /mnt/cdrom"
  },
  {
    "input": "Mount device with label BACKUP to /backup",
    "output": "mount LABEL=BACKUP /backup"
  },
  {
    "input": "Mount using UUID of the disk",
    "output": "mount UUID=xxxx-xxxx /mnt/disk"
  },
  {
    "input": "Mount filesystem from /dev/sdj1 as read-write",
    "output": "mount -o rw /dev/sdj1 /mnt/disk"
  },
  {
    "input": "Mount NTFS disk from /dev/sdk1",
    "output": "mount -t ntfs /dev/sdk1 /mnt/ntfs"
  },
  {
    "input": "Mount samba share using credentials file",
    "output": "mount -t cifs //server/share /mnt/smb -o credentials=/root/.smbcred"
  },
  {
    "input": "Mount tmpfs at /run",
    "output": "mount -t tmpfs tmpfs /run"
  },
  {
    "input": "Bind mount /var/www to /mnt/www",
    "output": "mount --bind /var/www /mnt/www"
  },
  {
    "input": "Remount root filesystem as read-only",
    "output": "mount -o remount,ro /"
  },
  {
    "input": "Show all mounted filesystems with types",
    "output": "mount -l"
  },
  {
    "input": "Mount a device using its path and ext3 filesystem",
    "output": "mount -t ext3 /dev/sdl1 /mnt/ext3"
  },
  {
    "input": "Mount shared folder with username and password",
    "output": "mount -t cifs //server/docs /mnt/docs -o username=user,password=pass"
  },
  {
    "input": "Attach disk with noexec option",
    "output": "mount -o noexec /dev/sdm1 /mnt"
  },
  {
    "input": "Mount remote NFS with version 3",
    "output": "mount -t nfs -o nfsvers=3 192.168.1.100:/data /mnt/nfs"
  },
  {
    "input": "Mount disk using options rw,sync",
    "output": "mount -o rw,sync /dev/sdn1 /mnt/sync"
  },
  {
    "input": "Use mount command to get mount point of a device",
    "output": "mount | grep /dev/sdn1"
  },
  {
    "input": "Mount a UDF DVD",
    "output": "mount -t udf /dev/sr0 /mnt/dvd"
  },
  {
    "input": "Mount ext2 partition to /mnt/ext2",
    "output": "mount -t ext2 /dev/sdo1 /mnt/ext2"
  },
  {
    "input": "Bind mount /mnt/source to /mnt/target",
    "output": "mount --bind /mnt/source /mnt/target"
  },
  {
    "input": "Mount CIFS share to local folder",
    "output": "mount -t cifs //192.168.1.5/data /mnt/data -o user=admin"
  },
  {
    "input": "Mount encrypted drive opened with cryptsetup",
    "output": "mount /dev/mapper/encrypted /mnt/encrypted"
  },
  {
    "input": "Mount ISO with offset",
    "output": "mount -o loop,offset=512 file.iso /mnt/iso"
  },
  {
    "input": "Mount ramfs at /mnt/ramdisk",
    "output": "mount -t ramfs ramfs /mnt/ramdisk"
  },
  {
    "input": "Mount partition with nosuid option",
    "output": "mount -o nosuid /dev/sdp1 /mnt/nosuid"
  },
  {
    "input": "Mount remote directory over sshfs",
    "output": "sshfs user@host:/remote /mnt/remote"
  },
  {
    "input": "Mount ISO using fuseiso",
    "output": "fuseiso image.iso /mnt/iso"
  },
  {
    "input": "Mount a read-only CDROM",
    "output": "mount -o ro /dev/cdrom /media/cd"
  },
  {
    "input": "Mount device with utf8 support",
    "output": "mount -o iocharset=utf8 /dev/sdq1 /mnt"
  },
  {
    "input": "Mount disk with defaults option",
    "output": "mount -o defaults /dev/sdr1 /mnt"
  },
  {
    "input": "Mount partition as user",
    "output": "mount -o uid=1000,gid=1000 /dev/sds1 /mnt/user"
  },
  {
    "input": "Mount partition without access time update",
    "output": "mount -o relatime /dev/sdt1 /mnt"
  },
  {
    "input": "Mount USB at /media/usb automatically",
    "output": "mount /dev/sdu1 /media/usb"
  },
  {
    "input": "Mount disk with barrier=0",
    "output": "mount -o barrier=0 /dev/sdv1 /mnt"
  },
  {
    "input": "Mount using fstab entry",
    "output": "mount /mnt/data"
  },
  {
    "input": "Mount all filesystems in fstab",
    "output": "mount -a"
  },
  {
    "input": "Mount systemd automount unit",
    "output": "systemctl start mnt-data.mount"
  },
  {
    "input": "Mount devtmpfs on /dev",
    "output": "mount -t devtmpfs devtmpfs /dev"
  },
  {
    "input": "Mount proc on /proc",
    "output": "mount -t proc proc /proc"
  },
  {
    "input": "Mount sysfs on /sys",
    "output": "mount -t sysfs sysfs /sys"
  },
  {
    "input": "Mount debugfs on /sys/kernel/debug",
    "output": "mount -t debugfs none /sys/kernel/debug"
  },
  {
    "input": "Mount fuse-based filesystem",
    "output": "mount -t fuseblk /dev/sdw1 /mnt/fuse"
  },
  {
    "input": "Mount encrypted disk with luksOpen and mount",
    "output": "cryptsetup luksOpen /dev/sdx1 secure && mount /dev/mapper/secure /mnt/secure"
  },
  {
    "input": "Remount /home with read-write permissions",
    "output": "mount -o remount,rw /home"
  },
  {
    "input": "Mount overlayfs over /mnt/overlay",
    "output": "mount -t overlay overlay -o lowerdir=/lower,upperdir=/upper,workdir=/work /mnt/overlay"
  },
  {
    "input": "Mount hugepages filesystem",
    "output": "mount -t hugetlbfs none /mnt/huge"
  },
  {
    "input": "Mount bind of /etc to /mnt/etc",
    "output": "mount --bind /etc /mnt/etc"
  },
  {
    "input": "Mount vfat USB drive with umask",
    "output": "mount -t vfat -o umask=000 /dev/sdy1 /mnt"
  },
  {
    "input": "Mount ISO with exec option",
    "output": "mount -o loop,exec image.iso /mnt/iso"
  },
  {
    "input": "Mount ISO file with read-write loopback",
    "output": "mount -o loop,rw image.iso /mnt/iso"
  },
  {
    "input": "Mount readonly partition /dev/sdz1",
    "output": "mount -o ro /dev/sdz1 /mnt"
  },
  {
    "input": "Mount network drive using NFSv4",
    "output": "mount -t nfs4 192.168.1.15:/export /mnt/nfs"
  },
  {
    "input": "Start parted on disk /dev/sda",
    "output": "parted /dev/sda"
  },
  {
    "input": "Open parted for disk /dev/sdb",
    "output": "parted /dev/sdb"
  },
  {
    "input": "Show partition table of /dev/sda",
    "output": "parted /dev/sda print"
  },
  {
    "input": "Print partition information for /dev/nvme0n1",
    "output": "parted /dev/nvme0n1 print"
  },
  {
    "input": "Create a new msdos partition table on /dev/sda",
    "output": "parted /dev/sda mklabel msdos"
  },
  {
    "input": "Create a new gpt partition table on /dev/sdb",
    "output": "parted /dev/sdb mklabel gpt"
  },
  {
    "input": "Resize the first partition on /dev/sda to 10GB",
    "output": "parted /dev/sda resizepart 1 10GB"
  },
  {
    "input": "Make a primary ext4 partition from 1MB to 1GB on /dev/sdc",
    "output": "parted /dev/sdc mkpart primary ext4 1MiB 1GiB"
  },
  {
    "input": "Display all partitions on /dev/sdd",
    "output": "parted /dev/sdd print"
  },
  {
    "input": "Launch parted in interactive mode for /dev/sde",
    "output": "parted /dev/sde"
  },
  {
    "input": "Create a fat32 partition from 0% to 100% on /dev/sdf",
    "output": "parted /dev/sdf mkpart primary fat32 0% 100%"
  },
  {
    "input": "Align partitions optimally on /dev/sdg",
    "output": "parted /dev/sdg align-check optimal 1"
  },
  {
    "input": "Make new ext4 partition on /dev/sda starting at 100MiB to 1GiB",
    "output": "parted /dev/sda mkpart primary ext4 100MiB 1GiB"
  },
  {
    "input": "Print partition table of /dev/sdb non-interactively",
    "output": "parted -s /dev/sdb print"
  },
  {
    "input": "Create 2GB partition on /dev/sdc starting at 1GB",
    "output": "parted /dev/sdc mkpart primary ext4 1GB 3GB"
  },
  {
    "input": "Set boot flag on /dev/sda1",
    "output": "parted /dev/sda set 1 boot on"
  },
  {
    "input": "Remove partition 1 from /dev/sdb",
    "output": "parted /dev/sdb rm 1"
  },
  {
    "input": "Check optimal alignment for /dev/sdc partition 1",
    "output": "parted /dev/sdc align-check optimal 1"
  },
  {
    "input": "Use parted to inspect /dev/sdd",
    "output": "parted /dev/sdd"
  },
  {
    "input": "Create new partition on /dev/sde from 5GiB to 10GiB",
    "output": "parted /dev/sde mkpart primary ext4 5GiB 10GiB"
  },
  {
    "input": "Enable lvm flag on /dev/sdf1",
    "output": "parted /dev/sdf set 1 lvm on"
  },
  {
    "input": "Create a swap partition on /dev/sdg",
    "output": "parted /dev/sdg mkpart primary linux-swap 2GiB 4GiB"
  },
  {
    "input": "Print disk layout for /dev/nvme1n1",
    "output": "parted /dev/nvme1n1 print"
  },
  {
    "input": "Start parted for USB drive /dev/sdh",
    "output": "parted /dev/sdh"
  },
  {
    "input": "Use parted to remove second partition on /dev/sdi",
    "output": "parted /dev/sdi rm 2"
  },
  {
    "input": "Print partitions on /dev/mmcblk0",
    "output": "parted /dev/mmcblk0 print"
  },
  {
    "input": "Create an NTFS partition on /dev/sda",
    "output": "parted /dev/sda mkpart primary ntfs 100MiB 5GiB"
  },
  {
    "input": "Use parted in script mode to show /dev/sdb",
    "output": "parted -s /dev/sdb print"
  },
  {
    "input": "Launch parted for /dev/vda in non-interactive mode",
    "output": "parted -s /dev/vda print"
  },
  {
    "input": "Create partition on /dev/vdb from 1GB to 2GB",
    "output": "parted /dev/vdb mkpart primary ext4 1GB 2GB"
  },
  {
    "input": "Make a 512MB partition on /dev/sdc",
    "output": "parted /dev/sdc mkpart primary ext4 0% 512MB"
  },
  {
    "input": "Set legacy_boot flag for partition 2 of /dev/sdd",
    "output": "parted /dev/sdd set 2 legacy_boot on"
  },
  {
    "input": "Create gpt table and print layout on /dev/sde",
    "output": "parted /dev/sde mklabel gpt print"
  },
  {
    "input": "Make fat32 partition covering entire disk /dev/sdf",
    "output": "parted /dev/sdf mkpart primary fat32 0% 100%"
  },
  {
    "input": "Launch parted utility for SSD /dev/nvme0n1",
    "output": "parted /dev/nvme0n1"
  },
  {
    "input": "Remove all partitions on /dev/sdg and start fresh",
    "output": "parted /dev/sdg mklabel gpt"
  },
  {
    "input": "Create msdos table on /dev/sda",
    "output": "parted /dev/sda mklabel msdos"
  },
  {
    "input": "Create new primary partition on /dev/sdb with ext3 format",
    "output": "parted /dev/sdb mkpart primary ext3 2GiB 6GiB"
  },
  {
    "input": "Set hidden flag on /dev/sdc1",
    "output": "parted /dev/sdc set 1 hidden on"
  },
  {
    "input": "Create linux-swap partition on /dev/sdd from 8GB to 10GB",
    "output": "parted /dev/sdd mkpart primary linux-swap 8GB 10GB"
  },
  {
    "input": "Print full partition info of disk /dev/sde",
    "output": "parted /dev/sde print"
  },
  {
    "input": "Start parted session with /dev/sdf",
    "output": "parted /dev/sdf"
  },
  {
    "input": "Delete partition 3 on /dev/sdg",
    "output": "parted /dev/sdg rm 3"
  },
  {
    "input": "Display layout on NVMe disk",
    "output": "parted /dev/nvme0n1 print"
  },
  {
    "input": "Create 5GB ext4 partition from 1GB on /dev/sdh",
    "output": "parted /dev/sdh mkpart primary ext4 1GB 6GB"
  },
  {
    "input": "Create 1GB swap partition on embedded storage",
    "output": "parted /dev/mmcblk0 mkpart primary linux-swap 0% 1GB"
  },
  {
    "input": "Inspect and modify partitions on /dev/sdi",
    "output": "parted /dev/sdi"
  },
  {
    "input": "Create aligned ext4 partition on /dev/sdj",
    "output": "parted /dev/sdj mkpart primary ext4 1MiB 1025MiB"
  },
  {
    "input": "Open parted interface for /dev/sdk",
    "output": "parted /dev/sdk"
  },
  {
    "input": "Display detailed layout of /dev/sdl",
    "output": "parted /dev/sdl print"
  },
  {
    "input": "Format drive with new GPT and print layout",
    "output": "parted /dev/sdm mklabel gpt print"
  },
  {
    "input": "Show current partition flags on /dev/sdn",
    "output": "parted /dev/sdn print"
  },
  {
    "input": "Create entire disk partition as ext4 on /dev/sdo",
    "output": "parted /dev/sdo mkpart primary ext4 0% 100%"
  },
  {
    "input": "Start a new partition table with msdos on /dev/sdp",
    "output": "parted /dev/sdp mklabel msdos"
  },
  {
    "input": "Show partition summary for virtual disk /dev/vdb",
    "output": "parted /dev/vdb print"
  },
  {
    "input": "Use parted to create aligned fat32 partition",
    "output": "parted /dev/sdq mkpart primary fat32 1MiB 1GiB"
  },
  {
    "input": "Create new partition using 100% of disk /dev/sdr",
    "output": "parted /dev/sdr mkpart primary ext4 0% 100%"
  },
  {
    "input": "List all partitions of /dev/sds using parted",
    "output": "parted /dev/sds print"
  },
  {
    "input": "Initialize GPT on /dev/sdt and create 10GB ext4",
    "output": "parted /dev/sdt mklabel gpt mkpart primary ext4 1MiB 10GiB"
  },
  {
    "input": "Make fat32 partition for boot on /dev/sdu",
    "output": "parted /dev/sdu mkpart primary fat32 1MiB 512MiB"
  },
  {
    "input": "Create msdos label and add 5GB partition on /dev/sdv",
    "output": "parted /dev/sdv mklabel msdos mkpart primary ext4 1MiB 5GiB"
  },
  {
    "input": "Launch parted to review layout of storage disk",
    "output": "parted /dev/sda print"
  },
  {
    "input": "Launch parted for editing USB stick",
    "output": "parted /dev/sdb"
  },
  {
    "input": "Create gpt label and show summary on /dev/sdc",
    "output": "parted /dev/sdc mklabel gpt print"
  },
  {
    "input": "Create swap partition between 4GB and 8GB",
    "output": "parted /dev/sdd mkpart primary linux-swap 4GB 8GB"
  },
  {
    "input": "Reset partition table on SSD /dev/nvme1n1",
    "output": "parted /dev/nvme1n1 mklabel gpt"
  },
  {
    "input": "Create bootable ext4 partition on /dev/sde",
    "output": "parted /dev/sde mkpart primary ext4 1MiB 512MiB set 1 boot on"
  },
  {
    "input": "Use parted to set lvm flag on second partition",
    "output": "parted /dev/sdf set 2 lvm on"
  },
  {
    "input": "Delete all partitions and print table on /dev/sdg",
    "output": "parted /dev/sdg mklabel gpt print"
  },
  {
    "input": "Initialize msdos partition table",
    "output": "parted /dev/sda mklabel msdos"
  },
  {
    "input": "Launch parted for managing disk layout",
    "output": "parted /dev/sda"
  },
  {
    "input": "Print current partition scheme",
    "output": "parted /dev/sda print"
  },
  {
    "input": "Unmount the USB drive mounted at /media/usb",
    "output": "umount /media/usb"
  },
  {
    "input": "Detach the device from /mnt",
    "output": "umount /mnt"
  },
  {
    "input": "Unmount the CD-ROM drive",
    "output": "umount /dev/cdrom"
  },
  {
    "input": "Unmount the NFS share at /mnt/nfs",
    "output": "umount /mnt/nfs"
  },
  {
    "input": "Unmount the disk mounted at /media/data",
    "output": "umount /media/data"
  },
  {
    "input": "Force unmount the directory /mnt/iso",
    "output": "umount -f /mnt/iso"
  },
  {
    "input": "Unmount the loop-mounted ISO at /mnt/loop",
    "output": "umount /mnt/loop"
  },
  {
    "input": "Unmount the Windows share mounted at /mnt/smb",
    "output": "umount /mnt/smb"
  },
  {
    "input": "Unmount the external hard drive from /mnt/usbdrive",
    "output": "umount /mnt/usbdrive"
  },
  {
    "input": "Unmount all filesystems listed in fstab",
    "output": "umount -a"
  },
  {
    "input": "Forcefully unmount /mnt/data",
    "output": "umount -f /mnt/data"
  },
  {
    "input": "Lazy unmount /mnt/old",
    "output": "umount -l /mnt/old"
  },
  {
    "input": "Detach /dev/sdb1",
    "output": "umount /dev/sdb1"
  },
  {
    "input": "Unmount ISO image from /mnt/iso",
    "output": "umount /mnt/iso"
  },
  {
    "input": "Unmount the read-only mounted /mnt/ro",
    "output": "umount /mnt/ro"
  },
  {
    "input": "Unmount bind mount at /mnt/www",
    "output": "umount /mnt/www"
  },
  {
    "input": "Unmount the encrypted disk at /mnt/secure",
    "output": "umount /mnt/secure"
  },
  {
    "input": "Unmount tmpfs mounted on /mnt/tmp",
    "output": "umount /mnt/tmp"
  },
  {
    "input": "Unmount Btrfs volume from /mnt/btrfs",
    "output": "umount /mnt/btrfs"
  },
  {
    "input": "Unmount NFS share with force option",
    "output": "umount -f /mnt/nfs"
  },
  {
    "input": "Unmount the mounted drive at /mnt/storage",
    "output": "umount /mnt/storage"
  },
  {
    "input": "Remove mount at /mnt/shared",
    "output": "umount /mnt/shared"
  },
  {
    "input": "Unmount the FAT32 USB from /media/usb32",
    "output": "umount /media/usb32"
  },
  {
    "input": "Unmount ext4 partition from /mnt/ext",
    "output": "umount /mnt/ext"
  },
  {
    "input": "Unmount CIFS mount from /mnt/cifs",
    "output": "umount /mnt/cifs"
  },
  {
    "input": "Force detach /mnt/netdrive",
    "output": "umount -f /mnt/netdrive"
  },
  {
    "input": "Unmount overlay filesystem from /mnt/overlay",
    "output": "umount /mnt/overlay"
  },
  {
    "input": "Unmount RAM disk at /mnt/ram",
    "output": "umount /mnt/ram"
  },
  {
    "input": "Unmount debugfs at /sys/kernel/debug",
    "output": "umount /sys/kernel/debug"
  },
  {
    "input": "Unmount system files from /proc",
    "output": "umount /proc"
  },
  {
    "input": "Unmount SSHFS from /mnt/remote",
    "output": "umount /mnt/remote"
  },
  {
    "input": "Unmount vfat mounted at /mnt/vfat",
    "output": "umount /mnt/vfat"
  },
  {
    "input": "Detach ISO from /media/iso",
    "output": "umount /media/iso"
  },
  {
    "input": "Lazy unmount a directory",
    "output": "umount -l /mnt/tmp"
  },
  {
    "input": "Unmount devtmpfs from /dev",
    "output": "umount /dev"
  },
  {
    "input": "Unmount squashfs mounted image",
    "output": "umount /mnt/squash"
  },
  {
    "input": "Unmount data drive from /mnt/data",
    "output": "umount /mnt/data"
  },
  {
    "input": "Unmount USB partition mounted at /media/usbdisk",
    "output": "umount /media/usbdisk"
  },
  {
    "input": "Unmount using the device path",
    "output": "umount /dev/sdc1"
  },
  {
    "input": "Unmount everything under /mnt",
    "output": "umount /mnt/*"
  },
  {
    "input": "Unmount user-mounted folder at /home/user/mount",
    "output": "umount /home/user/mount"
  },
  {
    "input": "Unmount systemd mount point mnt-data.mount",
    "output": "umount /mnt/data"
  },
  {
    "input": "Unmount USB safely",
    "output": "umount /media/usb"
  },
  {
    "input": "Unmount ISO after installation",
    "output": "umount /mnt/iso"
  },
  {
    "input": "Forcefully remove mounted share",
    "output": "umount -f /mnt/share"
  },
  {
    "input": "Unmount drive mounted with loop option",
    "output": "umount /mnt/loop"
  },
  {
    "input": "Unmount folder with lazy mode",
    "output": "umount -l /mnt/folder"
  },
  {
    "input": "Unmount a noexec mounted directory",
    "output": "umount /mnt/noexec"
  },
  {
    "input": "Unmount drive with user ID set",
    "output": "umount /mnt/userdrive"
  },
  {
    "input": "Unmount a relatime mounted path",
    "output": "umount /mnt/relatime"
  },
  {
    "input": "Unmount all file systems listed in /etc/mtab",
    "output": "umount -a"
  },
  {
    "input": "Unmount /mnt/ramdisk",
    "output": "umount /mnt/ramdisk"
  },
  {
    "input": "Unmount USB key",
    "output": "umount /media/usbkey"
  },
  {
    "input": "Unmount a virtual machine image",
    "output": "umount /mnt/vm"
  },
  {
    "input": "Unmount manually mounted drive",
    "output": "umount /mnt/manual"
  },
  {
    "input": "Unmount previously mounted ISO image",
    "output": "umount /mnt/iso"
  },
  {
    "input": "Unmount guest shared folder",
    "output": "umount /mnt/guest"
  },
  {
    "input": "Unmount test partition",
    "output": "umount /mnt/test"
  },
  {
    "input": "Unmount folder used for recovery",
    "output": "umount /mnt/recovery"
  },
  {
    "input": "Unmount staging area",
    "output": "umount /mnt/stage"
  },
  {
    "input": "Unmount USB attached to /mnt/usb",
    "output": "umount /mnt/usb"
  },
  {
    "input": "Unmount encrypted volume mount",
    "output": "umount /mnt/enc"
  },
  {
    "input": "Unmount cloud storage drive",
    "output": "umount /mnt/cloud"
  },
  {
    "input": "Unmount remote backup folder",
    "output": "umount /mnt/backup"
  },
  {
    "input": "Unmount samba share",
    "output": "umount /mnt/samba"
  },
  {
    "input": "Unmount fuse filesystem",
    "output": "umount /mnt/fuse"
  },
  {
    "input": "Unmount windows partition",
    "output": "umount /mnt/windows"
  },
  {
    "input": "Unmount backup volume",
    "output": "umount /mnt/backup"
  },
  {
    "input": "Unmount large disk",
    "output": "umount /mnt/disk"
  },
  {
    "input": "Unmount network share mounted on /mnt/net",
    "output": "umount /mnt/net"
  },
  {
    "input": "Unmount a test ISO file",
    "output": "umount /mnt/testiso"
  },
  {
    "input": "Unmount multi-user shared drive",
    "output": "umount /mnt/shared"
  },
  {
    "input": "Unmount temp directory mounted with tmpfs",
    "output": "umount /mnt/tmpfs"
  },
  {
    "input": "Unmount development drive",
    "output": "umount /mnt/dev"
  },
  {
    "input": "Unmount analytics storage",
    "output": "umount /mnt/analytics"
  },
  {
    "input": "Unmount /mnt/mirror",
    "output": "umount /mnt/mirror"
  },
  {
    "input": "Unmount USB in read-only mode",
    "output": "umount /mnt/ro"
  },
  {
    "input": "Unmount mounted archive",
    "output": "umount /mnt/archive"
  },
  {
    "input": "Unmount system logs partition",
    "output": "umount /mnt/logs"
  },
  {
    "input": "Unmount home partition",
    "output": "umount /home"
  },
  {
    "input": "Go to the root directory",
    "output": "cd /"
  },
  {
    "input": "Move to the Documents folder inside the current directory",
    "output": "cd Documents"
  },
  {
    "input": "Switch to the /usr/local directory",
    "output": "cd /usr/local"
  },
  {
    "input": "Navigate to the previous directory you were in",
    "output": "cd -"
  },
  {
    "input": "Go up one directory level",
    "output": "cd .."
  },
  {
    "input": "Go up two directory levels",
    "output": "cd ../.."
  },
  {
    "input": "Change to the Downloads directory in your home folder",
    "output": "cd ~/Downloads"
  },
  {
    "input": "Switch to another user's home directory, for user 'alice'",
    "output": "cd ~alice"
  },
  {
    "input": "Change to a directory with spaces in its name called 'My Files'",
    "output": "cd 'My Files'"
  },
  {
    "input": "Change to the directory /var/log using an absolute path",
    "output": "cd /var/log"
  },
  {
    "input": "Move to a subdirectory called 'projects' inside the current directory",
    "output": "cd projects"
  },
  {
    "input": "Return to your home directory using the tilde symbol",
    "output": "cd ~"
  },
  {
    "input": "Change to the parent directory and list its contents",
    "output": "cd .. && ls"
  },
  {
    "input": "Change to the /tmp directory and print the current directory path",
    "output": "cd /tmp && pwd"
  },
  {
    "input": "Change to the directory /etc/X11 regardless of your current location",
    "output": "cd /etc/X11"
  },
  {
    "input": "Change to a directory using a relative path, going up one level and into 'bin'",
    "output": "cd ../bin"
  },
  {
    "input": "Change to the directory pointed to by the symbolic link 'mylink' without following the link",
    "output": "cd -P mylink"
  },
  {
    "input": "Change to the directory pointed to by the symbolic link 'mylink' and follow the link",
    "output": "cd -L mylink"
  },
  {
    "input": "Go to your home directory",
    "output": "cd"
  },
  {
    "input": "Switch to the root directory",
    "output": "cd /"
  },
  {
    "input": "Move to the Documents folder",
    "output": "cd Documents"
  },
  {
    "input": "Change to the Downloads directory in your home folder",
    "output": "cd ~/Downloads"
  },
  {
    "input": "Go up one directory level",
    "output": "cd .."
  },
  {
    "input": "Go up two directory levels",
    "output": "cd ../.."
  },
  {
    "input": "Change to the /etc directory",
    "output": "cd /etc"
  },
  {
    "input": "Switch to the /usr/local directory",
    "output": "cd /usr/local"
  },
  {
    "input": "Navigate to the previous directory",
    "output": "cd -"
  },
  {
    "input": "Change to the Pictures folder inside Documents",
    "output": "cd Documents/Pictures"
  },
  {
    "input": "Go to the /var/log directory",
    "output": "cd /var/log"
  },
  {
    "input": "Change to the /tmp directory",
    "output": "cd /tmp"
  },
  {
    "input": "Go to the Music directory in your home folder",
    "output": "cd ~/Music"
  },
  {
    "input": "Change to the parent directory and list its contents",
    "output": "cd .. && ls"
  },
  {
    "input": "Move to the Desktop directory",
    "output": "cd Desktop"
  },
  {
    "input": "Change to the /opt directory",
    "output": "cd /opt"
  },
  {
    "input": "Switch to another user's home directory (alice)",
    "output": "cd ~alice"
  },
  {
    "input": "Change to the /srv/www directory",
    "output": "cd /srv/www"
  },
  {
    "input": "Change to the /mnt directory",
    "output": "cd /mnt"
  },
  {
    "input": "Go to the /media directory",
    "output": "cd /media"
  },
  {
    "input": "Change to the /dev directory",
    "output": "cd /dev"
  },
  {
    "input": "Change to the /proc directory",
    "output": "cd /proc"
  },
  {
    "input": "Move to the /sys directory",
    "output": "cd /sys"
  },
  {
    "input": "Change to the /run directory",
    "output": "cd /run"
  },
  {
    "input": "Change to the /boot directory",
    "output": "cd /boot"
  },
  {
    "input": "Switch to the /home directory",
    "output": "cd /home"
  },
  {
    "input": "Go to the /usr/bin directory",
    "output": "cd /usr/bin"
  },
  {
    "input": "Change to the /usr/sbin directory",
    "output": "cd /usr/sbin"
  },
  {
    "input": "Go to the /usr/share directory",
    "output": "cd /usr/share"
  },
  {
    "input": "Change to the /lib directory",
    "output": "cd /lib"
  },
  {
    "input": "Change to the /lib64 directory",
    "output": "cd /lib64"
  },
  {
    "input": "Switch to the /sbin directory",
    "output": "cd /sbin"
  },
  {
    "input": "Change to the /bin directory",
    "output": "cd /bin"
  },
  {
    "input": "Change to a directory called 'projects' in your home",
    "output": "cd ~/projects"
  },
  {
    "input": "Change to a directory called 'work' in your home",
    "output": "cd ~/work"
  },
  {
    "input": "Go to a directory named 'backup' in /var",
    "output": "cd /var/backup"
  },
  {
    "input": "Change to the /usr/local/bin directory",
    "output": "cd /usr/local/bin"
  },
  {
    "input": "Change to the /usr/local/sbin directory",
    "output": "cd /usr/local/sbin"
  },
  {
    "input": "Change to the /usr/local/share directory",
    "output": "cd /usr/local/share"
  },
  {
    "input": "Change to the /usr/include directory",
    "output": "cd /usr/include"
  },
  {
    "input": "Change to the /usr/games directory",
    "output": "cd /usr/games"
  },
  {
    "input": "Change to the /usr/src directory",
    "output": "cd /usr/src"
  },
  {
    "input": "Change to the /usr/lib directory",
    "output": "cd /usr/lib"
  },
  {
    "input": "Change to the /usr/lib64 directory",
    "output": "cd /usr/lib64"
  },
  {
    "input": "Change to the /lost+found directory",
    "output": "cd /lost+found"
  },
  {
    "input": "Change to the /snap directory",
    "output": "cd /snap"
  },
  {
    "input": "Change to a directory with spaces in its name called 'My Files'",
    "output": "cd 'My Files'"
  },
  {
    "input": "Change to a hidden directory called '.config' in your home",
    "output": "cd ~/.config"
  },
  {
    "input": "Change to a hidden directory called '.ssh' in your home",
    "output": "cd ~/.ssh"
  },
  {
    "input": "Change to a directory called 'test' in the current directory",
    "output": "cd test"
  },
  {
    "input": "Change to a directory called 'scripts' in the current directory",
    "output": "cd scripts"
  },
  {
    "input": "Change to the directory /etc/X11",
    "output": "cd /etc/X11"
  },
  {
    "input": "Change to the directory /etc/network",
    "output": "cd /etc/network"
  },
  {
    "input": "Change to the directory /etc/apt",
    "output": "cd /etc/apt"
  },
  {
    "input": "Change to the directory /etc/systemd",
    "output": "cd /etc/systemd"
  },
  {
    "input": "Change to the directory /etc/cron.d",
    "output": "cd /etc/cron.d"
  },
  {
    "input": "Change to the directory /etc/init.d",
    "output": "cd /etc/init.d"
  },
  {
    "input": "Change to the directory /etc/skel",
    "output": "cd /etc/skel"
  },
  {
    "input": "Change to the directory /etc/ssl",
    "output": "cd /etc/ssl"
  },
  {
    "input": "Change to the directory /etc/security",
    "output": "cd /etc/security"
  },
  {
    "input": "Change to the directory /etc/pam.d",
    "output": "cd /etc/pam.d"
  },
  {
    "input": "Change to the directory /etc/profile.d",
    "output": "cd /etc/profile.d"
  },
  {
    "input": "Change to the /tmp/test directory",
    "output": "cd /tmp/test"
  },
  {
    "input": "Change to the /tmp/logs directory",
    "output": "cd /tmp/logs"
  },
  {
    "input": "Change to the /tmp/build directory",
    "output": "cd /tmp/build"
  },
  {
    "input": "Change to the /var/cache directory",
    "output": "cd /var/cache"
  },
  {
    "input": "Change to the /var/spool directory",
    "output": "cd /var/spool"
  },
  {
    "input": "Change to the /var/mail directory",
    "output": "cd /var/mail"
  },
  {
    "input": "Change to the /var/tmp directory",
    "output": "cd /var/tmp"
  },
  {
    "input": "Change to the /var/lib directory",
    "output": "cd /var/lib"
  },
  {
    "input": "Change to the /var/run directory",
    "output": "cd /var/run"
  },
  {
    "input": "Change to the /var/lock directory",
    "output": "cd /var/lock"
  },
  {
    "input": "Change to the /var/backups directory",
    "output": "cd /var/backups"
  },
  {
    "input": "Change to the /var/opt directory",
    "output": "cd /var/opt"
  },
  {
    "input": "Change to the /var/crash directory",
    "output": "cd /var/crash"
  },
  {
    "input": "Change to the /var/log/apache2 directory",
    "output": "cd /var/log/apache2"
  },
  {
    "input": "Change to the /var/log/nginx directory",
    "output": "cd /var/log/nginx"
  },
  {
    "input": "Change to the /var/log/mysql directory",
    "output": "cd /var/log/mysql"
  },
  {
    "input": "Change to the /var/log/postgresql directory",
    "output": "cd /var/log/postgresql"
  },
  {
    "input": "Change to the /var/log/syslog directory",
    "output": "cd /var/log/syslog"
  },
  {
    "input": "Change to the /var/log/journal directory",
    "output": "cd /var/log/journal"
  },
  {
    "input": "Change to the /var/log/kern directory",
    "output": "cd /var/log/kern"
  },
  {
    "input": "Change to the /var/log/auth directory",
    "output": "cd /var/log/auth"
  },
  {
    "input": "Change to the /var/log/apt directory",
    "output": "cd /var/log/apt"
  },
  {
    "input": "Change to the /var/log/dpkg directory",
    "output": "cd /var/log/dpkg"
  },
  {
    "input": "Change to the /var/log/user directory",
    "output": "cd /var/log/user"
  },
  {
    "input": "Change to the /var/log/installer directory",
    "output": "cd /var/log/installer"
  },
  {
    "input": "Change to the /var/log/boot directory",
    "output": "cd /var/log/boot"
  },
  {
    "input": "Change to the /var/log/fsck directory",
    "output": "cd /var/log/fsck"
  },
  {
    "input": "Change to the /var/log/sa directory",
    "output": "cd /var/log/sa"
  },
  {
    "input": "Change to the /var/log/pm-powersave directory",
    "output": "cd /var/log/pm-powersave"
  },
  {
    "input": "Change to the /var/log/aptitude directory",
    "output": "cd /var/log/aptitude"
  },
  {
    "input": "Change to the /var/log/unattended-upgrades directory",
    "output": "cd /var/log/unattended-upgrades"
  },
  {
    "input": "Change to the /var/log/clamav directory",
    "output": "cd /var/log/clamav"
  },
  {
    "input": "Change to the /var/log/exim4 directory",
    "output": "cd /var/log/exim4"
  },
  {
    "input": "Change to the /var/log/news directory",
    "output": "cd /var/log/news"
  },
  {
    "input": "Change to the /var/log/ppp directory",
    "output": "cd /var/log/ppp"
  },
  {
    "input": "Change to the /var/log/samba directory",
    "output": "cd /var/log/samba"
  },
  {
    "input": "Change to the /var/log/ufw directory",
    "output": "cd /var/log/ufw"
  },
  {
    "input": "Change to the /var/log/wtmp directory",
    "output": "cd /var/log/wtmp"
  },
  {
    "input": "Change to the /var/log/xrdp directory",
    "output": "cd /var/log/xrdp"
  },
  {
    "input": "Change to the /var/log/yum.log directory",
    "output": "cd /var/log/yum.log"
  },
  {
    "input": "Change to the /var/log/zypper.log directory",
    "output": "cd /var/log/zypper.log"
  },
  {
    "input": "Change to the /var/log/lastlog directory",
    "output": "cd /var/log/lastlog"
  },
  {
    "input": "Change to the /var/log/messages directory",
    "output": "cd /var/log/messages"
  },
  {
    "input": "Change to the /var/log/secure directory",
    "output": "cd /var/log/secure"
  },
  {
    "input": "Change to the /var/log/maillog directory",
    "output": "cd /var/log/maillog"
  },
  {
    "input": "Change to the /var/log/cron directory",
    "output": "cd /var/log/cron"
  },
  {
    "input": "Change to the /var/log/audit directory",
    "output": "cd /var/log/audit"
  },
  {
    "input": "Change to the /var/log/btmp directory",
    "output": "cd /var/log/btmp"
  },
  {
    "input": "Change to the /var/log/alternatives.log directory",
    "output": "cd /var/log/alternatives.log"
  },
  {
    "input": "Change to the /var/log/apt/history.log directory",
    "output": "cd /var/log/apt/history.log"
  },
  {
    "input": "Change to the /var/log/apt/term.log directory",
    "output": "cd /var/log/apt/term.log"
  },
  {
    "input": "Change to the /var/log/aptitude directory",
    "output": "cd /var/log/aptitude"
  },
  {
    "input": "Change to the /var/log/boot.log directory",
    "output": "cd /var/log/boot.log"
  },
  {
    "input": "Change to the /var/log/dmesg directory",
    "output": "cd /var/log/dmesg"
  },
  {
    "input": "Change to the /var/log/fail2ban.log directory",
    "output": "cd /var/log/fail2ban.log"
  },
  {
    "input": "Change to the /var/log/fontconfig.log directory",
    "output": "cd /var/log/fontconfig.log"
  },
  {
    "input": "Change to the /var/log/gpu-manager.log directory",
    "output": "cd /var/log/gpu-manager.log"
  },
  {
    "input": "Change to the /var/log/hp directory",
    "output": "cd /var/log/hp"
  },
  {
    "input": "Change to the /var/log/kern.log directory",
    "output": "cd /var/log/kern.log"
  },
  {
    "input": "Change to the /var/log/lastlog directory",
    "output": "cd /var/log/lastlog"
  },
  {
    "input": "Change to the /var/log/lightdm directory",
    "output": "cd /var/log/lightdm"
  },
  {
    "input": "Change to the /var/log/mail.err directory",
    "output": "cd /var/log/mail.err"
  },
  {
    "input": "Change to the /var/log/mail.info directory",
    "output": "cd /var/log/mail.info"
  },
  {
    "input": "Change to the /var/log/mail.log directory",
    "output": "cd /var/log/mail.log"
  },
  {
    "input": "Change to the /var/log/mail.warn directory",
    "output": "cd /var/log/mail.warn"
  },
  {
    "input": "Change to the /var/log/messages directory",
    "output": "cd /var/log/messages"
  },
  {
    "input": "Change to the /var/log/pm-powersave.log directory",
    "output": "cd /var/log/pm-powersave.log"
  },
  {
    "input": "Change to the /var/log/syslog directory",
    "output": "cd /var/log/syslog"
  },
  {
    "input": "Change to the /var/log/user.log directory",
    "output": "cd /var/log/user.log"
  },
  {
    "input": "Change to the /var/log/wtmp directory",
    "output": "cd /var/log/wtmp"
  },
  {
    "input": "Change to the /var/log/Xorg.0.log directory",
    "output": "cd /var/log/Xorg.0.log"
  },
  {
    "input": "Change to the /var/log/Xorg.1.log directory",
    "output": "cd /var/log/Xorg.1.log"
  },
  {
    "input": "Change to the /var/log/Xorg.failsafe.log directory",
    "output": "cd /var/log/Xorg.failsafe.log"
  },
  {
    "input": "Change to the /var/log/yum.log directory",
    "output": "cd /var/log/yum.log"
  },
  {
    "input": "Change to the /var/log/zypper.log directory",
    "output": "cd /var/log/zypper.log"
  },
  {
    "input": "Change to the /var/tmp directory",
    "output": "cd /var/tmp"
  },
  {
    "input": "Change to the /tmp directory and print the current directory",
    "output": "cd /tmp && pwd"
  },
  {
    "input": "Change to the directory pointed to by the symbolic link 'mylink' without following the link",
    "output": "cd -P mylink"
  },
  {
    "input": "Change to the directory pointed to by the symbolic link 'mylink' and follow the link",
    "output": "cd -L mylink"
  },
  {
    "input": "Change to the parent directory, then to 'bin'",
    "output": "cd ../bin"
  },
  {
    "input": "Change to the directory /home/user/Documents using an absolute path",
    "output": "cd /home/user/Documents"
  },
  {
    "input": "Change to the directory /etc/ssl/certs",
    "output": "cd /etc/ssl/certs"
  },
  {
    "input": "Change to the directory /usr/local/include",
    "output": "cd /usr/local/include"
  },
  {
    "input": "Change to the directory /usr/local/games",
    "output": "cd /usr/local/games"
  },
  {
    "input": "Change to the directory /usr/local/src",
    "output": "cd /usr/local/src"
  },
  {
    "input": "Change to the directory /usr/local/lib",
    "output": "cd /usr/local/lib"
  },
  {
    "input": "Change to the directory /usr/local/lib64",
    "output": "cd /usr/local/lib64"
  },
  {
    "input": "Change to the directory /usr/local/etc",
    "output": "cd /usr/local/etc"
  },
  {
    "input": "Change to the directory /usr/local/var",
    "output": "cd /usr/local/var"
  },
  {
    "input": "Change to the directory /usr/local/tmp",
    "output": "cd /usr/local/tmp"
  },
  {
    "input": "Change to the directory /usr/local/opt",
    "output": "cd /usr/local/opt"
  },
  {
    "input": "Change to the directory /usr/local/share/man",
    "output": "cd /usr/local/share/man"
  },
  {
    "input": "Change to the directory /usr/local/share/doc",
    "output": "cd /usr/local/share/doc"
  },
  {
    "input": "Change to the directory /usr/share/doc",
    "output": "cd /usr/share/doc"
  },
  {
    "input": "Change to the directory /usr/share/man",
    "output": "cd /usr/share/man"
  },
  {
    "input": "Change to the directory /usr/share/icons",
    "output": "cd /usr/share/icons"
  },
  {
    "input": "Change to the directory /usr/share/fonts",
    "output": "cd /usr/share/fonts"
  },
  {
    "input": "Change to the directory /usr/share/themes",
    "output": "cd /usr/share/themes"
  },
  {
    "input": "Change to the directory /usr/share/backgrounds",
    "output": "cd /usr/share/backgrounds"
  },
  {
    "input": "Change to the directory /usr/share/applications",
    "output": "cd /usr/share/applications"
  },
  {
    "input": "Change to the directory /usr/share/locale",
    "output": "cd /usr/share/locale"
  },
  {
    "input": "Change to the directory /usr/share/mime",
    "output": "cd /usr/share/mime"
  },
  {
    "input": "Change to the directory /usr/share/pixmaps",
    "output": "cd /usr/share/pixmaps"
  },
  {
    "input": "Change to the directory /usr/share/sounds",
    "output": "cd /usr/share/sounds"
  },
  {
    "input": "Change to the directory /usr/share/zoneinfo",
    "output": "cd /usr/share/zoneinfo"
  },
  {
    "input": "Change to the directory /usr/share/terminfo",
    "output": "cd /usr/share/terminfo"
  },
  {
    "input": "Change to the directory /usr/share/vim",
    "output": "cd /usr/share/vim"
  },
  {
    "input": "Change to the directory /usr/share/xfce4",
    "output": "cd /usr/share/xfce4"
  },
  {
    "input": "Change to the directory /usr/share/gnome",
    "output": "cd /usr/share/gnome"
  },
  {
    "input": "Change to the directory /usr/share/kde4",
    "output": "cd /usr/share/kde4"
  },
  {
    "input": "Change to the directory /usr/share/kde5",
    "output": "cd /usr/share/kde5"
  },
  {
    "input": "Change to the directory /usr/share/games",
    "output": "cd /usr/share/games"
  },
  {
    "input": "Change to the directory /usr/share/perl5",
    "output": "cd /usr/share/perl5"
  },
  {
    "input": "Change to the directory /usr/share/python",
    "output": "cd /usr/share/python"
  },
  {
    "input": "Change to the directory /usr/share/texmf",
    "output": "cd /usr/share/texmf"
  },
  {
    "input": "Change to the directory /usr/share/emacs",
    "output": "cd /usr/share/emacs"
  },
  {
    "input": "Change to the directory /usr/share/doc-base",
    "output": "cd /usr/share/doc-base"
  },
  {
    "input": "Change to the directory /usr/share/info",
    "output": "cd /usr/share/info"
  },
  {
    "input": "Change to the directory /usr/share/lintian",
    "output": "cd /usr/share/lintian"
  },
  {
    "input": "Change to the directory /usr/share/linda",
    "output": "cd /usr/share/linda"
  },
  {
    "input": "Change to the directory /usr/share/locale-langpack",
    "output": "cd /usr/share/locale-langpack"
  },
  {
    "input": "Change to the directory /usr/share/zoneinfo/Asia",
    "output": "cd /usr/share/zoneinfo/Asia"
  },
  {
    "input": "Change to the directory /usr/share/zoneinfo/Europe",
    "output": "cd /usr/share/zoneinfo/Europe"
  },
  {
    "input": "Change to the directory /usr/share/zoneinfo/America",
    "output": "cd /usr/share/zoneinfo/America"
  },
  {
    "input": "Change to the directory /usr/share/zoneinfo/Africa",
    "output": "cd /usr/share/zoneinfo/Africa"
  },
  {
    "input": "Copy a file called 'file.txt' to the current directory",
    "output": "cp file.txt ."
  },
  {
    "input": "Copy 'report.pdf' to the Documents folder",
    "output": "cp report.pdf ~/Documents/"
  },
  {
    "input": "Copy 'image.jpg' from the current directory to /tmp",
    "output": "cp image.jpg /tmp/"
  },
  {
    "input": "Copy 'data.csv' to /var/log and rename it to 'backup.csv'",
    "output": "cp data.csv /var/log/backup.csv"
  },
  {
    "input": "Copy all .txt files to the backup directory",
    "output": "cp *.txt backup/"
  },
  {
    "input": "Copy a file named 'My File.txt' with spaces to /home/user",
    "output": "cp 'My File.txt' /home/user/"
  },
  {
    "input": "Copy a hidden file '.env' to the parent directory",
    "output": "cp .env ../"
  },
  {
    "input": "Copy 'script.sh' to /usr/local/bin and keep the same name",
    "output": "cp script.sh /usr/local/bin/"
  },
  {
    "input": "Copy 'notes.txt' from your home to the Desktop",
    "output": "cp ~/notes.txt ~/Desktop/"
  },
  {
    "input": "Copy 'config.yaml' to /etc and rename it to 'config_backup.yaml'",
    "output": "cp config.yaml /etc/config_backup.yaml"
  },
  {
    "input": "Copy all files in the current directory to /tmp",
    "output": "cp * /tmp/"
  },
  {
    "input": "Copy all .log files from /var/log to /backup/logs",
    "output": "cp /var/log/*.log /backup/logs/"
  },
  {
    "input": "Copy a directory called 'projects' to /backup recursively",
    "output": "cp -r projects /backup/"
  },
  {
    "input": "Copy the entire 'Documents' folder to /mnt/usb",
    "output": "cp -r ~/Documents /mnt/usb/"
  },
  {
    "input": "Copy a directory 'src' and all its contents to /opt",
    "output": "cp -r src /opt/"
  },
  {
    "input": "Copy 'file1.txt' and 'file2.txt' to /tmp",
    "output": "cp file1.txt file2.txt /tmp/"
  },
  {
    "input": "Copy all files starting with 'test' to /var/tmp",
    "output": "cp test* /var/tmp/"
  },
  {
    "input": "Copy all files and subdirectories from 'build' to 'release'",
    "output": "cp -r build/* release/"
  },
  {
    "input": "Copy a file 'draft.docx' to the parent directory",
    "output": "cp draft.docx ../"
  },
  {
    "input": "Copy all files in /etc to /backup/etc",
    "output": "cp /etc/* /backup/etc/"
  },
  {
    "input": "Copy a file 'output.txt' and overwrite without prompt",
    "output": "cp -f output.txt /tmp/"
  },
  {
    "input": "Copy a directory 'images' to /var/www/html",
    "output": "cp -r images /var/www/html/"
  },
  {
    "input": "Copy all .jpg files from Pictures to Desktop",
    "output": "cp ~/Pictures/*.jpg ~/Desktop/"
  },
  {
    "input": "Copy a file 'data.json' to /srv/www and keep permissions",
    "output": "cp -p data.json /srv/www/"
  },
  {
    "input": "Copy all files in /home/user/Downloads to /mnt/usb",
    "output": "cp /home/user/Downloads/* /mnt/usb/"
  },
  {
    "input": "Copy a file 'archive.tar.gz' to /opt and preserve attributes",
    "output": "cp -a archive.tar.gz /opt/"
  },
  {
    "input": "Copy a directory 'backup' to /tmp and preserve all attributes",
    "output": "cp -a backup /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and do not overwrite existing files",
    "output": "cp -n * /tmp/"
  },
  {
    "input": "Copy a file 'test.log' to /var/log and prompt before overwrite",
    "output": "cp -i test.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log recursively to /backup/logs",
    "output": "cp -r /var/log /backup/logs/"
  },
  {
    "input": "Copy a file 'config' to /etc and show progress",
    "output": "cp -v config /etc/"
  },
  {
    "input": "Copy all .conf files from /etc to /backup/etc",
    "output": "cp /etc/*.conf /backup/etc/"
  },
  {
    "input": "Copy a file 'index.html' to /var/www/html and keep timestamps",
    "output": "cp -p index.html /var/www/html/"
  },
  {
    "input": "Copy a directory 'music' to /mnt/usb and preserve everything",
    "output": "cp -a music /mnt/usb/"
  },
  {
    "input": "Copy all files in /tmp to the current directory",
    "output": "cp /tmp/* ."
  },
  {
    "input": "Copy a file 'resume.pdf' to your home directory",
    "output": "cp resume.pdf ~/"
  },
  {
    "input": "Copy all files in /var/tmp to /backup/tmp and force overwrite",
    "output": "cp -f /var/tmp/* /backup/tmp/"
  },
  {
    "input": "Copy a file 'draft.txt' to /home/alice/Documents",
    "output": "cp draft.txt /home/alice/Documents/"
  },
  {
    "input": "Copy all files in /usr/local/bin to /opt/bin",
    "output": "cp /usr/local/bin/* /opt/bin/"
  },
  {
    "input": "Copy a file 'testfile' to /srv/www and prompt before overwrite",
    "output": "cp -i testfile /srv/www/"
  },
  {
    "input": "Copy all files in /mnt/usb to /media/backup",
    "output": "cp /mnt/usb/* /media/backup/"
  },
  {
    "input": "Copy a file 'logfile' to /var/log and keep permissions",
    "output": "cp -p logfile /var/log/"
  },
  {
    "input": "Copy all files in /var/spool/cron to /backup/cron",
    "output": "cp /var/spool/cron/* /backup/cron/"
  },
  {
    "input": "Copy a file 'mail.txt' to /var/mail",
    "output": "cp mail.txt /var/mail/"
  },
  {
    "input": "Copy all files in /var/log/apache2 to /backup/apache2",
    "output": "cp /var/log/apache2/* /backup/apache2/"
  },
  {
    "input": "Copy a file 'index.html' to /var/www/html and show progress",
    "output": "cp -v index.html /var/www/html/"
  },
  {
    "input": "Copy all files in /var/log/nginx to /backup/nginx",
    "output": "cp /var/log/nginx/* /backup/nginx/"
  },
  {
    "input": "Copy a file 'db.sqlite3' to /srv/db",
    "output": "cp db.sqlite3 /srv/db/"
  },
  {
    "input": "Copy all files in /var/log/mysql to /backup/mysql",
    "output": "cp /var/log/mysql/* /backup/mysql/"
  },
  {
    "input": "Copy a file 'access.log' to /var/log",
    "output": "cp access.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/postgresql to /backup/postgresql",
    "output": "cp /var/log/postgresql/* /backup/postgresql/"
  },
  {
    "input": "Copy a file 'syslog' to /var/log",
    "output": "cp syslog /var/log/"
  },
  {
    "input": "Copy all files in /var/log/journal to /backup/journal",
    "output": "cp /var/log/journal/* /backup/journal/"
  },
  {
    "input": "Copy a file 'kern.log' to /var/log",
    "output": "cp kern.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/auth to /backup/auth",
    "output": "cp /var/log/auth/* /backup/auth/"
  },
  {
    "input": "Copy a file 'apt.log' to /var/log/apt",
    "output": "cp apt.log /var/log/apt/"
  },
  {
    "input": "Copy all files in /var/log/dpkg to /backup/dpkg",
    "output": "cp /var/log/dpkg/* /backup/dpkg/"
  },
  {
    "input": "Copy a file 'user.log' to /var/log",
    "output": "cp user.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/installer to /backup/installer",
    "output": "cp /var/log/installer/* /backup/installer/"
  },
  {
    "input": "Copy a file 'boot.log' to /var/log",
    "output": "cp boot.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/fsck to /backup/fsck",
    "output": "cp /var/log/fsck/* /backup/fsck/"
  },
  {
    "input": "Copy a file 'sa.log' to /var/log/sa",
    "output": "cp sa.log /var/log/sa/"
  },
  {
    "input": "Copy all files in /var/log/pm-powersave to /backup/pm-powersave",
    "output": "cp /var/log/pm-powersave/* /backup/pm-powersave/"
  },
  {
    "input": "Copy a file 'aptitude.log' to /var/log/aptitude",
    "output": "cp aptitude.log /var/log/aptitude/"
  },
  {
    "input": "Copy all files in /var/log/unattended-upgrades to /backup/unattended-upgrades",
    "output": "cp /var/log/unattended-upgrades/* /backup/unattended-upgrades/"
  },
  {
    "input": "Copy a file 'clamav.log' to /var/log/clamav",
    "output": "cp clamav.log /var/log/clamav/"
  },
  {
    "input": "Copy all files in /var/log/exim4 to /backup/exim4",
    "output": "cp /var/log/exim4/* /backup/exim4/"
  },
  {
    "input": "Copy a file 'news.log' to /var/log/news",
    "output": "cp news.log /var/log/news/"
  },
  {
    "input": "Copy all files in /var/log/ppp to /backup/ppp",
    "output": "cp /var/log/ppp/* /backup/ppp/"
  },
  {
    "input": "Copy a file 'samba.log' to /var/log/samba",
    "output": "cp samba.log /var/log/samba/"
  },
  {
    "input": "Copy all files in /var/log/ufw to /backup/ufw",
    "output": "cp /var/log/ufw/* /backup/ufw/"
  },
  {
    "input": "Copy a file 'wtmp' to /var/log",
    "output": "cp wtmp /var/log/"
  },
  {
    "input": "Copy all files in /var/log/xrdp to /backup/xrdp",
    "output": "cp /var/log/xrdp/* /backup/xrdp/"
  },
  {
    "input": "Copy a file 'yum.log' to /var/log",
    "output": "cp yum.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/zypper.log to /backup/zypper",
    "output": "cp /var/log/zypper.log/* /backup/zypper/"
  },
  {
    "input": "Copy a file 'lastlog' to /var/log",
    "output": "cp lastlog /var/log/"
  },
  {
    "input": "Copy all files in /var/log/messages to /backup/messages",
    "output": "cp /var/log/messages/* /backup/messages/"
  },
  {
    "input": "Copy a file 'secure' to /var/log",
    "output": "cp secure /var/log/"
  },
  {
    "input": "Copy all files in /var/log/maillog to /backup/maillog",
    "output": "cp /var/log/maillog/* /backup/maillog/"
  },
  {
    "input": "Copy a file 'cron' to /var/log",
    "output": "cp cron /var/log/"
  },
  {
    "input": "Copy all files in /var/log/audit to /backup/audit",
    "output": "cp /var/log/audit/* /backup/audit/"
  },
  {
    "input": "Copy a file 'btmp' to /var/log",
    "output": "cp btmp /var/log/"
  },
  {
    "input": "Copy all files in /var/log/alternatives.log to /backup/alternatives",
    "output": "cp /var/log/alternatives.log/* /backup/alternatives/"
  },
  {
    "input": "Copy a file 'history.log' to /var/log/apt",
    "output": "cp history.log /var/log/apt/"
  },
  {
    "input": "Copy all files in /var/log/apt/term.log to /backup/apt-term",
    "output": "cp /var/log/apt/term.log/* /backup/apt-term/"
  },
  {
    "input": "Copy a file 'boot.log' to /var/log",
    "output": "cp boot.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/dmesg to /backup/dmesg",
    "output": "cp /var/log/dmesg/* /backup/dmesg/"
  },
  {
    "input": "Copy a file 'fail2ban.log' to /var/log",
    "output": "cp fail2ban.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/fontconfig.log to /backup/fontconfig",
    "output": "cp /var/log/fontconfig.log/* /backup/fontconfig/"
  },
  {
    "input": "Copy a file 'gpu-manager.log' to /var/log",
    "output": "cp gpu-manager.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/hp to /backup/hp",
    "output": "cp /var/log/hp/* /backup/hp/"
  },
  {
    "input": "Copy a file 'kern.log' to /var/log",
    "output": "cp kern.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/lightdm to /backup/lightdm",
    "output": "cp /var/log/lightdm/* /backup/lightdm/"
  },
  {
    "input": "Copy a file 'mail.err' to /var/log",
    "output": "cp mail.err /var/log/"
  },
  {
    "input": "Copy all files in /var/log/mail.info to /backup/mailinfo",
    "output": "cp /var/log/mail.info/* /backup/mailinfo/"
  },
  {
    "input": "Copy a file 'mail.log' to /var/log",
    "output": "cp mail.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/mail.warn to /backup/mailwarn",
    "output": "cp /var/log/mail.warn/* /backup/mailwarn/"
  },
  {
    "input": "Copy a file 'messages' to /var/log",
    "output": "cp messages /var/log/"
  },
  {
    "input": "Copy all files in /var/log/pm-powersave.log to /backup/pmpowersave",
    "output": "cp /var/log/pm-powersave.log/* /backup/pmpowersave/"
  },
  {
    "input": "Copy a file 'user.log' to /var/log",
    "output": "cp user.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/wtmp to /backup/wtmp",
    "output": "cp /var/log/wtmp/* /backup/wtmp/"
  },
  {
    "input": "Copy a file 'Xorg.0.log' to /var/log",
    "output": "cp Xorg.0.log /var/log/"
  },
  {
    "input": "Copy all files in /var/log/Xorg.1.log to /backup/xorg1",
    "output": "cp /var/log/Xorg.1.log/* /backup/xorg1/"
  },
  {
    "input": "Copy a file 'Xorg.failsafe.log' to /var/log",
    "output": "cp Xorg.failsafe.log /var/log/"
  },
  {
    "input": "Copy all files in /var/tmp to /backup/tmp",
    "output": "cp /var/tmp/* /backup/tmp/"
  },
  {
    "input": "Copy a file called 'test' in the current directory to /tmp",
    "output": "cp test /tmp/"
  },
  {
    "input": "Copy all files in the parent directory to the current directory",
    "output": "cp ../* ."
  },
  {
    "input": "Copy all files in the /etc directory to /backup/etc",
    "output": "cp /etc/* /backup/etc/"
  },
  {
    "input": "Force copy all files in the /opt directory to /backup/opt",
    "output": "cp -f /opt/* /backup/opt/"
  },
  {
    "input": "Copy all files in the /srv directory to /backup/srv",
    "output": "cp /srv/* /backup/srv/"
  },
  {
    "input": "Copy all files in the /mnt directory to /backup/mnt",
    "output": "cp /mnt/* /backup/mnt/"
  },
  {
    "input": "Copy all files in the /media directory to /backup/media",
    "output": "cp /media/* /backup/media/"
  },
  {
    "input": "Recursively copy the entire /etc directory to /backup/etc",
    "output": "cp -r /etc /backup/etc/"
  },
  {
    "input": "Recursively copy the /usr/local directory to /backup/usr-local",
    "output": "cp -r /usr/local /backup/usr-local/"
  },
  {
    "input": "Recursively copy the /home/user directory to /backup/home-user",
    "output": "cp -r /home/user /backup/home-user/"
  },
  {
    "input": "Recursively copy the /var directory to /backup/var",
    "output": "cp -r /var /backup/var/"
  },
  {
    "input": "Recursively copy the /opt directory to /backup/opt",
    "output": "cp -r /opt /backup/opt/"
  },
  {
    "input": "Recursively copy the /srv directory to /backup/srv",
    "output": "cp -r /srv /backup/srv/"
  },
  {
    "input": "Recursively copy the /mnt directory to /backup/mnt",
    "output": "cp -r /mnt /backup/mnt/"
  },
  {
    "input": "Recursively copy the /media directory to /backup/media",
    "output": "cp -r /media /backup/media/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and preserve timestamps",
    "output": "cp -p * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and show progress",
    "output": "cp -v * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and do not overwrite existing files",
    "output": "cp -n * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and prompt before overwrite",
    "output": "cp -i * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and force overwrite",
    "output": "cp -f * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and preserve all attributes",
    "output": "cp -a * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep permissions",
    "output": "cp -p * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep ownership",
    "output": "cp --preserve=ownership * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep mode",
    "output": "cp --preserve=mode * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep timestamps",
    "output": "cp --preserve=timestamps * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep links",
    "output": "cp --preserve=links * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep context",
    "output": "cp --preserve=context * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep xattr",
    "output": "cp --preserve=xattr * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep all attributes",
    "output": "cp --preserve=all * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything",
    "output": "cp -a * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and show progress",
    "output": "cp -av * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and do not overwrite existing files",
    "output": "cp -an * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and prompt before overwrite",
    "output": "cp -ai * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and force overwrite",
    "output": "cp -af * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep permissions",
    "output": "cp -ap * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep ownership",
    "output": "cp -a --preserve=ownership * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep mode",
    "output": "cp -a --preserve=mode * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep timestamps",
    "output": "cp -a --preserve=timestamps * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep links",
    "output": "cp -a --preserve=links * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep context",
    "output": "cp -a --preserve=context * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep xattr",
    "output": "cp -a --preserve=xattr * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep all attributes",
    "output": "cp -a --preserve=all * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep everything",
    "output": "cp -a -a * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and show progress",
    "output": "cp -a -v * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and do not overwrite existing files",
    "output": "cp -a -n * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and prompt before overwrite",
    "output": "cp -a -i * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and force overwrite",
    "output": "cp -a -f * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep permissions",
    "output": "cp -a -p * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep ownership",
    "output": "cp -a --preserve=ownership * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep mode",
    "output": "cp -a --preserve=mode * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep timestamps",
    "output": "cp -a --preserve=timestamps * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep links",
    "output": "cp -a --preserve=links * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep context",
    "output": "cp -a --preserve=context * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep xattr",
    "output": "cp -a --preserve=xattr * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep all attributes",
    "output": "cp -a --preserve=all * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep everything",
    "output": "cp -a -a * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and show progress",
    "output": "cp -a -v * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and do not overwrite existing files",
    "output": "cp -a -n * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and prompt before overwrite",
    "output": "cp -a -i * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and force overwrite",
    "output": "cp -a -f * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep permissions",
    "output": "cp -a -p * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep ownership",
    "output": "cp -a --preserve=ownership * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep mode",
    "output": "cp -a --preserve=mode * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep timestamps",
    "output": "cp -a --preserve=timestamps * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep links",
    "output": "cp -a --preserve=links * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep context",
    "output": "cp -a --preserve=context * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep xattr",
    "output": "cp -a --preserve=xattr * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep all attributes",
    "output": "cp -a --preserve=all * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep everything",
    "output": "cp -a -a * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and show progress",
    "output": "cp -a -v * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and do not overwrite existing files",
    "output": "cp -a -n * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and prompt before overwrite",
    "output": "cp -a -i * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and force overwrite",
    "output": "cp -a -f * /tmp/"
  },
  {
    "input": "Copy all files in the current directory to /tmp and keep everything and keep permissions",
    "output": "cp -a -p * /tmp/"
  },
  {
    "input": "Find all .txt files in /home",
    "output": "find /home -name \"*.txt\""
  },
  {
    "input": "Find all files in /var/log",
    "output": "find /var/log -type f"
  },
  {
    "input": "Find all directories in /tmp",
    "output": "find /tmp -type d"
  },
  {
    "input": "Find all .jpg files (case-insensitive) in current directory and subdirectories",
    "output": "find . -iname \"*.jpg\""
  },
  {
    "input": "Find the hosts file in /etc",
    "output": "find /etc -name \"hosts\""
  },
  {
    "input": "Find all symbolic links in /usr",
    "output": "find /usr -type l"
  },
  {
    "input": "Find all directories at the top level of /",
    "output": "find / -maxdepth 1 -type d"
  },
  {
    "input": "Find all files in /home/user that start with 'report'",
    "output": "find /home/user -type f -name \"report*\""
  },
  {
    "input": "Find files larger than 10MB in /opt",
    "output": "find /opt -type f -size +10M"
  },
  {
    "input": "Find all empty files in /srv",
    "output": "find /srv -type f -empty"
  },
  {
    "input": "Find files in /var/log modified in the last 24 hours",
    "output": "find /var/log -mtime -1"
  },
  {
    "input": "Find files in /home accessed more than 30 days ago",
    "output": "find /home -atime +30"
  },
  {
    "input": "Find directories in /tmp created today",
    "output": "find /tmp -ctime 0 -type d"
  },
  {
    "input": "Find files in /data modified in the last hour",
    "output": "find /data -mmin -60"
  },
  {
    "input": "Find files in /backup accessed more than 2 hours ago",
    "output": "find /backup -amin +120"
  },
  {
    "input": "Find files in /home newer than file.txt",
    "output": "find /home -newer file.txt"
  },
  {
    "input": "Find files in /var accessed more recently than /tmp/test.log",
    "output": "find /var -anewer /tmp/test.log"
  },
  {
    "input": "Find files in /etc changed more recently than /etc/passwd",
    "output": "find /etc -cnewer /etc/passwd"
  },
  {
    "input": "Find files in /home modified more than 7 days ago",
    "output": "find /home -mtime +7 -type f"
  },
  {
    "input": "Find directories in /tmp changed in the last 2 days",
    "output": "find /tmp -ctime -2 -type d"
  },
  {
    "input": "Find files in /var larger than 100MB",
    "output": "find /var -size +100M"
  },
  {
    "input": "Find files in /home smaller than 1KB",
    "output": "find /home -size -1k"
  },
  {
    "input": "Find zero-byte files in /tmp",
    "output": "find /tmp -size 0"
  },
  {
    "input": "Find files in /data larger than 1GB",
    "output": "find /data -size +1G -type f"
  },
  {
    "input": "Find files in /srv smaller than 10MB",
    "output": "find /srv -size -10M -type f"
  },
  {
    "input": "Find .log files in /opt larger than 500KB",
    "output": "find /opt -size +500k -name \"*.log\""
  },
  {
    "input": "Find files in /home exactly 50MB in size",
    "output": "find /home -size 50M"
  },
  {
    "input": "List large files (>1GB) in /var with details",
    "output": "find /var -size +1G -exec ls -lh {} \\;"
  },
  {
    "input": "Find files in /tmp smaller than 100 bytes",
    "output": "find /tmp -size -100c"
  },
  {
    "input": "Find directories in /data larger than 2GB",
    "output": "find /data -size +2G -type d"
  },
  {
    "input": "Find files in /home owned by user alice",
    "output": "find /home -user alice"
  },
  {
    "input": "Find files in /var owned by group admin",
    "output": "find /var -group admin"
  },
  {
    "input": "Find files in /tmp with permission 644",
    "output": "find /tmp -perm 644"
  },
  {
    "input": "Find files in /etc where user has execute permission",
    "output": "find /etc -perm /u+x"
  },
  {
    "input": "Find files in /srv not owned by root",
    "output": "find /srv -not -user root"
  },
  {
    "input": "Find files in /opt not owned by group staff",
    "output": "find /opt -not -group staff"
  },
  {
    "input": "Find files in /home with SUID bit set",
    "output": "find /home -perm -4000"
  },
  {
    "input": "Find files in /var where group has write permission",
    "output": "find /var -perm /g=w"
  },
  {
    "input": "Find files in /tmp with user sticky bit set",
    "output": "find /tmp -perm -u=s"
  },
  {
    "input": "Find files in /data with no valid user",
    "output": "find /data -nouser"
  },
  {
    "input": "Find files in /home not ending with .bak",
    "output": "find /home -not -name \"*.bak\""
  },
  {
    "input": "Find non-directory files in /var",
    "output": "find /var -not -type d"
  },
  {
    "input": "Find non-empty files in /tmp",
    "output": "find /tmp -not -size 0"
  },
  {
    "input": "Find files in /data not owned by root",
    "output": "find /data -not -user root"
  },
  {
    "input": "Find files in /srv not having permission 777",
    "output": "find /srv -not -perm 777"
  },
  {
    "input": "Find files in /opt not ending with .tmp (case-insensitive)",
    "output": "find /opt -not -iname \"*.tmp\""
  },
  {
    "input": "Find files in /home not in .cache directories",
    "output": "find /home -not -path \"*/.cache/*\""
  },
  {
    "input": "Find files in /var not owned by group wheel",
    "output": "find /var -not -group wheel"
  },
  {
    "input": "Find files in /tmp not newer than /tmp/marker",
    "output": "find /tmp -not -newer /tmp/marker"
  },
  {
    "input": "Find non-empty files in /data",
    "output": "find /data -not -empty"
  },
  {
    "input": "Find all .txt or .md files in /home",
    "output": "find /home \\( -name \"*.txt\" -o -name \"*.md\" \\)"
  },
  {
    "input": "Find files in /var larger than 1MB",
    "output": "find /var -type f -a -size +1M"
  },
  {
    "input": "Find files in /tmp owned by alice or bob",
    "output": "find /tmp \\( -user alice -o -user bob \\)"
  },
  {
    "input": "Find empty directories in /data",
    "output": "find /data -type d -a -empty"
  },
  {
    "input": "Find .log files in /srv larger than 10MB",
    "output": "find /srv -name \"*.log\" -a -size +10M"
  },
  {
    "input": "Find files in /opt with permission 644 or 600",
    "output": "find /opt \\( -perm 644 -o -perm 600 \\)"
  },
  {
    "input": "Find files in /home modified in the last week",
    "output": "find /home -mtime -7 -a -type f"
  },
  {
    "input": "Find non-gzipped files in /var",
    "output": "find /var -not -name \"*.gz\" -a -type f"
  },
  {
    "input": "Find files in /tmp larger than 1MB or smaller than 1KB",
    "output": "find /tmp \\( -size +1M -o -size -1k \\)"
  },
  {
    "input": "Find files in /data owned by root and group root",
    "output": "find /data -user root -a -group root"
  },
  {
    "input": "Make all .sh files in /home executable",
    "output": "find /home -name \"*.sh\" -exec chmod +x {} \\;"
  },
  {
    "input": "Calculate md5sum for all files in /var",
    "output": "find /var -type f -exec md5sum {} \\;"
  },
  {
    "input": "List all directories in /tmp with details",
    "output": "find /tmp -type d -exec ls -ld {} \\;"
  },
  {
    "input": "Delete all .bak files in /data",
    "output": "find /data -name \"*.bak\" -exec rm -f {} \\;"
  },
  {
    "input": "Compress all files in /srv using gzip",
    "output": "find /srv -type f -exec gzip {} \\;"
  },
  {
    "input": "Copy all files in /opt to /backup",
    "output": "find /opt -type f -exec cp {} /backup/ \\;"
  },
  {
    "input": "Search for 'TODO' in all files in /home",
    "output": "find /home -type f -exec grep \"TODO\" {} \\;"
  },
  {
    "input": "Show disk usage for all files in /var",
    "output": "find /var -type f -exec du -h {} \\;"
  },
  {
    "input": "Move all files in /tmp to /tmp/old",
    "output": "find /tmp -type f -exec mv {} /tmp/old/ \\;"
  },
  {
    "input": "Show first line of every file in /data",
    "output": "find /data -type f -exec head -n 1 {} \\;"
  },
  {
    "input": "Print all files in /home",
    "output": "find /home -type f -print"
  },
  {
    "input": "Print all directories in /var separated by null character",
    "output": "find /var -type d -print0"
  },
  {
    "input": "Print path and size of all files in /tmp",
    "output": "find /tmp -type f -printf \"%p %s\\n\""
  },
  {
    "input": "List all files in /data with details",
    "output": "find /data -type f -ls"
  },
  {
    "input": "Print all files in /srv and sort the list",
    "output": "find /srv -type f -print | sort"
  },
  {
    "input": "Count lines in all files in /opt",
    "output": "find /opt -type f -print | xargs wc -l"
  },
  {
    "input": "Search for 'main' in all files in /home",
    "output": "find /home -type f -print | xargs grep \"main\""
  },
  {
    "input": "Show disk usage for all files in /var",
    "output": "find /var -type f -print | xargs du -sh"
  },
  {
    "input": "Echo the filename for each file in /tmp",
    "output": "find /tmp -type f -print | xargs -I {} echo \"File: {}\""
  },
  {
    "input": "Save list of all files in /data to files.txt",
    "output": "find /data -type f -print | tee files.txt"
  },
  {
    "input": "Find all files in /home up to 2 levels deep",
    "output": "find /home -maxdepth 2 -type f"
  },
  {
    "input": "Find all directories in /var at least 1 level deep",
    "output": "find /var -mindepth 1 -type d"
  },
  {
    "input": "Find files in /tmp at the top level only",
    "output": "find /tmp -maxdepth 1 -type f"
  },
  {
    "input": "Find files in /data at least 3 levels deep",
    "output": "find /data -mindepth 3 -type f"
  },
  {
    "input": "Find .conf files in /srv up to 4 levels deep",
    "output": "find /srv -maxdepth 4 -name \"*.conf\""
  },
  {
    "input": "Find directories in /opt at least 2 levels deep",
    "output": "find /opt -mindepth 2 -type d"
  },
  {
    "input": "Find directories in /home at the top level only",
    "output": "find /home -maxdepth 1 -type d"
  },
  {
    "input": "Find files in /var at least 2 levels deep",
    "output": "find /var -mindepth 2 -type f"
  },
  {
    "input": "Find files in /tmp up to 3 levels deep",
    "output": "find /tmp -maxdepth 3 -type f"
  },
  {
    "input": "Find directories in /data at least 4 levels deep",
    "output": "find /data -mindepth 4 -type d"
  },
  {
    "input": "Find all symbolic links in /home",
    "output": "find /home -type l"
  },
  {
    "input": "Find all broken symbolic links in /var",
    "output": "find /var -xtype l"
  },
  {
    "input": "Find all named pipes in /tmp",
    "output": "find /tmp -type p"
  },
  {
    "input": "Find all block devices in /data",
    "output": "find /data -type b"
  },
  {
    "input": "Find all character devices in /srv",
    "output": "find /srv -type c"
  },
  {
    "input": "Find all sockets in /opt",
    "output": "find /opt -type s"
  },
  {
    "input": "Find files in /home with more than one hard link",
    "output": "find /home -type f -links +1"
  },
  {
    "input": "Find files in /var with exactly one hard link",
    "output": "find /var -type f -links 1"
  },
  {
    "input": "Find files in /tmp with less than two hard links",
    "output": "find /tmp -type f -links -2"
  },
  {
    "input": "Show the target of all symbolic links in /data",
    "output": "find /data -type l -exec readlink {} \\;"
  },
  {
    "input": "Delete .log files in /home older than 30 days",
    "output": "find /home -type f -name \"*.log\" -mtime +30 -exec rm {} \\;"
  },
  {
    "input": "Compress files larger than 100MB in /var",
    "output": "find /var -type f -size +100M -exec gzip {} \\;"
  },
  {
    "input": "Change owner of files in /tmp owned by alice to bob",
    "output": "find /tmp -type f -user alice -exec chown bob {} \\;"
  },
  {
    "input": "Change permissions from 600 to 644 for files in /data",
    "output": "find /data -type f -perm 600 -exec chmod 644 {} \\;"
  },
  {
    "input": "Copy all .conf files in /srv to /backup",
    "output": "find /srv -type f -name \"*.conf\" -exec cp {} /backup/ \\;"
  },
  {
    "input": "Move files larger than 1GB in /opt to /mnt/bigfiles",
    "output": "find /opt -type f -size +1G -exec mv {} /mnt/bigfiles/ \\;"
  },
  {
    "input": "Echo recently modified files in /home",
    "output": "find /home -type f -mtime -1 -exec echo \"Recent: {}\" \\;"
  },
  {
    "input": "Compress all non-gzipped files in /var",
    "output": "find /var -type f -not -name \"*.gz\" -exec gzip {} \\;"
  },
  {
    "input": "Delete all zero-byte files in /tmp",
    "output": "find /tmp -type f -size 0 -exec rm {} \\;"
  },
  {
    "input": "Delete .bak files in /data older than 7 days",
    "output": "find /data -type f -name \"*.bak\" -mtime +7 -exec rm {} \\;"
  },
  {
    "input": "Find file with inode 123456 in /home",
    "output": "find /home -inum 123456"
  },
  {
    "input": "Find files in /var that are hard links to /etc/passwd",
    "output": "find /var -samefile /etc/passwd"
  },
  {
    "input": "Find files in /tmp with more than two hard links",
    "output": "find /tmp -links +2"
  },
  {
    "input": "Find files in /data on the same filesystem",
    "output": "find /data -mount -type f"
  },
  {
    "input": "Find files in /srv, do not descend into other filesystems",
    "output": "find /srv -xdev -type f"
  },
  {
    "input": "Find files in /opt on ext4 filesystem",
    "output": "find /opt -fstype ext4"
  },
  {
    "input": "Find files in /home with UID 1000",
    "output": "find /home -uid 1000"
  },
  {
    "input": "Find files in /var with GID 100",
    "output": "find /var -gid 100"
  },
  {
    "input": "Find files in /tmp newer than June 1, 2025",
    "output": "find /tmp -type f -newerct \"2025-06-01\""
  },
  {
    "input": "Find files in /data modified after June 10, 2025",
    "output": "find /data -type f -newermt \"2025-06-10\""
  },
  {
    "input": "Find all .log files in /home using regex",
    "output": "find /home -regex \".*\\.log\""
  },
  {
    "input": "Find all .txt files with 4 digits in the name in /var using regex",
    "output": "find /var -iregex \".*[0-9]{4}\\.txt\""
  },
  {
    "input": "Find all shell scripts with lowercase names in /tmp using regex",
    "output": "find /tmp -regex \".*/[a-z]+\\.sh\""
  },
  {
    "input": "Find all backup tarballs in /data using regex",
    "output": "find /data -regex \".*/backup_[0-9]+\\.tar\\.gz\""
  },
  {
    "input": "Find all files containing 'config' in the path in /srv using regex",
    "output": "find /srv -regex \".*/config.*\""
  },
  {
    "input": "Find all readme files in /opt using case-insensitive regex",
    "output": "find /opt -iregex \".*/readme.*\""
  },
  {
    "input": "Find all CSV files with 3 uppercase letters and 2 digits in /home using regex",
    "output": "find /home -regex \".*/[A-Z]{3}[0-9]{2}\\.csv\""
  },
  {
    "input": "Find all error log files with digits in /var using regex",
    "output": "find /var -regex \".*/error_[0-9]+\\.log\""
  },
  {
    "input": "Find all temp files in /tmp using case-insensitive regex",
    "output": "find /tmp -iregex \".*/temp.*\""
  },
  {
    "input": "Find all .txt files in 2025 subdirectories of /data using regex",
    "output": "find /data -regex \".*/2025/.*\\.txt\""
  },
  {
    "input": "Find all files in /home but skip .git directories",
    "output": "find /home -path \"*/.git\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /var but skip cache directories",
    "output": "find /var -path \"*/cache\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /tmp but skip old directories",
    "output": "find /tmp -path \"*/old\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /data but skip backup directories",
    "output": "find /data -path \"*/backup\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /srv but skip logs directories",
    "output": "find /srv -path \"*/logs\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /opt but skip tmp directories",
    "output": "find /opt -path \"*/tmp\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /home but skip .svn directories",
    "output": "find /home -path \"*/.svn\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /var but skip .cache directories",
    "output": "find /var -path \"*/.cache\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /tmp but skip .Trash directories",
    "output": "find /tmp -path \"*/.Trash\" -prune -o -type f -print"
  },
  {
    "input": "Find all files in /data but skip .bak directories",
    "output": "find /data -path \"*/.bak\" -prune -o -type f -print"
  },
  {
    "input": "Print only the base name of each file in /home",
    "output": "find /home -type f -exec basename {} \\;"
  },
  {
    "input": "Print only the directory name of each file in /var",
    "output": "find /var -type f -exec dirname {} \\;"
  },
  {
    "input": "Show stat information for all files in /tmp",
    "output": "find /tmp -type f -exec stat {} \\;"
  },
  {
    "input": "Show file type for all files in /data",
    "output": "find /data -type f -exec file {} \\;"
  },
  {
    "input": "Concatenate and display all files in /srv",
    "output": "find /srv -type f -exec cat {} \\;"
  },
  {
    "input": "Show last 5 lines of all files in /opt",
    "output": "find /opt -type f -exec tail -n 5 {} \\;"
  },
  {
    "input": "Count lines in all files in /home",
    "output": "find /home -type f -exec wc -l {} \\;"
  },
  {
    "input": "Sort the contents of all files in /var",
    "output": "find /var -type f -exec sort {} \\;"
  },
  {
    "input": "Compare each file in /tmp to /tmp/compare.txt",
    "output": "find /tmp -type f -exec diff {} /tmp/compare.txt \\;"
  },
  {
    "input": "Copy each file in /data to a .bak file",
    "output": "find /data -type f -exec cp {} {}.bak \\;"
  },
  {
    "input": "List the contents of the current directory",
    "output": "ls"
  },
  {
    "input": "Show me the files in my home folder",
    "output": "ls ~"
  },
  {
    "input": "Display the contents of the root directory",
    "output": "ls /"
  },
  {
    "input": "What's in the parent directory?",
    "output": "ls .."
  },
  {
    "input": "List all files in /etc",
    "output": "ls /etc"
  },
  {
    "input": "Generate a detailed list of files",
    "output": "ls -l"
  },
  {
    "input": "Show all files, including hidden ones",
    "output": "ls -a"
  },
  {
    "input": "List files with human-readable sizes",
    "output": "ls -lh"
  },
  {
    "input": "Sort files by modification time, newest first",
    "output": "ls -t"
  },
  {
    "input": "Recursively list all files in this directory and its subdirectories",
    "output": "ls -R"
  },
  {
    "input": "Show me a detailed list of all files, even hidden ones",
    "output": "ls -la"
  },
  {
    "input": "List files in /var/log, sorted by modification time",
    "output": "ls -lt /var/log"
  },
  {
    "input": "Display the contents of the current directory, sorted by modification time, oldest first",
    "output": "ls -ltr"
  },
  {
    "input": "List files and show their inode numbers",
    "output": "ls -i"
  },
  {
    "input": "Add type indicators (like / for directories) to the file list",
    "output": "ls -F"
  },
  {
    "input": "Show me only the directories in my current location",
    "output": "ls -d */"
  },
  {
    "input": "List all files sorted by size, largest first",
    "output": "ls -S"
  },
  {
    "input": "Give me a detailed list of files in my home directory",
    "output": "ls -l ~"
  },
  {
    "input": "List everything in /tmp, including hidden files, with details",
    "output": "ls -la /tmp"
  },
  {
    "input": "Show files in the current directory with human-readable sizes, sorted by size",
    "output": "ls -lSh"
  },
  {
    "input": "List all files except for '.' and '..'",
    "output": "ls -A"
  },
  {
    "input": "Display a detailed list of files without the '.' and '..' entries",
    "output": "ls -lA"
  },
  {
    "input": "List files in reverse alphabetical order",
    "output": "ls -r"
  },
  {
    "input": "Show me the contents of ~/Documents, sorted by modification date, newest at the bottom",
    "output": "ls -ltr ~/Documents"
  },
  {
    "input": "List all .conf files in the /etc directory",
    "output": "ls /etc/*.conf"
  },
  {
    "input": "Display a detailed, human-readable list of files in the root directory",
    "output": "ls -lh /"
  },
  {
    "input": "Recursively list all files and folders in my home directory",
    "output": "ls -R ~"
  },
  {
    "input": "List files and sort them by last access time",
    "output": "ls -lu"
  },
  {
    "input": "Show me a detailed list sorted by last access time",
    "output": "ls -ltu"
  },
  {
    "input": "List files with numeric user and group IDs",
    "output": "ls -n"
  },
  {
    "input": "What are the contents of /var/www, shown recursively?",
    "output": "ls -R /var/www"
  },
  {
    "input": "Show me the files in the parent directory with full details",
    "output": "ls -l .."
  },
  {
    "input": "List all files ending in .log in the current directory, sorted by size",
    "output": "ls -S *.log"
  },
  {
    "input": "List the contents of the current directory, using color to distinguish file types",
    "output": "ls --color=auto"
  },
  {
    "input": "Show the inode number and add type indicators for all files",
    "output": "ls -iF"
  },
  {
    "input": "List all files in my home folder, including hidden ones",
    "output": "ls -a ~"
  },
  {
    "input": "Generate a detailed, human-readable list of files, sorted by modification time",
    "output": "ls -lht"
  },
  {
    "input": "List just the directories inside /usr/local",
    "output": "ls -d /usr/local/*/"
  },
  {
    "input": "Show me all files, with details, sorted by size (largest first)",
    "output": "ls -laS"
  },
  {
    "input": "List the contents of /boot, sorted by version number",
    "output": "ls -v /boot"
  },
  {
    "input": "Display a long listing, but don't show the group information",
    "output": "ls -o"
  },
  {
    "input": "Give me a detailed list, but omit the owner information",
    "output": "ls -g"
  },
  {
    "input": "List files in the current directory, one file per line",
    "output": "ls -1"
  },
  {
    "input": "Show detailed file info, sorted by size in reverse (smallest first)",
    "output": "ls -lSr"
  },
  {
    "input": "Recursively list the contents of the parent directory",
    "output": "ls -R .."
  },
  {
    "input": "List files in /var/log with human-readable sizes and sorted by time",
    "output": "ls -lht /var/log"
  },
  {
    "input": "Display all files in a single row, separated by commas",
    "output": "ls -m"
  },
  {
    "input": "Show me the files in ~, sorted by last access time, with oldest first",
    "output": "ls -ltur ~"
  },
  {
    "input": "List all .sh scripts in the current directory",
    "output": "ls *.sh"
  },
  {
    "input": "Give me a detailed, recursive listing of the current directory",
    "output": "ls -lR"
  },
  {
    "input": "List the contents of my Documents folder",
    "output": "ls ~/Documents"
  },
  {
    "input": "Show me what's in /var, but only list the directories",
    "output": "ls -d /var/*"
  },
  {
    "input": "List all items, including hidden, with type indicators",
    "output": "ls -aF"
  },
  {
    "input": "Sort the current directory's contents by file extension",
    "output": "ls -X"
  },
  {
    "input": "Show me a detailed list sorted by extension",
    "output": "ls -lX"
  },
  {
    "input": "What are the contents of /dev, sorted by modification time?",
    "output": "ls -t /dev"
  },
  {
    "input": "List all files in the root directory, including the hidden ones",
    "output": "ls -a /"
  },
  {
    "input": "Show me a detailed, recursive list of my home directory",
    "output": "ls -lR ~"
  },
  {
    "input": "List all files with details, human-readable sizes, and sorted by size in reverse",
    "output": "ls -lShr"
  },
  {
    "input": "Display the contents of the parent directory, sorted by time, newest last",
    "output": "ls -tr .."
  },
  {
    "input": "Show me all directories starting with 'p' in the root folder",
    "output": "ls -d /p*/"
  },
  {
    "input": "List the contents of /usr/bin, sorted by size",
    "output": "ls -S /usr/bin"
  },
  {
    "input": "Give me a detailed list of /usr/lib, sorted by access time",
    "output": "ls -ltu /usr/lib"
  },
  {
    "input": "List all files in the current folder with a .txt extension",
    "output": "ls *.txt"
  },
  {
    "input": "Show me the contents of ~, but without any color",
    "output": "ls --color=none ~"
  },
  {
    "input": "List files with details and sort by change time (ctime)",
    "output": "ls -lc"
  },
  {
    "input": "Display files sorted by their ctime, newest first",
    "output": "ls -ltc"
  },
  {
    "input": "What's in my Downloads folder? Show me a detailed list.",
    "output": "ls -l ~/Downloads"
  },
  {
    "input": "List all files, show details, and append type indicators",
    "output": "ls -lF"
  },
  {
    "input": "Show a detailed list of files with their inodes",
    "output": "ls -li"
  },
  {
    "input": "List contents of the current directory, quoting names with spaces",
    "output": "ls -b"
  },
  {
    "input": "Recursively list everything, but only show directories",
    "output": "find . -type d | ls -R"
  },
  {
    "input": "List files in multiple columns, filling rows first",
    "output": "ls -C"
  },
  {
    "input": "Display a detailed list of all files in my home directory, including hidden ones",
    "output": "ls -la ~"
  },
  {
    "input": "List all PNG and JPG files",
    "output": "ls *.png *.jpg"
  },
  {
    "input": "Show me the contents of the current folder, sorted by time, oldest first, with details",
    "output": "ls -ltr"
  },
  {
    "input": "List files in /etc with human-readable sizes",
    "output": "ls -lh /etc"
  },
  {
    "input": "Give me a detailed, recursive list of /var/log",
    "output": "ls -lR /var/log"
  },
  {
    "input": "What are the files in / and /home?",
    "output": "ls / /home"
  },
  {
    "input": "Show me a detailed list of files starting with 'a', 'b', or 'c'",
    "output": "ls -l [abc]*"
  },
  {
    "input": "List all files and their inode numbers, including hidden ones",
    "output": "ls -ai"
  },
  {
    "input": "Display files in the parent directory, sorted by size",
    "output": "ls -S .."
  },
  {
    "input": "Show me the three newest files in the current directory",
    "output": "ls -t | head -n 3"
  },
  {
    "input": "List the contents of my home directory recursively with details and human sizes",
    "output": "ls -lRh ~"
  },
  {
    "input": "What are the hidden files in the root directory?",
    "output": "ls -d /.*"
  },
  {
    "input": "List files in the current folder, sorted by version number",
    "output": "ls -v"
  },
  {
    "input": "Show me a detailed list of files, sorted naturally by version number",
    "output": "ls -lv"
  },
  {
    "input": "List all contents of /tmp, sorted by size, largest first",
    "output": "ls -S /tmp"
  },
  {
    "input": "Display a detailed list of files, but do not list subdirectories",
    "output": "ls -ld * "
  },
  {
    "input": "Show me the contents of the current directory without sorting",
    "output": "ls -U"
  },
  {
    "input": "List all files with details, unsorted",
    "output": "ls -lU"
  },
  {
    "input": "What are the contents of my home directory and its parent?",
    "output": "ls ~ .."
  },
  {
    "input": "Show me a detailed list of all files in /etc, sorted by time",
    "output": "ls -lat /etc"
  },
  {
    "input": "List the oldest file in the current directory",
    "output": "ls -tr | head -n 1"
  },
  {
    "input": "Display a detailed, recursive list sorted by time",
    "output": "ls -lRt"
  },
  {
    "input": "Show me all directories in my home folder",
    "output": "ls -d ~/*/"
  },
  {
    "input": "List the contents of /usr/share, sorted by size, smallest first",
    "output": "ls -Sr /usr/share"
  },
  {
    "input": "Provide a detailed list of all files, sorted by size, with human-readable values",
    "output": "ls -laSh"
  },
  {
    "input": "What are the file types in the current directory?",
    "output": "ls -F"
  },
  {
    "input": "List all files with their full details and numeric IDs",
    "output": "ls -ln"
  },
  {
    "input": "Show a recursive list, but only for two levels deep",
    "output": "ls -R -L 2"
  },
  {
    "input": "List files and their inode numbers, sorted by time",
    "output": "ls -it"
  },
  {
    "input": "Display the contents of the current directory in a long list format, sorted by size and reversed",
    "output": "ls -lSr"
  },
  {
    "input": "List everything in my Documents folder, one file per line",
    "output": "ls -1 ~/Documents"
  },
  {
    "input": "Show me the files in /bin, sorted by access time",
    "output": "ls -tu /bin"
  },
  {
    "input": "List files in long format, omitting the author",
    "output": "ls --no-group"
  },
  {
    "input": "What files are in /var/spool? Show me all of them.",
    "output": "ls -a /var/spool"
  },
  {
    "input": "Give me a detailed list of symbolic links in the current directory",
    "output": "ls -l | grep '^l'"
  },
  {
    "input": "List all files and show their inodes, sorted by size",
    "output": "ls -iS"
  },
  {
    "input": "Show me the contents of the /opt directory, sorted oldest first",
    "output": "ls -tr /opt"
  },
  {
    "input": "List all files recursively, with details, sorted by modification time",
    "output": "ls -lRt"
  },
  {
    "input": "Show me a detailed, human-readable list of my Pictures folder",
    "output": "ls -lh ~/Pictures"
  },
  {
    "input": "List all files in /usr/include, sorted by extension",
    "output": "ls -X /usr/include"
  },
  {
    "input": "Display a detailed list of all files, sorted by access time, newest first",
    "output": "ls -laut"
  },
  {
    "input": "What are the contents of the current directory, with numeric IDs and type indicators?",
    "output": "ls -nF"
  },
  {
    "input": "List files in my home directory with details and sorted by version",
    "output": "ls -lv ~"
  },
  {
    "input": "Show me a recursive list of /etc, sorted by size",
    "output": "ls -RS /etc"
  },
  {
    "input": "Give me a detailed list of files in the parent directory, sorted by size",
    "output": "ls -lS .."
  },
  {
    "input": "List all log files in /var/log, with details and human sizes",
    "output": "ls -lh /var/log/*.log"
  },
  {
    "input": "Show me a list of all files, sorted by access time, oldest first",
    "output": "ls -atur"
  },
  {
    "input": "Display the contents of my home directory and the root directory in a single command",
    "output": "ls ~ /"
  },
  {
    "input": "List just the file named 'bashrc' in my home directory, with details",
    "output": "ls -l ~/.bashrc"
  },
  {
    "input": "What are the files in the current directory? Show me a detailed list with hidden files and type indicators",
    "output": "ls -laF"
  },
  {
    "input": "Show me the 5 largest files in the current directory",
    "output": "ls -S | head -n 5"
  },
  {
    "input": "List all files in the current directory and parent directory",
    "output": "ls . .."
  },
  {
    "input": "Display a detailed list of files, sorted by change time (ctime), oldest first",
    "output": "ls -lctr"
  },
  {
    "input": "Show me a detailed, recursive, human-readable list sorted by time, oldest first",
    "output": "ls -lRhtr"
  },
  {
    "input": "List the contents of the /sys directory",
    "output": "ls /sys"
  },
  {
    "input": "Give me a detailed list of all .zip files in my Downloads folder",
    "output": "ls -l ~/Downloads/*.zip"
  },
  {
    "input": "Show me the inode number for every file in the root directory",
    "output": "ls -i /"
  },
  {
    "input": "List files in my home folder, sorted by size, smallest first",
    "output": "ls -Sr ~"
  },
  {
    "input": "Display a detailed list of all files, sorted by time, showing access time",
    "output": "ls -latu"
  },
  {
    "input": "What are the directories in /usr? List them in long format.",
    "output": "ls -ld /usr/*/"
  },
  {
    "input": "Show a detailed, recursive list of the current directory, but only go 3 levels deep",
    "output": "find . -maxdepth 3 -ls"
  },
  {
    "input": "List all files with details, sorted by modification time, but show access time instead",
    "output": "ls -lt --time=atime"
  },
  {
    "input": "Show me a long listing format of the current directory, sorted by file extension.",
    "output": "ls -lX"
  },
  {
    "input": "List all files and their inodes, sorted by access time",
    "output": "ls -itu"
  },
  {
    "input": "Display a detailed list of the files in /tmp, sorted by size with human-readable units",
    "output": "ls -lSh /tmp"
  },
  {
    "input": "Show me the contents of the current directory and all subdirectories, with file type indicators",
    "output": "ls -RF"
  },
  {
    "input": "List all hidden files and folders in my home directory with details",
    "output": "ls -ld ~.*"
  },
  {
    "input": "Create a directory called 'projects'",
    "output": "mkdir projects"
  },
  {
    "input": "Make a new directory named 'backup' in the current folder",
    "output": "mkdir backup"
  },
  {
    "input": "Create a directory named '2025_reports' inside Documents",
    "output": "mkdir Documents/2025_reports"
  },
  {
    "input": "Create a directory called 'test' in your home directory",
    "output": "mkdir ~/test"
  },
  {
    "input": "Make a directory called 'work' in /tmp",
    "output": "mkdir /tmp/work"
  },
  {
    "input": "Create a directory called 'data' inside /var/log",
    "output": "mkdir /var/log/data"
  },
  {
    "input": "Create a nested directory structure 'a/b/c'",
    "output": "mkdir -p a/b/c"
  },
  {
    "input": "Create a directory named 'My Files' with spaces in the name",
    "output": "mkdir 'My Files'"
  },
  {
    "input": "Make a hidden directory called '.config' in your home",
    "output": "mkdir ~/.config"
  },
  {
    "input": "Create a directory called 'scripts' in the current directory",
    "output": "mkdir scripts"
  },
  {
    "input": "Make a directory named 'photos' in the Pictures folder",
    "output": "mkdir ~/Pictures/photos"
  },
  {
    "input": "Create a directory named 'downloads' in /mnt/usb",
    "output": "mkdir /mnt/usb/downloads"
  },
  {
    "input": "Create a directory named 'archive' in /opt",
    "output": "mkdir /opt/archive"
  },
  {
    "input": "Create a directory called 'logs' and another called 'tmp' at the same time",
    "output": "mkdir logs tmp"
  },
  {
    "input": "Create a directory called '2025' inside /srv/www",
    "output": "mkdir /srv/www/2025"
  },
  {
    "input": "Create a directory called 'backup_2025' in /var/backups",
    "output": "mkdir /var/backups/backup_2025"
  },
  {
    "input": "Create a directory called 'private' in your home",
    "output": "mkdir ~/private"
  },
  {
    "input": "Create a directory named 'bin' in the parent directory",
    "output": "mkdir ../bin"
  },
  {
    "input": "Create a directory named 'reports' in /home/user/Documents",
    "output": "mkdir /home/user/Documents/reports"
  },
  {
    "input": "Create a directory called 'testdir' and enter it",
    "output": "mkdir testdir && cd testdir"
  },
  {
    "input": "Create a directory called 'build' in the current directory",
    "output": "mkdir build"
  },
  {
    "input": "Create a directory '2025/June/18' with all parents",
    "output": "mkdir -p 2025/June/18"
  },
  {
    "input": "Create a directory called 'new_folder' in /etc",
    "output": "mkdir /etc/new_folder"
  },
  {
    "input": "Create a directory called 'cache' in /var",
    "output": "mkdir /var/cache"
  },
  {
    "input": "Create a directory called 'logs' inside /var/log",
    "output": "mkdir /var/log/logs"
  },
  {
    "input": "Create a directory called 'docs' in /usr/share",
    "output": "mkdir /usr/share/docs"
  },
  {
    "input": "Make a directory called 'src' in /usr/local",
    "output": "mkdir /usr/local/src"
  },
  {
    "input": "Create a directory called 'media' in /mnt",
    "output": "mkdir /mnt/media"
  },
  {
    "input": "Create a directory called 'images' in the Desktop directory",
    "output": "mkdir ~/Desktop/images"
  },
  {
    "input": "Create a directory called 'videos' in /media/usb",
    "output": "mkdir /media/usb/videos"
  },
  {
    "input": "Create a directory called 'notes' in your home directory",
    "output": "mkdir ~/notes"
  },
  {
    "input": "Create a directory called 'temp' in /tmp",
    "output": "mkdir /tmp/temp"
  },
  {
    "input": "Create a directory called 'test_logs' in the current directory",
    "output": "mkdir test_logs"
  },
  {
    "input": "Create a directory called 'config' in /etc",
    "output": "mkdir /etc/config"
  },
  {
    "input": "Create a directory called 'public_html' in your home",
    "output": "mkdir ~/public_html"
  },
  {
    "input": "Create a directory called 'dev' in /srv",
    "output": "mkdir /srv/dev"
  },
  {
    "input": "Create a directory called 'lib' in /usr/local",
    "output": "mkdir /usr/local/lib"
  },
  {
    "input": "Create a directory called 'share' in /usr/local",
    "output": "mkdir /usr/local/share"
  },
  {
    "input": "Create a directory called 'docs' in /usr/local/share",
    "output": "mkdir /usr/local/share/docs"
  },
  {
    "input": "Create a directory called 'projects' and a subdirectory '2025' in one command",
    "output": "mkdir -p projects/2025"
  },
  {
    "input": "Create a directory called 'python3' in /usr/bin",
    "output": "mkdir /usr/bin/python3"
  },
  {
    "input": "Create a directory called 'backup' inside /etc/ssl",
    "output": "mkdir /etc/ssl/backup"
  },
  {
    "input": "Create a directory called 'archive' in /var/mail",
    "output": "mkdir /var/mail/archive"
  },
  {
    "input": "Create a directory called 'logs' in /var/tmp",
    "output": "mkdir /var/tmp/logs"
  },
  {
    "input": "Create a directory called 'monthly' in /var/log/backup",
    "output": "mkdir /var/log/backup/monthly"
  },
  {
    "input": "Create a directory called 'weekly' in /var/log/backup",
    "output": "mkdir /var/log/backup/weekly"
  },
  {
    "input": "Create a directory called 'daily' in /var/log/backup",
    "output": "mkdir /var/log/backup/daily"
  },
  {
    "input": "Create a directory called 'test' in /var/spool",
    "output": "mkdir /var/spool/test"
  },
  {
    "input": "Create a directory called 'queue' in /var/spool",
    "output": "mkdir /var/spool/queue"
  },
  {
    "input": "Create a directory called 'mail' in /var/spool",
    "output": "mkdir /var/spool/mail"
  },
  {
    "input": "Create a directory called 'cron' in /var/spool",
    "output": "mkdir /var/spool/cron"
  },
  {
    "input": "Create a directory called 'jobs' in /var/spool/cron",
    "output": "mkdir /var/spool/cron/jobs"
  },
  {
    "input": "Create a directory called 'old' in /var/log",
    "output": "mkdir /var/log/old"
  },
  {
    "input": "Create a directory called 'backup' in /home/alice",
    "output": "mkdir /home/alice/backup"
  },
  {
    "input": "Create a directory called 'backup' in /home/bob",
    "output": "mkdir /home/bob/backup"
  },
  {
    "input": "Create a directory called 'test' in /home/alice",
    "output": "mkdir /home/alice/test"
  },
  {
    "input": "Create a directory called 'test' in /home/bob",
    "output": "mkdir /home/bob/test"
  },
  {
    "input": "Create a directory called 'test' in /home/charlie",
    "output": "mkdir /home/charlie/test"
  },
  {
    "input": "Create a directory called 'test' in /home/dave",
    "output": "mkdir /home/dave/test"
  },
  {
    "input": "Create a directory called 'test' in /home/erin",
    "output": "mkdir /home/erin/test"
  },
  {
    "input": "Create a directory called 'test' in /home/frank",
    "output": "mkdir /home/frank/test"
  },
  {
    "input": "Create a directory called 'test' in /home/grace",
    "output": "mkdir /home/grace/test"
  },
  {
    "input": "Create a directory called 'test' in /home/harry",
    "output": "mkdir /home/harry/test"
  },
  {
    "input": "Create a directory called 'temp' in /home/alice",
    "output": "mkdir /home/alice/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/bob",
    "output": "mkdir /home/bob/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/charlie",
    "output": "mkdir /home/charlie/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/dave",
    "output": "mkdir /home/dave/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/erin",
    "output": "mkdir /home/erin/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/frank",
    "output": "mkdir /home/frank/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/grace",
    "output": "mkdir /home/grace/temp"
  },
  {
    "input": "Create a directory called 'temp' in /home/harry",
    "output": "mkdir /home/harry/temp"
  },
  {
    "input": "Create a directory called 'workspace' in your home",
    "output": "mkdir ~/workspace"
  },
  {
    "input": "Create a directory called 'builds' in your home",
    "output": "mkdir ~/builds"
  },
  {
    "input": "Create a directory called 'logs' in your home",
    "output": "mkdir ~/logs"
  },
  {
    "input": "Create a directory called 'test_data' in your home",
    "output": "mkdir ~/test_data"
  },
  {
    "input": "Create a directory called 'test_output' in your home",
    "output": "mkdir ~/test_output"
  },
  {
    "input": "Create a directory called 'projects' in your home",
    "output": "mkdir ~/projects"
  },
  {
    "input": "Create a directory called 'archives' in your home",
    "output": "mkdir ~/archives"
  },
  {
    "input": "Create a directory called 'music' in your home",
    "output": "mkdir ~/music"
  },
  {
    "input": "Create a directory called 'videos' in your home",
    "output": "mkdir ~/videos"
  },
  {
    "input": "Create a directory called 'pictures' in your home",
    "output": "mkdir ~/pictures"
  },
  {
    "input": "Create a directory called 'documents' in your home",
    "output": "mkdir ~/documents"
  },
  {
    "input": "Create a directory called 'downloads' in your home",
    "output": "mkdir ~/downloads"
  },
  {
    "input": "Create a directory called 'bin' in your home",
    "output": "mkdir ~/bin"
  },
  {
    "input": "Create a directory called 'src' in your home",
    "output": "mkdir ~/src"
  },
  {
    "input": "Create a directory called 'include' in your home",
    "output": "mkdir ~/include"
  },
  {
    "input": "Create a directory called 'lib' in your home",
    "output": "mkdir ~/lib"
  },
  {
    "input": "Create a directory called 'share' in your home",
    "output": "mkdir ~/share"
  },
  {
    "input": "Create a directory called 'opt' in your home",
    "output": "mkdir ~/opt"
  },
  {
    "input": "Create a directory called 'etc' in your home",
    "output": "mkdir ~/etc"
  },
  {
    "input": "Create a directory called 'var' in your home",
    "output": "mkdir ~/var"
  },
  {
    "input": "Create a directory called 'tmp' in your home",
    "output": "mkdir ~/tmp"
  },
  {
    "input": "Create a directory called 'man' in your home",
    "output": "mkdir ~/man"
  },
  {
    "input": "Create a directory called 'doc' in your home",
    "output": "mkdir ~/doc"
  },
  {
    "input": "Create a directory called 'info' in your home",
    "output": "mkdir ~/info"
  },
  {
    "input": "Create a directory called 'locale' in your home",
    "output": "mkdir ~/locale"
  },
  {
    "input": "Create a directory called 'zoneinfo' in your home",
    "output": "mkdir ~/zoneinfo"
  },
  {
    "input": "Create a directory called 'fonts' in your home",
    "output": "mkdir ~/fonts"
  },
  {
    "input": "Create a directory called 'themes' in your home",
    "output": "mkdir ~/themes"
  },
  {
    "input": "Create a directory called 'icons' in your home",
    "output": "mkdir ~/icons"
  },
  {
    "input": "Create a directory called 'backgrounds' in your home",
    "output": "mkdir ~/backgrounds"
  },
  {
    "input": "Create a directory called 'applications' in your home",
    "output": "mkdir ~/applications"
  },
  {
    "input": "Create a directory called 'sounds' in your home",
    "output": "mkdir ~/sounds"
  },
  {
    "input": "Create a directory called 'pixmaps' in your home",
    "output": "mkdir ~/pixmaps"
  },
  {
    "input": "Create a directory called 'mime' in your home",
    "output": "mkdir ~/mime"
  },
  {
    "input": "Create a directory called 'games' in your home",
    "output": "mkdir ~/games"
  },
  {
    "input": "Create a directory called 'perl5' in your home",
    "output": "mkdir ~/perl5"
  },
  {
    "input": "Create a directory called 'python' in your home",
    "output": "mkdir ~/python"
  },
  {
    "input": "Create a directory called 'texmf' in your home",
    "output": "mkdir ~/texmf"
  },
  {
    "input": "Create a directory called 'emacs' in your home",
    "output": "mkdir ~/emacs"
  },
  {
    "input": "Create a directory called 'doc-base' in your home",
    "output": "mkdir ~/doc-base"
  },
  {
    "input": "Create a directory called 'lintian' in your home",
    "output": "mkdir ~/lintian"
  },
  {
    "input": "Create a directory called 'linda' in your home",
    "output": "mkdir ~/linda"
  },
  {
    "input": "Create a directory called 'locale-langpack' in your home",
    "output": "mkdir ~/locale-langpack"
  },
  {
    "input": "Create a directory called 'Asia' in your home",
    "output": "mkdir ~/Asia"
  },
  {
    "input": "Create a directory called 'Europe' in your home",
    "output": "mkdir ~/Europe"
  },
  {
    "input": "Create a directory called 'America' in your home",
    "output": "mkdir ~/America"
  },
  {
    "input": "Create a directory called 'Africa' in your home",
    "output": "mkdir ~/Africa"
  },
  {
    "input": "Create a deeply nested directory structure 'a/b/c/d/e/f'",
    "output": "mkdir -p a/b/c/d/e/f"
  },
  {
    "input": "Create a directory called 'test' and suppress error if it exists",
    "output": "mkdir -p test"
  },
  {
    "input": "Create multiple directories at once: 'a', 'b', and 'c'",
    "output": "mkdir a b c"
  },
  {
    "input": "Create a directory called 'test' in the current directory and set permissions to 700",
    "output": "mkdir test && chmod 700 test"
  },
  {
    "input": "Rename a file called 'oldname.txt' to 'newname.txt'",
    "output": "mv oldname.txt newname.txt"
  },
  {
    "input": "Move 'report.pdf' to the Documents folder",
    "output": "mv report.pdf ~/Documents/"
  },
  {
    "input": "Move 'image.jpg' from the current directory to /tmp",
    "output": "mv image.jpg /tmp/"
  },
  {
    "input": "Rename 'data.csv' to 'backup.csv' in the same directory",
    "output": "mv data.csv backup.csv"
  },
  {
    "input": "Move all .txt files to the backup directory",
    "output": "mv *.txt backup/"
  },
  {
    "input": "Rename a file named 'My File.txt' with spaces to 'MyFile.txt'",
    "output": "mv 'My File.txt' MyFile.txt"
  },
  {
    "input": "Move a hidden file '.env' to the parent directory",
    "output": "mv .env ../"
  },
  {
    "input": "Move 'script.sh' to /usr/local/bin and keep the same name",
    "output": "mv script.sh /usr/local/bin/"
  },
  {
    "input": "Move 'notes.txt' from your home to the Desktop",
    "output": "mv ~/notes.txt ~/Desktop/"
  },
  {
    "input": "Rename 'config.yaml' to 'config_backup.yaml' in /etc",
    "output": "mv /etc/config.yaml /etc/config_backup.yaml"
  },
  {
    "input": "Move all files in the current directory to /tmp",
    "output": "mv * /tmp/"
  },
  {
    "input": "Move all .log files from /var/log to /backup/logs",
    "output": "mv /var/log/*.log /backup/logs/"
  },
  {
    "input": "Move a directory called 'projects' to /backup",
    "output": "mv projects /backup/"
  },
  {
    "input": "Move the entire 'Documents' folder to /mnt/usb",
    "output": "mv ~/Documents /mnt/usb/"
  },
  {
    "input": "Move a directory 'src' and all its contents to /opt",
    "output": "mv src /opt/"
  },
  {
    "input": "Move 'file1.txt' and 'file2.txt' to /tmp",
    "output": "mv file1.txt file2.txt /tmp/"
  },
  {
    "input": "Move all files starting with 'test' to /var/tmp",
    "output": "mv test* /var/tmp/"
  },
  {
    "input": "Move all files and subdirectories from 'build' to 'release'",
    "output": "mv build/* release/"
  },
  {
    "input": "Rename 'draft.docx' to 'final.docx' in the parent directory",
    "output": "mv ../draft.docx ../final.docx"
  },
  {
    "input": "Move all files in /etc to /backup/etc",
    "output": "mv /etc/* /backup/etc/"
  },
  {
    "input": "Move a file 'output.txt' to /tmp and overwrite if exists",
    "output": "mv -f output.txt /tmp/"
  },
  {
    "input": "Move a directory 'images' to /var/www/html",
    "output": "mv images /var/www/html/"
  },
  {
    "input": "Move all .jpg files from Pictures to Desktop",
    "output": "mv ~/Pictures/*.jpg ~/Desktop/"
  },
  {
    "input": "Rename 'data.json' to 'data_backup.json' in /srv/www",
    "output": "mv /srv/www/data.json /srv/www/data_backup.json"
  },
  {
    "input": "Move all files in /home/user/Downloads to /mnt/usb",
    "output": "mv /home/user/Downloads/* /mnt/usb/"
  },
  {
    "input": "Move a file 'archive.tar.gz' to /opt and overwrite without prompt",
    "output": "mv -f archive.tar.gz /opt/"
  },
  {
    "input": "Move a directory 'backup' to /tmp",
    "output": "mv backup /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and do not overwrite existing files",
    "output": "mv -n * /tmp/"
  },
  {
    "input": "Move a file 'test.log' to /var/log and prompt before overwrite",
    "output": "mv -i test.log /var/log/"
  },
  {
    "input": "Move all files in /var/log recursively to /backup/logs",
    "output": "mv /var/log/* /backup/logs/"
  },
  {
    "input": "Move a file 'config' to /etc and show progress",
    "output": "mv -v config /etc/"
  },
  {
    "input": "Move all .conf files from /etc to /backup/etc",
    "output": "mv /etc/*.conf /backup/etc/"
  },
  {
    "input": "Rename 'index.html' to 'index_backup.html' in /var/www/html",
    "output": "mv /var/www/html/index.html /var/www/html/index_backup.html"
  },
  {
    "input": "Move a directory 'music' to /mnt/usb",
    "output": "mv music /mnt/usb/"
  },
  {
    "input": "Move all files in /tmp to the current directory",
    "output": "mv /tmp/* ."
  },
  {
    "input": "Move 'resume.pdf' to your home directory",
    "output": "mv resume.pdf ~/"
  },
  {
    "input": "Move all files in /var/tmp to /backup/tmp and force overwrite",
    "output": "mv -f /var/tmp/* /backup/tmp/"
  },
  {
    "input": "Move 'draft.txt' to /home/alice/Documents",
    "output": "mv draft.txt /home/alice/Documents/"
  },
  {
    "input": "Move all files in /usr/local/bin to /opt/bin",
    "output": "mv /usr/local/bin/* /opt/bin/"
  },
  {
    "input": "Move 'testfile' to /srv/www and prompt before overwrite",
    "output": "mv -i testfile /srv/www/"
  },
  {
    "input": "Move all files in /mnt/usb to /media/backup",
    "output": "mv /mnt/usb/* /media/backup/"
  },
  {
    "input": "Rename 'logfile' to 'logfile.old' in /var/log",
    "output": "mv /var/log/logfile /var/log/logfile.old"
  },
  {
    "input": "Move all files in /var/spool/cron to /backup/cron",
    "output": "mv /var/spool/cron/* /backup/cron/"
  },
  {
    "input": "Move 'mail.txt' to /var/mail",
    "output": "mv mail.txt /var/mail/"
  },
  {
    "input": "Move all files in /var/log/apache2 to /backup/apache2",
    "output": "mv /var/log/apache2/* /backup/apache2/"
  },
  {
    "input": "Rename 'index.html' to 'index.bak' in /var/www/html",
    "output": "mv /var/www/html/index.html /var/www/html/index.bak"
  },
  {
    "input": "Move all files in /var/log/nginx to /backup/nginx",
    "output": "mv /var/log/nginx/* /backup/nginx/"
  },
  {
    "input": "Move 'db.sqlite3' to /srv/db",
    "output": "mv db.sqlite3 /srv/db/"
  },
  {
    "input": "Move all files in /var/log/mysql to /backup/mysql",
    "output": "mv /var/log/mysql/* /backup/mysql/"
  },
  {
    "input": "Rename 'access.log' to 'access.old' in /var/log",
    "output": "mv /var/log/access.log /var/log/access.old"
  },
  {
    "input": "Move all files in /var/log/postgresql to /backup/postgresql",
    "output": "mv /var/log/postgresql/* /backup/postgresql/"
  },
  {
    "input": "Rename 'syslog' to 'syslog.1' in /var/log",
    "output": "mv /var/log/syslog /var/log/syslog.1"
  },
  {
    "input": "Move all files in /var/log/journal to /backup/journal",
    "output": "mv /var/log/journal/* /backup/journal/"
  },
  {
    "input": "Rename 'kern.log' to 'kern.log.old' in /var/log",
    "output": "mv /var/log/kern.log /var/log/kern.log.old"
  },
  {
    "input": "Move all files in /var/log/auth to /backup/auth",
    "output": "mv /var/log/auth/* /backup/auth/"
  },
  {
    "input": "Rename 'apt.log' to 'apt.log.bak' in /var/log/apt",
    "output": "mv /var/log/apt/apt.log /var/log/apt/apt.log.bak"
  },
  {
    "input": "Move all files in /var/log/dpkg to /backup/dpkg",
    "output": "mv /var/log/dpkg/* /backup/dpkg/"
  },
  {
    "input": "Rename 'user.log' to 'user.log.old' in /var/log",
    "output": "mv /var/log/user.log /var/log/user.log.old"
  },
  {
    "input": "Move all files in /var/log/installer to /backup/installer",
    "output": "mv /var/log/installer/* /backup/installer/"
  },
  {
    "input": "Rename 'boot.log' to 'boot.log.old' in /var/log",
    "output": "mv /var/log/boot.log /var/log/boot.log.old"
  },
  {
    "input": "Move all files in /var/log/fsck to /backup/fsck",
    "output": "mv /var/log/fsck/* /backup/fsck/"
  },
  {
    "input": "Rename 'sa.log' to 'sa.log.old' in /var/log/sa",
    "output": "mv /var/log/sa/sa.log /var/log/sa/sa.log.old"
  },
  {
    "input": "Move all files in /var/log/pm-powersave to /backup/pm-powersave",
    "output": "mv /var/log/pm-powersave/* /backup/pm-powersave/"
  },
  {
    "input": "Rename 'aptitude.log' to 'aptitude.log.old' in /var/log/aptitude",
    "output": "mv /var/log/aptitude/aptitude.log /var/log/aptitude/aptitude.log.old"
  },
  {
    "input": "Move all files in /var/log/unattended-upgrades to /backup/unattended-upgrades",
    "output": "mv /var/log/unattended-upgrades/* /backup/unattended-upgrades/"
  },
  {
    "input": "Rename 'clamav.log' to 'clamav.log.old' in /var/log/clamav",
    "output": "mv /var/log/clamav/clamav.log /var/log/clamav/clamav.log.old"
  },
  {
    "input": "Move all files in /var/log/exim4 to /backup/exim4",
    "output": "mv /var/log/exim4/* /backup/exim4/"
  },
  {
    "input": "Rename 'news.log' to 'news.log.old' in /var/log/news",
    "output": "mv /var/log/news/news.log /var/log/news/news.log.old"
  },
  {
    "input": "Move all files in /var/log/ppp to /backup/ppp",
    "output": "mv /var/log/ppp/* /backup/ppp/"
  },
  {
    "input": "Rename 'samba.log' to 'samba.log.old' in /var/log/samba",
    "output": "mv /var/log/samba/samba.log /var/log/samba/samba.log.old"
  },
  {
    "input": "Move all files in /var/log/ufw to /backup/ufw",
    "output": "mv /var/log/ufw/* /backup/ufw/"
  },
  {
    "input": "Rename 'wtmp' to 'wtmp.old' in /var/log",
    "output": "mv /var/log/wtmp /var/log/wtmp.old"
  },
  {
    "input": "Move all files in /var/log/xrdp to /backup/xrdp",
    "output": "mv /var/log/xrdp/* /backup/xrdp/"
  },
  {
    "input": "Rename 'yum.log' to 'yum.log.old' in /var/log",
    "output": "mv /var/log/yum.log /var/log/yum.log.old"
  },
  {
    "input": "Move all files in /var/log/zypper.log to /backup/zypper",
    "output": "mv /var/log/zypper.log/* /backup/zypper/"
  },
  {
    "input": "Rename 'lastlog' to 'lastlog.old' in /var/log",
    "output": "mv /var/log/lastlog /var/log/lastlog.old"
  },
  {
    "input": "Move all files in /var/log/messages to /backup/messages",
    "output": "mv /var/log/messages/* /backup/messages/"
  },
  {
    "input": "Rename 'secure' to 'secure.old' in /var/log",
    "output": "mv /var/log/secure /var/log/secure.old"
  },
  {
    "input": "Move all files in /var/log/maillog to /backup/maillog",
    "output": "mv /var/log/maillog/* /backup/maillog/"
  },
  {
    "input": "Rename 'cron' to 'cron.old' in /var/log",
    "output": "mv /var/log/cron /var/log/cron.old"
  },
  {
    "input": "Move all files in /var/log/audit to /backup/audit",
    "output": "mv /var/log/audit/* /backup/audit/"
  },
  {
    "input": "Rename 'btmp' to 'btmp.old' in /var/log",
    "output": "mv /var/log/btmp /var/log/btmp.old"
  },
  {
    "input": "Move all files in /var/log/alternatives.log to /backup/alternatives",
    "output": "mv /var/log/alternatives.log/* /backup/alternatives/"
  },
  {
    "input": "Rename 'history.log' to 'history.log.old' in /var/log/apt",
    "output": "mv /var/log/apt/history.log /var/log/apt/history.log.old"
  },
  {
    "input": "Move all files in /var/log/apt/term.log to /backup/apt-term",
    "output": "mv /var/log/apt/term.log/* /backup/apt-term/"
  },
  {
    "input": "Rename 'boot.log' to 'boot.log.old' in /var/log",
    "output": "mv /var/log/boot.log /var/log/boot.log.old"
  },
  {
    "input": "Move all files in /var/log/dmesg to /backup/dmesg",
    "output": "mv /var/log/dmesg/* /backup/dmesg/"
  },
  {
    "input": "Rename 'fail2ban.log' to 'fail2ban.log.old' in /var/log",
    "output": "mv /var/log/fail2ban.log /var/log/fail2ban.log.old"
  },
  {
    "input": "Move all files in /var/log/fontconfig.log to /backup/fontconfig",
    "output": "mv /var/log/fontconfig.log/* /backup/fontconfig/"
  },
  {
    "input": "Rename 'gpu-manager.log' to 'gpu-manager.log.old' in /var/log",
    "output": "mv /var/log/gpu-manager.log /var/log/gpu-manager.log.old"
  },
  {
    "input": "Move all files in /var/log/hp to /backup/hp",
    "output": "mv /var/log/hp/* /backup/hp/"
  },
  {
    "input": "Rename 'kern.log' to 'kern.log.old' in /var/log",
    "output": "mv /var/log/kern.log /var/log/kern.log.old"
  },
  {
    "input": "Move all files in /var/log/lightdm to /backup/lightdm",
    "output": "mv /var/log/lightdm/* /backup/lightdm/"
  },
  {
    "input": "Rename 'mail.err' to 'mail.err.old' in /var/log",
    "output": "mv /var/log/mail.err /var/log/mail.err.old"
  },
  {
    "input": "Move all files in /var/log/mail.info to /backup/mailinfo",
    "output": "mv /var/log/mail.info/* /backup/mailinfo/"
  },
  {
    "input": "Rename 'mail.log' to 'mail.log.old' in /var/log",
    "output": "mv /var/log/mail.log /var/log/mail.log.old"
  },
  {
    "input": "Move all files in /var/log/mail.warn to /backup/mailwarn",
    "output": "mv /var/log/mail.warn/* /backup/mailwarn/"
  },
  {
    "input": "Rename 'messages' to 'messages.old' in /var/log",
    "output": "mv /var/log/messages /var/log/messages.old"
  },
  {
    "input": "Move all files in /var/log/pm-powersave.log to /backup/pmpowersave",
    "output": "mv /var/log/pm-powersave.log/* /backup/pmpowersave/"
  },
  {
    "input": "Rename 'user.log' to 'user.log.old' in /var/log",
    "output": "mv /var/log/user.log /var/log/user.log.old"
  },
  {
    "input": "Move all files in /var/log/wtmp to /backup/wtmp",
    "output": "mv /var/log/wtmp/* /backup/wtmp/"
  },
  {
    "input": "Rename 'Xorg.0.log' to 'Xorg.0.log.old' in /var/log",
    "output": "mv /var/log/Xorg.0.log /var/log/Xorg.0.log.old"
  },
  {
    "input": "Move all files in /var/log/Xorg.1.log to /backup/xorg1",
    "output": "mv /var/log/Xorg.1.log/* /backup/xorg1/"
  },
  {
    "input": "Rename 'Xorg.failsafe.log' to 'Xorg.failsafe.log.old' in /var/log",
    "output": "mv /var/log/Xorg.failsafe.log /var/log/Xorg.failsafe.log.old"
  },
  {
    "input": "Move all files in /var/tmp to /backup/tmp",
    "output": "mv /var/tmp/* /backup/tmp/"
  },
  {
    "input": "Rename 'test' in the current directory to 'test.old'",
    "output": "mv test test.old"
  },
  {
    "input": "Move all files in the parent directory to the current directory",
    "output": "mv ../* ."
  },
  {
    "input": "Move all files in the /etc directory to /backup/etc",
    "output": "mv /etc/* /backup/etc/"
  },
  {
    "input": "Force move all files in the /opt directory to /backup/opt",
    "output": "mv -f /opt/* /backup/opt/"
  },
  {
    "input": "Move all files in the /srv directory to /backup/srv",
    "output": "mv /srv/* /backup/srv/"
  },
  {
    "input": "Move all files in the /mnt directory to /backup/mnt",
    "output": "mv /mnt/* /backup/mnt/"
  },
  {
    "input": "Move all files in the /media directory to /backup/media",
    "output": "mv /media/* /backup/media/"
  },
  {
    "input": "Recursively move the entire /etc directory to /backup/etc",
    "output": "mv /etc /backup/etc/"
  },
  {
    "input": "Recursively move the /usr/local directory to /backup/usr-local",
    "output": "mv /usr/local /backup/usr-local/"
  },
  {
    "input": "Recursively move the /home/user directory to /backup/home-user",
    "output": "mv /home/user /backup/home-user/"
  },
  {
    "input": "Recursively move the /var directory to /backup/var",
    "output": "mv /var /backup/var/"
  },
  {
    "input": "Recursively move the /opt directory to /backup/opt",
    "output": "mv /opt /backup/opt/"
  },
  {
    "input": "Recursively move the /srv directory to /backup/srv",
    "output": "mv /srv /backup/srv/"
  },
  {
    "input": "Recursively move the /mnt directory to /backup/mnt",
    "output": "mv /mnt /backup/mnt/"
  },
  {
    "input": "Recursively move the /media directory to /backup/media",
    "output": "mv /media /backup/media/"
  },
  {
    "input": "Move all files in the current directory to /tmp and show progress",
    "output": "mv -v * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and do not overwrite existing files",
    "output": "mv -n * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and prompt before overwrite",
    "output": "mv -i * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and force overwrite",
    "output": "mv -f * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep permissions",
    "output": "mv --preserve=mode * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep ownership",
    "output": "mv --preserve=ownership * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep timestamps",
    "output": "mv --preserve=timestamps * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep context",
    "output": "mv --preserve=context * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep xattr",
    "output": "mv --preserve=xattr * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep all attributes",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep everything",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and show progress",
    "output": "mv -v * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and do not overwrite existing files",
    "output": "mv -n * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and prompt before overwrite",
    "output": "mv -i * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and force overwrite",
    "output": "mv -f * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep permissions",
    "output": "mv --preserve=mode * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep ownership",
    "output": "mv --preserve=ownership * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep timestamps",
    "output": "mv --preserve=timestamps * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep context",
    "output": "mv --preserve=context * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep xattr",
    "output": "mv --preserve=xattr * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep all attributes",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep everything",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and show progress",
    "output": "mv -v * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and do not overwrite existing files",
    "output": "mv -n * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and prompt before overwrite",
    "output": "mv -i * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and force overwrite",
    "output": "mv -f * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep permissions",
    "output": "mv --preserve=mode * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep ownership",
    "output": "mv --preserve=ownership * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep timestamps",
    "output": "mv --preserve=timestamps * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep context",
    "output": "mv --preserve=context * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep xattr",
    "output": "mv --preserve=xattr * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep all attributes",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Move all files in the current directory to /tmp and keep everything",
    "output": "mv --preserve=all * /tmp/"
  },
  {
    "input": "Show the full path to the directory you are currently in.",
    "output": "pwd"
  },
  {
    "input": "Print the current working directory, resolving any symbolic links.",
    "output": "pwd -P"
  },
  {
    "input": "Display the logical path of your current directory, including symlinks.",
    "output": "pwd -L"
  },
  {
    "input": "Store the present working directory in a variable called `dir` and print it.",
    "output": "dir=$(pwd); echo $dir"
  },
  {
    "input": "Output the current directory path with a custom message.",
    "output": "echo \"You are in: $(pwd)\""
  },
  {
    "input": "Print the current directory from within a shell script.",
    "output": "#!/bin/bash\necho \"Current dir: $(pwd)\""
  },
  {
    "input": "After changing to `/var/log`, display your location.",
    "output": "cd /var/log && pwd"
  },
  {
    "input": "List the contents of your current directory after showing its path.",
    "output": "pwd && ls"
  },
  {
    "input": "Print the previous working directory.",
    "output": "echo $OLDPWD"
  },
  {
    "input": "Check the version of the `pwd` binary on your system.",
    "output": "/bin/pwd --version"
  },
  {
    "input": "Show help information for the `pwd`.",
    "output": "pwd --help"
  },
  {
    "input": "Use `pwd` in a script to ensure the user is in `/home/user` before proceeding.",
    "output": "if [ $(pwd) != \"/home/user\" ]; then echo \"Please cd to /home/user\"; exit 1; fi"
  },
  {
    "input": "Use `pwd` as part of a `find` to search for `.log` files in your current directory.",
    "output": "find $(pwd) -name \"*.log\""
  },
  {
    "input": "Print the value of the `$PWD` environment variable.",
    "output": "echo $PWD"
  },
  {
    "input": "Use `/bin/pwd` to display your current directory.",
    "output": "/bin/pwd"
  },
  {
    "input": "Show your current directory path, even if you navigated there using a symlink.",
    "output": "pwd -L"
  },
  {
    "input": "Print the physical directory path, ignoring symlinks.",
    "output": "pwd -P"
  },
  {
    "input": "Display your current directory and store it in a variable for later use in a script.",
    "output": "current_dir=$(pwd)"
  },
  {
    "input": "Combine `pwd` with an error message if a directory does not exist.",
    "output": "if [ ! -d \"/some/dir\" ]; then echo \"Not found, current: $(pwd)\"; fi"
  },
  {
    "input": "Use `type -a pwd` to find all locations of the `pwd` executable.",
    "output": "type -a pwd"
  },
  {
    "input": "Show me a detailed, human-readable list of my Pictures folder",
    "output": "ls -lh ~/Pictures"
  },
  {
    "input": "Show the full path to the directory you are currently in.",
    "output": "pwd"
  },
  {
    "input": "Print the current working directory, resolving any symbolic links.",
    "output": "pwd -P"
  },
  {
    "input": "Display the logical path of your current directory, including symlinks.",
    "output": "pwd -L"
  },
  {
    "input": "Store the present working directory in a variable called dir and print it.",
    "output": "dir=$(pwd); echo $dir"
  },
  {
    "input": "Output the current directory path with a custom message.",
    "output": "echo \"You are in: $(pwd)\""
  },
  {
    "input": "Print the current directory from within a shell script.",
    "output": "#!/bin/bash\necho \"Current dir: $(pwd)\""
  },
  {
    "input": "After changing to /var/log, display your location.",
    "output": "cd /var/log && pwd"
  },
  {
    "input": "List the contents of your current directory after showing its path.",
    "output": "pwd && ls"
  },
  {
    "input": "Print the previous working directory.",
    "output": "echo $OLDPWD"
  },
  {
    "input": "Check the version of the pwd binary on your system.",
    "output": "/bin/pwd --version"
  },
  {
    "input": "Show help information for the pwd.",
    "output": "pwd --help"
  },
  {
    "input": "Use pwd in a script to ensure the user is in /home/user before proceeding.",
    "output": "if [ $(pwd) != \"/home/user\" ]; then echo \"Please cd to /home/user\"; exit 1; fi"
  },
  {
    "input": "Use pwd as part of a find to search for .log files in your current directory.",
    "output": "find $(pwd) -name \"*.log\""
  },
  {
    "input": "Print the value of the $PWD environment variable.",
    "output": "echo $PWD"
  },
  {
    "input": "Use /bin/pwd to display your current directory.",
    "output": "/bin/pwd"
  },
  {
    "input": "Show your current directory path, even if you navigated there using a symlink.",
    "output": "pwd -L"
  },
  {
    "input": "Print the physical directory path, ignoring symlinks.",
    "output": "pwd -P"
  },
  {
    "input": "Display your current directory and store it in a variable for later use in a script.",
    "output": "current_dir=$(pwd)"
  },
  {
    "input": "Combine pwd with an error message if a directory does not exist.",
    "output": "if [ ! -d \"/some/dir\" ]; then echo \"Not found, current: $(pwd)\"; fi"
  },
  {
    "input": "Use type -a pwd to find all locations of the pwd executable.",
    "output": "type -a pwd"
  },
  {
    "input": "Delete a file called 'oldfile.txt'",
    "output": "rm oldfile.txt"
  },
  {
    "input": "Remove a file named 'backup.tar.gz' in the current folder",
    "output": "rm backup.tar.gz"
  },
  {
    "input": "Delete all files ending with .log in the current directory",
    "output": "rm *.log"
  },
  {
    "input": "Remove a file called 'notes.txt' in your home directory",
    "output": "rm ~/notes.txt"
  },
  {
    "input": "Delete a file named 'data.csv' in /tmp",
    "output": "rm /tmp/data.csv"
  },
  {
    "input": "Remove a file called 'error.log' inside /var/log",
    "output": "rm /var/log/error.log"
  },
  {
    "input": "Delete multiple files 'file1.txt' and 'file2.txt' at the same time",
    "output": "rm file1.txt file2.txt"
  },
  {
    "input": "Remove all files in the current directory without confirmation",
    "output": "rm -f *"
  },
  {
    "input": "Delete a directory called 'oldfolder' and all its contents recursively",
    "output": "rm -r oldfolder"
  },
  {
    "input": "Force delete a directory named 'backup' and everything inside it",
    "output": "rm -rf backup"
  },
  {
    "input": "Remove a file named 'My File.txt' with spaces in the name",
    "output": "rm 'My File.txt'"
  },
  {
    "input": "Delete all .tmp files in /var/tmp",
    "output": "rm /var/tmp/*.tmp"
  },
  {
    "input": "Remove a hidden file called '.env' in your home",
    "output": "rm ~/.env"
  },
  {
    "input": "Delete a file called 'script.sh' in the current directory",
    "output": "rm script.sh"
  },
  {
    "input": "Remove all files in the Documents folder",
    "output": "rm ~/Documents/*"
  },
  {
    "input": "Delete all files and subdirectories in the 'build' directory",
    "output": "rm -rf build/*"
  },
  {
    "input": "Force delete all files in the Downloads directory",
    "output": "rm -f ~/Downloads/*"
  },
  {
    "input": "Delete a directory called 'testdir' and its contents without prompts",
    "output": "rm -rf testdir"
  },
  {
    "input": "Remove all .jpg files in the Pictures folder",
    "output": "rm ~/Pictures/*.jpg"
  },
  {
    "input": "Delete all files in the current directory that start with 'temp'",
    "output": "rm temp*"
  },
  {
    "input": "Remove a file called 'config.yaml' in /etc",
    "output": "rm /etc/config.yaml"
  },
  {
    "input": "Delete all files in /var/log older than 7 days",
    "output": "find /var/log -type f -mtime +7 -exec rm {} \\;"
  },
  {
    "input": "Force delete a file called 'lockedfile' in /tmp",
    "output": "rm -f /tmp/lockedfile"
  },
  {
    "input": "Remove all files in the /tmp directory recursively",
    "output": "rm -rf /tmp/*"
  },
  {
    "input": "Delete a directory called 'archive' in /opt",
    "output": "rm -r /opt/archive"
  },
  {
    "input": "Remove all files in the Desktop directory",
    "output": "rm ~/Desktop/*"
  },
  {
    "input": "Delete all files in the current directory and subdirectories",
    "output": "rm -rf *"
  },
  {
    "input": "Force delete all files and folders in /var/tmp",
    "output": "rm -rf /var/tmp/*"
  },
  {
    "input": "Remove a file called 'test.log' in the parent directory",
    "output": "rm ../test.log"
  },
  {
    "input": "Delete all .bak files in the current directory",
    "output": "rm *.bak"
  },
  {
    "input": "Remove a file called 'draft.docx' in the Documents folder",
    "output": "rm ~/Documents/draft.docx"
  },
  {
    "input": "Delete all files in /home/user/Downloads",
    "output": "rm /home/user/Downloads/*"
  },
  {
    "input": "Force delete a directory called 'temp' in /tmp",
    "output": "rm -rf /tmp/temp"
  },
  {
    "input": "Remove all files in /var/cache",
    "output": "rm /var/cache/*"
  },
  {
    "input": "Delete a file called 'output.txt' in the current directory",
    "output": "rm output.txt"
  },
  {
    "input": "Remove all files in /usr/local/bin",
    "output": "rm /usr/local/bin/*"
  },
  {
    "input": "Delete a file called 'testfile' in /srv/www",
    "output": "rm /srv/www/testfile"
  },
  {
    "input": "Remove all files in /mnt/usb",
    "output": "rm /mnt/usb/*"
  },
  {
    "input": "Delete a file called 'logfile' in /var/log",
    "output": "rm /var/log/logfile"
  },
  {
    "input": "Remove all files in /var/spool/cron",
    "output": "rm /var/spool/cron/*"
  },
  {
    "input": "Delete a file called 'mail.txt' in /var/mail",
    "output": "rm /var/mail/mail.txt"
  },
  {
    "input": "Remove all files in /var/log/apache2",
    "output": "rm /var/log/apache2/*"
  },
  {
    "input": "Delete a file called 'index.html' in /var/www/html",
    "output": "rm /var/www/html/index.html"
  },
  {
    "input": "Remove all files in /var/log/nginx",
    "output": "rm /var/log/nginx/*"
  },
  {
    "input": "Delete a file called 'db.sqlite3' in the current directory",
    "output": "rm db.sqlite3"
  },
  {
    "input": "Remove all files in /var/log/mysql",
    "output": "rm /var/log/mysql/*"
  },
  {
    "input": "Delete a file called 'access.log' in /var/log",
    "output": "rm /var/log/access.log"
  },
  {
    "input": "Remove all files in /var/log/postgresql",
    "output": "rm /var/log/postgresql/*"
  },
  {
    "input": "Delete a file called 'syslog' in /var/log",
    "output": "rm /var/log/syslog"
  },
  {
    "input": "Remove all files in /var/log/journal",
    "output": "rm /var/log/journal/*"
  },
  {
    "input": "Delete a file called 'kern.log' in /var/log",
    "output": "rm /var/log/kern.log"
  },
  {
    "input": "Remove all files in /var/log/auth",
    "output": "rm /var/log/auth/*"
  },
  {
    "input": "Delete a file called 'apt.log' in /var/log/apt",
    "output": "rm /var/log/apt/apt.log"
  },
  {
    "input": "Remove all files in /var/log/dpkg",
    "output": "rm /var/log/dpkg/*"
  },
  {
    "input": "Delete a file called 'user.log' in /var/log",
    "output": "rm /var/log/user.log"
  },
  {
    "input": "Remove all files in /var/log/installer",
    "output": "rm /var/log/installer/*"
  },
  {
    "input": "Delete a file called 'boot.log' in /var/log",
    "output": "rm /var/log/boot.log"
  },
  {
    "input": "Remove all files in /var/log/fsck",
    "output": "rm /var/log/fsck/*"
  },
  {
    "input": "Delete a file called 'sa.log' in /var/log/sa",
    "output": "rm /var/log/sa/sa.log"
  },
  {
    "input": "Remove all files in /var/log/pm-powersave",
    "output": "rm /var/log/pm-powersave/*"
  },
  {
    "input": "Delete a file called 'aptitude.log' in /var/log/aptitude",
    "output": "rm /var/log/aptitude/aptitude.log"
  },
  {
    "input": "Remove all files in /var/log/unattended-upgrades",
    "output": "rm /var/log/unattended-upgrades/*"
  },
  {
    "input": "Delete a file called 'clamav.log' in /var/log/clamav",
    "output": "rm /var/log/clamav/clamav.log"
  },
  {
    "input": "Remove all files in /var/log/exim4",
    "output": "rm /var/log/exim4/*"
  },
  {
    "input": "Delete a file called 'news.log' in /var/log/news",
    "output": "rm /var/log/news/news.log"
  },
  {
    "input": "Remove all files in /var/log/ppp",
    "output": "rm /var/log/ppp/*"
  },
  {
    "input": "Delete a file called 'samba.log' in /var/log/samba",
    "output": "rm /var/log/samba/samba.log"
  },
  {
    "input": "Remove all files in /var/log/ufw",
    "output": "rm /var/log/ufw/*"
  },
  {
    "input": "Delete a file called 'wtmp' in /var/log",
    "output": "rm /var/log/wtmp"
  },
  {
    "input": "Remove all files in /var/log/xrdp",
    "output": "rm /var/log/xrdp/*"
  },
  {
    "input": "Delete a file called 'yum.log' in /var/log",
    "output": "rm /var/log/yum.log"
  },
  {
    "input": "Remove all files in /var/log/zypper.log",
    "output": "rm /var/log/zypper.log/*"
  },
  {
    "input": "Delete a file called 'lastlog' in /var/log",
    "output": "rm /var/log/lastlog"
  },
  {
    "input": "Remove all files in /var/log/messages",
    "output": "rm /var/log/messages/*"
  },
  {
    "input": "Delete a file called 'secure' in /var/log",
    "output": "rm /var/log/secure"
  },
  {
    "input": "Remove all files in /var/log/maillog",
    "output": "rm /var/log/maillog/*"
  },
  {
    "input": "Delete a file called 'cron' in /var/log",
    "output": "rm /var/log/cron"
  },
  {
    "input": "Remove all files in /var/log/audit",
    "output": "rm /var/log/audit/*"
  },
  {
    "input": "Delete a file called 'btmp' in /var/log",
    "output": "rm /var/log/btmp"
  },
  {
    "input": "Remove all files in /var/log/alternatives.log",
    "output": "rm /var/log/alternatives.log/*"
  },
  {
    "input": "Delete a file called 'history.log' in /var/log/apt",
    "output": "rm /var/log/apt/history.log"
  },
  {
    "input": "Remove all files in /var/log/apt/term.log",
    "output": "rm /var/log/apt/term.log/*"
  },
  {
    "input": "Delete a file called 'boot.log' in /var/log",
    "output": "rm /var/log/boot.log"
  },
  {
    "input": "Remove all files in /var/log/dmesg",
    "output": "rm /var/log/dmesg/*"
  },
  {
    "input": "Delete a file called 'fail2ban.log' in /var/log",
    "output": "rm /var/log/fail2ban.log"
  },
  {
    "input": "Remove all files in /var/log/fontconfig.log",
    "output": "rm /var/log/fontconfig.log/*"
  },
  {
    "input": "Delete a file called 'gpu-manager.log' in /var/log",
    "output": "rm /var/log/gpu-manager.log"
  },
  {
    "input": "Remove all files in /var/log/hp",
    "output": "rm /var/log/hp/*"
  },
  {
    "input": "Delete a file called 'kern.log' in /var/log",
    "output": "rm /var/log/kern.log"
  },
  {
    "input": "Remove all files in /var/log/lightdm",
    "output": "rm /var/log/lightdm/*"
  },
  {
    "input": "Delete a file called 'mail.err' in /var/log",
    "output": "rm /var/log/mail.err"
  },
  {
    "input": "Remove all files in /var/log/mail.info",
    "output": "rm /var/log/mail.info/*"
  },
  {
    "input": "Delete a file called 'mail.log' in /var/log",
    "output": "rm /var/log/mail.log"
  },
  {
    "input": "Remove all files in /var/log/mail.warn",
    "output": "rm /var/log/mail.warn/*"
  },
  {
    "input": "Delete a file called 'messages' in /var/log",
    "output": "rm /var/log/messages"
  },
  {
    "input": "Remove all files in /var/log/pm-powersave.log",
    "output": "rm /var/log/pm-powersave.log/*"
  },
  {
    "input": "Delete a file called 'user.log' in /var/log",
    "output": "rm /var/log/user.log"
  },
  {
    "input": "Remove all files in /var/log/wtmp",
    "output": "rm /var/log/wtmp/*"
  },
  {
    "input": "Delete a file called 'Xorg.0.log' in /var/log",
    "output": "rm /var/log/Xorg.0.log"
  },
  {
    "input": "Remove all files in /var/log/Xorg.1.log",
    "output": "rm /var/log/Xorg.1.log/*"
  },
  {
    "input": "Delete a file called 'Xorg.failsafe.log' in /var/log",
    "output": "rm /var/log/Xorg.failsafe.log"
  },
  {
    "input": "Remove all files in /var/tmp",
    "output": "rm /var/tmp/*"
  },
  {
    "input": "Delete a file called 'test' in the current directory",
    "output": "rm test"
  },
  {
    "input": "Remove all files in the parent directory",
    "output": "rm ../*"
  },
  {
    "input": "Delete all files in the /etc directory",
    "output": "rm /etc/*"
  },
  {
    "input": "Force delete all files in the /opt directory",
    "output": "rm -f /opt/*"
  },
  {
    "input": "Remove all files in the /srv directory",
    "output": "rm /srv/*"
  },
  {
    "input": "Delete all files in the /mnt directory",
    "output": "rm /mnt/*"
  },
  {
    "input": "Remove all files in the /media directory",
    "output": "rm /media/*"
  },
  {
    "input": "Delete an empty directory named 'backup' in the current folder",
    "output": "rmdir backup"
  },
  {
    "input": "Remove the directory '2025_reports' inside Documents if it is empty",
    "output": "rmdir Documents/2025_reports"
  },
  {
    "input": "Delete an empty directory called 'old_logs' in your home directory",
    "output": "rmdir ~/old_logs"
  },
  {
    "input": "Remove an empty directory called 'work' in /tmp",
    "output": "rmdir /tmp/work"
  },
  {
    "input": "Delete an empty directory called 'data' inside /var/log",
    "output": "rmdir /var/log/data"
  },
  {
    "input": "Remove a nested empty directory structure 'a/b/c' in one command",
    "output": "rmdir -p a/b/c"
  },
  {
    "input": "Delete a directory named 'My Files' with spaces in the name if it is empty",
    "output": "rmdir 'My Files'"
  },
  {
    "input": "Remove a hidden empty directory called '.config' in your home",
    "output": "rmdir ~/.config"
  },
  {
    "input": "Delete an empty directory called 'scripts' in the current directory",
    "output": "rmdir scripts"
  },
  {
    "input": "Remove an empty directory named 'photos' in the Pictures folder",
    "output": "rmdir ~/Pictures/photos"
  },
  {
    "input": "Delete an empty directory named 'downloads' in /mnt/usb",
    "output": "rmdir /mnt/usb/downloads"
  },
  {
    "input": "Remove an empty directory named 'archive' in /opt",
    "output": "rmdir /opt/archive"
  },
  {
    "input": "Delete two empty directories called 'logs' and 'tmp' at the same time",
    "output": "rmdir logs tmp"
  },
  {
    "input": "Remove an empty directory called '2025' inside /srv/www",
    "output": "rmdir /srv/www/2025"
  },
  {
    "input": "Delete an empty directory called 'backup_2025' in /var/backups",
    "output": "rmdir /var/backups/backup_2025"
  },
  {
    "input": "Remove an empty directory called 'private' in your home",
    "output": "rmdir ~/private"
  },
  {
    "input": "Delete an empty directory named 'bin' in the parent directory",
    "output": "rmdir ../bin"
  },
  {
    "input": "Remove an empty directory named 'reports' in /home/user/Documents",
    "output": "rmdir /home/user/Documents/reports"
  },
  {
    "input": "Remove a directory called 'testdir' and its parent directories if they become empty",
    "output": "rmdir -p testdir"
  },
  {
    "input": "Delete an empty directory called 'build' in the current directory",
    "output": "rmdir build"
  },
  {
    "input": "Remove a deeply nested empty directory structure '2025/June/18' and all parents if empty",
    "output": "rmdir -p 2025/June/18"
  },
  {
    "input": "Delete an empty directory called 'new_folder' in /etc",
    "output": "rmdir /etc/new_folder"
  },
  {
    "input": "Remove an empty directory called 'cache' in /var",
    "output": "rmdir /var/cache"
  },
  {
    "input": "Delete an empty directory called 'logs' inside /var/log",
    "output": "rmdir /var/log/logs"
  },
  {
    "input": "Remove an empty directory called 'docs' in /usr/share",
    "output": "rmdir /usr/share/docs"
  },
  {
    "input": "Delete an empty directory called 'src' in /usr/local",
    "output": "rmdir /usr/local/src"
  },
  {
    "input": "Remove an empty directory called 'media' in /mnt",
    "output": "rmdir /mnt/media"
  },
  {
    "input": "Delete an empty directory called 'images' in the Desktop directory",
    "output": "rmdir ~/Desktop/images"
  },
  {
    "input": "Remove an empty directory called 'videos' in /media/usb",
    "output": "rmdir /media/usb/videos"
  },
  {
    "input": "Delete an empty directory called 'notes' in your home directory",
    "output": "rmdir ~/notes"
  },
  {
    "input": "Remove an empty directory called 'temp' in /tmp",
    "output": "rmdir /tmp/temp"
  },
  {
    "input": "Delete an empty directory called 'test_logs' in the current directory",
    "output": "rmdir test_logs"
  },
  {
    "input": "Remove an empty directory called 'config' in /etc",
    "output": "rmdir /etc/config"
  },
  {
    "input": "Delete an empty directory called 'public_html' in your home",
    "output": "rmdir ~/public_html"
  },
  {
    "input": "Remove an empty directory called 'dev' in /srv",
    "output": "rmdir /srv/dev"
  },
  {
    "input": "Delete an empty directory called 'lib' in /usr/local",
    "output": "rmdir /usr/local/lib"
  },
  {
    "input": "Remove an empty directory called 'share' in /usr/local",
    "output": "rmdir /usr/local/share"
  },
  {
    "input": "Delete an empty directory called 'docs' in /usr/local/share",
    "output": "rmdir /usr/local/share/docs"
  },
  {
    "input": "Remove an empty directory called 'python3' in /usr/bin",
    "output": "rmdir /usr/bin/python3"
  },
  {
    "input": "Delete an empty directory called 'backup' inside /etc/ssl",
    "output": "rmdir /etc/ssl/backup"
  },
  {
    "input": "Remove an empty directory called 'archive' in /var/mail",
    "output": "rmdir /var/mail/archive"
  },
  {
    "input": "Delete an empty directory called 'logs' in /var/tmp",
    "output": "rmdir /var/tmp/logs"
  },
  {
    "input": "Remove an empty directory called 'monthly' in /var/log/backup",
    "output": "rmdir /var/log/backup/monthly"
  },
  {
    "input": "Delete an empty directory called 'weekly' in /var/log/backup",
    "output": "rmdir /var/log/backup/weekly"
  },
  {
    "input": "Remove an empty directory called 'daily' in /var/log/backup",
    "output": "rmdir /var/log/backup/daily"
  },
  {
    "input": "Delete an empty directory called 'test' in /var/spool",
    "output": "rmdir /var/spool/test"
  },
  {
    "input": "Remove an empty directory called 'queue' in /var/spool",
    "output": "rmdir /var/spool/queue"
  },
  {
    "input": "Delete an empty directory called 'mail' in /var/spool",
    "output": "rmdir /var/spool/mail"
  },
  {
    "input": "Remove an empty directory called 'cron' in /var/spool",
    "output": "rmdir /var/spool/cron"
  },
  {
    "input": "Delete an empty directory called 'jobs' in /var/spool/cron",
    "output": "rmdir /var/spool/cron/jobs"
  },
  {
    "input": "Create an empty file called 'newfile.txt'",
    "output": "touch newfile.txt"
  },
  {
    "input": "Create a file named 'report.pdf' in the current directory",
    "output": "touch report.pdf"
  },
  {
    "input": "Create a file called 'image.jpg' in /tmp",
    "output": "touch /tmp/image.jpg"
  },
  {
    "input": "Create a file named 'data.csv' in /var/log",
    "output": "touch /var/log/data.csv"
  },
  {
    "input": "Create multiple files: 'file1.txt', 'file2.txt', and 'file3.txt'",
    "output": "touch file1.txt file2.txt file3.txt"
  },
  {
    "input": "Create a file named 'My File.txt' with spaces in the name",
    "output": "touch 'My File.txt'"
  },
  {
    "input": "Create a hidden file called '.env' in your home directory",
    "output": "touch ~/.env"
  },
  {
    "input": "Create a file called 'script.sh' in /usr/local/bin",
    "output": "touch /usr/local/bin/script.sh"
  },
  {
    "input": "Create a file named 'notes.txt' on the Desktop",
    "output": "touch ~/Desktop/notes.txt"
  },
  {
    "input": "Create a file called 'config.yaml' in /etc",
    "output": "touch /etc/config.yaml"
  },
  {
    "input": "Create all .log files in the current directory if they don't exist",
    "output": "touch *.log"
  },
  {
    "input": "Create a file called 'archive.tar.gz' in /opt",
    "output": "touch /opt/archive.tar.gz"
  },
  {
    "input": "Create a file called 'draft.docx' in the Documents folder",
    "output": "touch ~/Documents/draft.docx"
  },
  {
    "input": "Create a file called 'output.txt' in the parent directory",
    "output": "touch ../output.txt"
  },
  {
    "input": "Create a file called 'testfile' in /srv/www",
    "output": "touch /srv/www/testfile"
  },
  {
    "input": "Create a file called 'logfile' in /var/log",
    "output": "touch /var/log/logfile"
  },
  {
    "input": "Create a file called 'mail.txt' in /var/mail",
    "output": "touch /var/mail/mail.txt"
  },
  {
    "input": "Create a file called 'index.html' in /var/www/html",
    "output": "touch /var/www/html/index.html"
  },
  {
    "input": "Create a file called 'db.sqlite3' in the current directory",
    "output": "touch db.sqlite3"
  },
  {
    "input": "Create a file called 'access.log' in /var/log",
    "output": "touch /var/log/access.log"
  },
  {
    "input": "Create a file called 'syslog' in /var/log",
    "output": "touch /var/log/syslog"
  },
  {
    "input": "Create a file called 'kern.log' in /var/log",
    "output": "touch /var/log/kern.log"
  },
  {
    "input": "Create a file called 'apt.log' in /var/log/apt",
    "output": "touch /var/log/apt/apt.log"
  },
  {
    "input": "Create a file called 'user.log' in /var/log",
    "output": "touch /var/log/user.log"
  },
  {
    "input": "Create a file called 'boot.log' in /var/log",
    "output": "touch /var/log/boot.log"
  },
  {
    "input": "Create a file called 'sa.log' in /var/log/sa",
    "output": "touch /var/log/sa/sa.log"
  },
  {
    "input": "Create a file called 'aptitude.log' in /var/log/aptitude",
    "output": "touch /var/log/aptitude/aptitude.log"
  },
  {
    "input": "Create a file called 'clamav.log' in /var/log/clamav",
    "output": "touch /var/log/clamav/clamav.log"
  },
  {
    "input": "Create a file called 'news.log' in /var/log/news",
    "output": "touch /var/log/news/news.log"
  },
  {
    "input": "Create a file called 'samba.log' in /var/log/samba",
    "output": "touch /var/log/samba/samba.log"
  },
  {
    "input": "Create a file called 'yum.log' in /var/log",
    "output": "touch /var/log/yum.log"
  },
  {
    "input": "Create a file called 'lastlog' in /var/log",
    "output": "touch /var/log/lastlog"
  },
  {
    "input": "Create a file called 'secure' in /var/log",
    "output": "touch /var/log/secure"
  },
  {
    "input": "Create a file called 'cron' in /var/log",
    "output": "touch /var/log/cron"
  },
  {
    "input": "Create a file called 'btmp' in /var/log",
    "output": "touch /var/log/btmp"
  },
  {
    "input": "Create a file called 'history.log' in /var/log/apt",
    "output": "touch /var/log/apt/history.log"
  },
  {
    "input": "Create a file called 'fail2ban.log' in /var/log",
    "output": "touch /var/log/fail2ban.log"
  },
  {
    "input": "Create a file called 'gpu-manager.log' in /var/log",
    "output": "touch /var/log/gpu-manager.log"
  },
  {
    "input": "Create a file called 'kern.log' in /var/log",
    "output": "touch /var/log/kern.log"
  },
  {
    "input": "Create a file called 'mail.err' in /var/log",
    "output": "touch /var/log/mail.err"
  },
  {
    "input": "Create a file called 'mail.log' in /var/log",
    "output": "touch /var/log/mail.log"
  },
  {
    "input": "Create a file called 'messages' in /var/log",
    "output": "touch /var/log/messages"
  },
  {
    "input": "Create a file called 'user.log' in /var/log",
    "output": "touch /var/log/user.log"
  },
  {
    "input": "Create a file called 'Xorg.0.log' in /var/log",
    "output": "touch /var/log/Xorg.0.log"
  },
  {
    "input": "Create a file called 'Xorg.1.log' in /var/log",
    "output": "touch /var/log/Xorg.1.log"
  },
  {
    "input": "Create a file called 'Xorg.failsafe.log' in /var/log",
    "output": "touch /var/log/Xorg.failsafe.log"
  },
  {
    "input": "Create a file called 'test' in the current directory",
    "output": "touch test"
  },
  {
    "input": "Create a file called 'test' in the parent directory",
    "output": "touch ../test"
  },
  {
    "input": "Create a file called 'test' in /tmp",
    "output": "touch /tmp/test"
  },
  {
    "input": "Create a file called 'test' in /home/alice",
    "output": "touch /home/alice/test"
  },
  {
    "input": "Create a file called 'test' in /home/bob",
    "output": "touch /home/bob/test"
  },
  {
    "input": "Create a file called 'temp' in /home/charlie",
    "output": "touch /home/charlie/temp"
  },
  {
    "input": "Create a file called 'temp' in /home/dave",
    "output": "touch /home/dave/temp"
  },
  {
    "input": "Create a file called 'temp' in /home/erin",
    "output": "touch /home/erin/temp"
  },
  {
    "input": "Create a file called 'temp' in /home/frank",
    "output": "touch /home/frank/temp"
  },
  {
    "input": "Create a file called 'temp' in /home/grace",
    "output": "touch /home/grace/temp"
  },
  {
    "input": "Create a file called 'temp' in /home/harry",
    "output": "touch /home/harry/temp"
  },
  {
    "input": "Create a file called 'workspace' in your home",
    "output": "touch ~/workspace"
  },
  {
    "input": "Create a file called 'builds' in your home",
    "output": "touch ~/builds"
  },
  {
    "input": "Create a file called 'logs' in your home",
    "output": "touch ~/logs"
  },
  {
    "input": "Create a file called 'test_data' in your home",
    "output": "touch ~/test_data"
  },
  {
    "input": "Create a file called 'test_output' in your home",
    "output": "touch ~/test_output"
  },
  {
    "input": "Create a file called 'projects' in your home",
    "output": "touch ~/projects"
  },
  {
    "input": "Create a file called 'archives' in your home",
    "output": "touch ~/archives"
  },
  {
    "input": "Create a file called 'music' in your home",
    "output": "touch ~/music"
  },
  {
    "input": "Create a file called 'videos' in your home",
    "output": "touch ~/videos"
  },
  {
    "input": "Create a file called 'pictures' in your home",
    "output": "touch ~/pictures"
  },
  {
    "input": "Create a file called 'documents' in your home",
    "output": "touch ~/documents"
  },
  {
    "input": "Create a file called 'downloads' in your home",
    "output": "touch ~/downloads"
  },
  {
    "input": "Create a file called 'bin' in your home",
    "output": "touch ~/bin"
  },
  {
    "input": "Create a file called 'src' in your home",
    "output": "touch ~/src"
  },
  {
    "input": "Create a file called 'include' in your home",
    "output": "touch ~/include"
  },
  {
    "input": "Create a file called 'lib' in your home",
    "output": "touch ~/lib"
  },
  {
    "input": "Create a file called 'share' in your home",
    "output": "touch ~/share"
  },
  {
    "input": "Create a file called 'opt' in your home",
    "output": "touch ~/opt"
  },
  {
    "input": "Create a file called 'etc' in your home",
    "output": "touch ~/etc"
  },
  {
    "input": "Create a file called 'var' in your home",
    "output": "touch ~/var"
  },
  {
    "input": "Create a file called 'tmp' in your home",
    "output": "touch ~/tmp"
  },
  {
    "input": "Create a file called 'man' in your home",
    "output": "touch ~/man"
  },
  {
    "input": "Create a file called 'doc' in your home",
    "output": "touch ~/doc"
  },
  {
    "input": "Create a file called 'info' in your home",
    "output": "touch ~/info"
  },
  {
    "input": "Create a file called 'locale' in your home",
    "output": "touch ~/locale"
  },
  {
    "input": "Create a file called 'zoneinfo' in your home",
    "output": "touch ~/zoneinfo"
  },
  {
    "input": "Create a file called 'fonts' in your home",
    "output": "touch ~/fonts"
  },
  {
    "input": "Create a file called 'themes' in your home",
    "output": "touch ~/themes"
  },
  {
    "input": "Create a file called 'icons' in your home",
    "output": "touch ~/icons"
  },
  {
    "input": "Create a file called 'backgrounds' in your home",
    "output": "touch ~/backgrounds"
  },
  {
    "input": "Create a file called 'applications' in your home",
    "output": "touch ~/applications"
  },
  {
    "input": "Create a file called 'sounds' in your home",
    "output": "touch ~/sounds"
  },
  {
    "input": "Create a file called 'pixmaps' in your home",
    "output": "touch ~/pixmaps"
  },
  {
    "input": "Create a file called 'mime' in your home",
    "output": "touch ~/mime"
  },
  {
    "input": "Create a file called 'games' in your home",
    "output": "touch ~/games"
  },
  {
    "input": "Create a file called 'perl5' in your home",
    "output": "touch ~/perl5"
  },
  {
    "input": "Create a file called 'python' in your home",
    "output": "touch ~/python"
  },
  {
    "input": "Create a file called 'texmf' in your home",
    "output": "touch ~/texmf"
  },
  {
    "input": "Create a file called 'emacs' in your home",
    "output": "touch ~/emacs"
  },
  {
    "input": "Create a file called 'doc-base' in your home",
    "output": "touch ~/doc-base"
  },
  {
    "input": "Create a file called 'lintian' in your home",
    "output": "touch ~/lintian"
  },
  {
    "input": "Create a file called 'linda' in your home",
    "output": "touch ~/linda"
  },
  {
    "input": "Create a file called 'locale-langpack' in your home",
    "output": "touch ~/locale-langpack"
  },
  {
    "input": "Create a file called 'Asia' in your home",
    "output": "touch ~/Asia"
  },
  {
    "input": "Create a file called 'Europe' in your home",
    "output": "touch ~/Europe"
  },
  {
    "input": "Create a file called 'America' in your home",
    "output": "touch ~/America"
  },
  {
    "input": "Create a file called 'Africa' in your home",
    "output": "touch ~/Africa"
  },
  {
    "input": "Create a file called 'test' and set its timestamp to Jan 1, 2020",
    "output": "touch -t 202001010000 test"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' log.txt"
  },
  {
    "input": "Update the timestamp of 'existing.txt' to now",
    "output": "touch existing.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next week",
    "output": "touch -d 'next week' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last year",
    "output": "touch -d 'last year' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:34 on June 18, 2025",
    "output": "touch -t 202506181234 file.txt"
  },
  {
    "input": "Create multiple files and set their timestamps to now",
    "output": "touch file1 file2 file3"
  },
  {
    "input": "Update the access time only for 'access.txt'",
    "output": "touch -a access.txt"
  },
  {
    "input": "Update the modification time only for 'mod.txt'",
    "output": "touch -m mod.txt"
  },
  {
    "input": "Create a file called 'special.txt' and set its timestamp to 8:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0800 special.txt"
  },
  {
    "input": "Create a file called 'backup.txt' and set its timestamp to match 'original.txt'",
    "output": "touch -r original.txt backup.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 23:59 on Dec 31, 2024",
    "output": "touch -t 202412312359 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 6:30 PM today",
    "output": "touch -t $(date +%Y%m%d)1830 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:00 on June 18, 2025",
    "output": "touch -t 202506181200 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 7:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0700 log.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next month",
    "output": "touch -d 'next month' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last month",
    "output": "touch -d 'last month' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 00:00 on Jan 1, 2025",
    "output": "touch -t 202501010000 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 11:59 PM today",
    "output": "touch -t $(date +%Y%m%d)2359 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:00 on June 18, 2025",
    "output": "touch -t 202506181200 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 7:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0700 log.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next month",
    "output": "touch -d 'next month' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last month",
    "output": "touch -d 'last month' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 00:00 on Jan 1, 2025",
    "output": "touch -t 202501010000 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 11:59 PM today",
    "output": "touch -t $(date +%Y%m%d)2359 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:00 on June 18, 2025",
    "output": "touch -t 202506181200 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 7:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0700 log.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next month",
    "output": "touch -d 'next month' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last month",
    "output": "touch -d 'last month' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 00:00 on Jan 1, 2025",
    "output": "touch -t 202501010000 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 11:59 PM today",
    "output": "touch -t $(date +%Y%m%d)2359 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:00 on June 18, 2025",
    "output": "touch -t 202506181200 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 7:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0700 log.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next month",
    "output": "touch -d 'next month' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last month",
    "output": "touch -d 'last month' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 00:00 on Jan 1, 2025",
    "output": "touch -t 202501010000 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 11:59 PM today",
    "output": "touch -t $(date +%Y%m%d)2359 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists, do not create new",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 12:00 on June 18, 2025",
    "output": "touch -t 202506181200 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 7:00 AM today",
    "output": "touch -t $(date +%Y%m%d)0700 log.txt"
  },
  {
    "input": "Create a file called 'future.txt' and set its timestamp to next month",
    "output": "touch -d 'next month' future.txt"
  },
  {
    "input": "Create a file called 'past.txt' and set its timestamp to last month",
    "output": "touch -d 'last month' past.txt"
  },
  {
    "input": "Create a file called 'ref.txt' and set its timestamp to match 'source.txt'",
    "output": "touch -r source.txt ref.txt"
  },
  {
    "input": "Create a file called 'no_create.txt' only if it exists",
    "output": "touch -c no_create.txt"
  },
  {
    "input": "Create a file called 'file.txt' and set its timestamp to 00:00 on Jan 1, 2025",
    "output": "touch -t 202501010000 file.txt"
  },
  {
    "input": "Create a file called 'log.txt' and set its timestamp to 11:59 PM today",
    "output": "touch -t $(date +%Y%m%d)2359 log.txt"
  },
  {
    "input": "Create a file called 'yesterday.txt' and set its timestamp to yesterday",
    "output": "touch -d 'yesterday' yesterday.txt"
  },
  {
    "input": "Create a file called 'tomorrow.txt' and set its timestamp to tomorrow",
    "output": "touch -d 'tomorrow' tomorrow.txt"
  },
  {
    "input": "Change group ownership of report.txt to devs",
    "output": "chgrp devs report.txt"
  },
  {
    "input": "Assign the group marketing to campaign.docx",
    "output": "chgrp marketing campaign.docx"
  },
  {
    "input": "Make support the group owner of logs folder",
    "output": "chgrp support logs"
  },
  {
    "input": "Change the group of server.conf to admin",
    "output": "chgrp admin server.conf"
  },
  {
    "input": "Assign finance group to file budget.xlsx",
    "output": "chgrp finance budget.xlsx"
  },
  {
    "input": "Change image.png's group to designers",
    "output": "chgrp designers image.png"
  },
  {
    "input": "Make devops the group for container.yml",
    "output": "chgrp devops container.yml"
  },
  {
    "input": "Set group analysts for data.csv",
    "output": "chgrp analysts data.csv"
  },
  {
    "input": "Assign researchers group to paper.pdf",
    "output": "chgrp researchers paper.pdf"
  },
  {
    "input": "Change group of archive.tar.gz to archive",
    "output": "chgrp archive archive.tar.gz"
  },
  {
    "input": "Assign dev group to app.py",
    "output": "chgrp dev app.py"
  },
  {
    "input": "Make web group owner of index.html",
    "output": "chgrp web index.html"
  },
  {
    "input": "Change backend team group for api.js",
    "output": "chgrp backend api.js"
  },
  {
    "input": "Set group of thesis.tex to students",
    "output": "chgrp students thesis.tex"
  },
  {
    "input": "Assign group HR to employee.db",
    "output": "chgrp HR employee.db"
  },
  {
    "input": "Make test team the group for test_results.txt",
    "output": "chgrp test test_results.txt"
  },
  {
    "input": "Assign system group to boot.log",
    "output": "chgrp system boot.log"
  },
  {
    "input": "Change docs.pdf group to editors",
    "output": "chgrp editors docs.pdf"
  },
  {
    "input": "Set engineering group on build.zip",
    "output": "chgrp engineering build.zip"
  },
  {
    "input": "Make security group for firewall.log",
    "output": "chgrp security firewall.log"
  },
  {
    "input": "Assign logs group to access.log",
    "output": "chgrp logs access.log"
  },
  {
    "input": "Change app logs group to monitoring",
    "output": "chgrp monitoring app.log"
  },
  {
    "input": "Assign cloud group to compute.tf",
    "output": "chgrp cloud compute.tf"
  },
  {
    "input": "Make billing group owner of invoice.csv",
    "output": "chgrp billing invoice.csv"
  },
  {
    "input": "Set ux group for wireframe.fig",
    "output": "chgrp ux wireframe.fig"
  },
  {
    "input": "Assign qa group to testcases.json",
    "output": "chgrp qa testcases.json"
  },
  {
    "input": "Change database team group for config.cnf",
    "output": "chgrp database config.cnf"
  },
  {
    "input": "Make admin group own authorized_keys",
    "output": "chgrp admin authorized_keys"
  },
  {
    "input": "Assign ftp group to upload.txt",
    "output": "chgrp ftp upload.txt"
  },
  {
    "input": "Set storage group to backup.tgz",
    "output": "chgrp storage backup.tgz"
  },
  {
    "input": "Change group for notes.md to writers",
    "output": "chgrp writers notes.md"
  },
  {
    "input": "Make testers the group of regression.sh",
    "output": "chgrp testers regression.sh"
  },
  {
    "input": "Set sales group to forecast.csv",
    "output": "chgrp sales forecast.csv"
  },
  {
    "input": "Assign production group to deploy.sh",
    "output": "chgrp production deploy.sh"
  },
  {
    "input": "Set photographers group to photos.zip",
    "output": "chgrp photographers photos.zip"
  },
  {
    "input": "Change events group to calendar.ics",
    "output": "chgrp events calendar.ics"
  },
  {
    "input": "Assign compliance group to policies.pdf",
    "output": "chgrp compliance policies.pdf"
  },
  {
    "input": "Make CEO group own strategy.txt",
    "output": "chgrp CEO strategy.txt"
  },
  {
    "input": "Set HR group to org_chart.png",
    "output": "chgrp HR org_chart.png"
  },
  {
    "input": "Change owner group to transport for route.csv",
    "output": "chgrp transport route.csv"
  },
  {
    "input": "Assign mailing group to newsletter.eml",
    "output": "chgrp mailing newsletter.eml"
  },
  {
    "input": "Make hr team the group of leave.xls",
    "output": "chgrp hr leave.xls"
  },
  {
    "input": "Assign alumni group to memories.jpg",
    "output": "chgrp alumni memories.jpg"
  },
  {
    "input": "Change finance group to tax_return.pdf",
    "output": "chgrp finance tax_return.pdf"
  },
  {
    "input": "Make editors group for newsletter.pdf",
    "output": "chgrp editors newsletter.pdf"
  },
  {
    "input": "Set safety group to regulations.txt",
    "output": "chgrp safety regulations.txt"
  },
  {
    "input": "Assign students group to enrollment.db",
    "output": "chgrp students enrollment.db"
  },
  {
    "input": "Make developers group for main.cpp",
    "output": "chgrp developers main.cpp"
  },
  {
    "input": "Set group leadteam for dashboard.py",
    "output": "chgrp leadteam dashboard.py"
  },
  {
    "input": "Assign teamA to code.c",
    "output": "chgrp teamA code.c"
  },
  {
    "input": "Change repo group to maintainers",
    "output": "chgrp maintainers repo"
  },
  {
    "input": "Set analysts group for financial_report.pdf",
    "output": "chgrp analysts financial_report.pdf"
  },
  {
    "input": "Change developers group to script.sh",
    "output": "chgrp developers script.sh"
  },
  {
    "input": "Assign interns group to summer_tasks.md",
    "output": "chgrp interns summer_tasks.md"
  },
  {
    "input": "Set designers group for logo.svg",
    "output": "chgrp designers logo.svg"
  },
  {
    "input": "Assign auditors group to compliance_log.txt",
    "output": "chgrp auditors compliance_log.txt"
  },
  {
    "input": "Change marketing group to sales_chart.jpg",
    "output": "chgrp marketing sales_chart.jpg"
  },
  {
    "input": "Make payroll group for salary_data.csv",
    "output": "chgrp payroll salary_data.csv"
  },
  {
    "input": "Set IT group on antivirus.log",
    "output": "chgrp IT antivirus.log"
  },
  {
    "input": "Assign operations group to metrics.json",
    "output": "chgrp operations metrics.json"
  },
  {
    "input": "Change media group for banner.psd",
    "output": "chgrp media banner.psd"
  },
  {
    "input": "Make env group owner of pollution_data.csv",
    "output": "chgrp env pollution_data.csv"
  },
  {
    "input": "Set hr group for attendance.csv",
    "output": "chgrp hr attendance.csv"
  },
  {
    "input": "Assign QA group to checklist.xlsx",
    "output": "chgrp QA checklist.xlsx"
  },
  {
    "input": "Make auditors the group of annual_audit.pdf",
    "output": "chgrp auditors annual_audit.pdf"
  },
  {
    "input": "Change datateam group to stats.py",
    "output": "chgrp datateam stats.py"
  },
  {
    "input": "Set ML group to model.pkl",
    "output": "chgrp ML model.pkl"
  },
  {
    "input": "Assign AI team to inference.py",
    "output": "chgrp AI inference.py"
  },
  {
    "input": "Change moderation group to comments.txt",
    "output": "chgrp moderation comments.txt"
  },
  {
    "input": "Set privacy group on privacy_policy.md",
    "output": "chgrp privacy privacy_policy.md"
  },
  {
    "input": "Assign review group to manuscript.docx",
    "output": "chgrp review manuscript.docx"
  },
  {
    "input": "Set crew group to scene.mov",
    "output": "chgrp crew scene.mov"
  },
  {
    "input": "Make data group for analytics.csv",
    "output": "chgrp data analytics.csv"
  },
  {
    "input": "Assign outreach team to invites.doc",
    "output": "chgrp outreach invites.doc"
  },
  {
    "input": "Set moderators group to forum_rules.txt",
    "output": "chgrp moderators forum_rules.txt"
  },
  {
    "input": "Make security group for encryption.key",
    "output": "chgrp security encryption.key"
  },
  {
    "input": "Assign ui group to layout.sketch",
    "output": "chgrp ui layout.sketch"
  },
  {
    "input": "Change labs group to experiment.txt",
    "output": "chgrp labs experiment.txt"
  },
  {
    "input": "Set students group for syllabus.pdf",
    "output": "chgrp students syllabus.pdf"
  },
  {
    "input": "Make support group for helpdesk.log",
    "output": "chgrp support helpdesk.log"
  },
  {
    "input": "Assign workshop group to tools.json",
    "output": "chgrp workshop tools.json"
  },
  {
    "input": "Change dev group to app_dev.py",
    "output": "chgrp dev app_dev.py"
  },
  {
    "input": "Assign scheduling group to calendar.xlsx",
    "output": "chgrp scheduling calendar.xlsx"
  },
  {
    "input": "Set translators group to translation.txt",
    "output": "chgrp translators translation.txt"
  },
  {
    "input": "Change community group to members.csv",
    "output": "chgrp community members.csv"
  },
  {
    "input": "Assign automation group to script_automation.sh",
    "output": "chgrp automation script_automation.sh"
  },
  {
    "input": "Make firmware group for update.bin",
    "output": "chgrp firmware update.bin"
  },
  {
    "input": "Assign legal team to contract.docx",
    "output": "chgrp legal contract.docx"
  },
  {
    "input": "Change volunteers group to schedule.pdf",
    "output": "chgrp volunteers schedule.pdf"
  },
  {
    "input": "Set guest group to welcome_note.txt",
    "output": "chgrp guest welcome_note.txt"
  },
  {
    "input": "Make teachers group for exam_results.csv",
    "output": "chgrp teachers exam_results.csv"
  },
  {
    "input": "Assign events team to plan.md",
    "output": "chgrp events plan.md"
  },
  {
    "input": "Change translators group to language.txt",
    "output": "chgrp translators language.txt"
  },
  {
    "input": "Set gallery group to artwork.png",
    "output": "chgrp gallery artwork.png"
  },
  {
    "input": "Assign social group to announcement.doc",
    "output": "chgrp social announcement.doc"
  },
  {
    "input": "Change configuration group to setup.yaml",
    "output": "chgrp configuration setup.yaml"
  },
  {
    "input": "Make research group for findings.csv",
    "output": "chgrp research findings.csv"
  },
  {
    "input": "Assign alumni group to photoshoot.jpg",
    "output": "chgrp alumni photoshoot.jpg"
  },
  {
    "input": "Set evaluation team for grading.txt",
    "output": "chgrp evaluation grading.txt"
  },
  {
    "input": "Make database group for export.sql",
    "output": "chgrp database export.sql"
  },
  {
    "input": "Assign deployment group to k8s.yaml",
    "output": "chgrp deployment k8s.yaml"
  },
  {
    "input": "Give execute permission to the file script.sh",
    "output": "chmod +x script.sh"
  },
  {
    "input": "Remove write permission from file.txt",
    "output": "chmod -w file.txt"
  },
  {
    "input": "Set read and write permission for user on myfile",
    "output": "chmod u+rw myfile"
  },
  {
    "input": "Make file1 read-only for everyone",
    "output": "chmod a-wx file1"
  },
  {
    "input": "Allow group to execute test.sh",
    "output": "chmod g+x test.sh"
  },
  {
    "input": "Deny all permissions to others on notes.txt",
    "output": "chmod o-rwx notes.txt"
  },
  {
    "input": "Set permissions to 755 for script.py",
    "output": "chmod 755 script.py"
  },
  {
    "input": "Allow everyone to read and write data.txt",
    "output": "chmod a+rw data.txt"
  },
  {
    "input": "Remove execute permission from owner of file.sh",
    "output": "chmod u-x file.sh"
  },
  {
    "input": "Grant write access to group for log.txt",
    "output": "chmod g+w log.txt"
  },
  {
    "input": "Revoke all permissions from others on private.doc",
    "output": "chmod o= private.doc"
  },
  {
    "input": "Make image.jpg readable and writable only by owner",
    "output": "chmod 600 image.jpg"
  },
  {
    "input": "Set full permissions for user and none for others",
    "output": "chmod 700 secure.sh"
  },
  {
    "input": "Allow everyone to execute install.sh",
    "output": "chmod a+x install.sh"
  },
  {
    "input": "Remove group read access from file.csv",
    "output": "chmod g-r file.csv"
  },
  {
    "input": "Assign 644 permissions to file.txt",
    "output": "chmod 644 file.txt"
  },
  {
    "input": "Give only read access to everyone on readme.md",
    "output": "chmod a=r readme.md"
  },
  {
    "input": "Make all shell scripts executable",
    "output": "chmod +x *.sh"
  },
  {
    "input": "Remove execute from all users on binfile",
    "output": "chmod a-x binfile"
  },
  {
    "input": "Give read and execute access to group",
    "output": "chmod g+rx target"
  },
  {
    "input": "Give owner full access to report.doc",
    "output": "chmod u+rwx report.doc"
  },
  {
    "input": "Set file.txt to 444",
    "output": "chmod 444 file.txt"
  },
  {
    "input": "Make main.py readable only",
    "output": "chmod 400 main.py"
  },
  {
    "input": "Add write permission for others",
    "output": "chmod o+w public.txt"
  },
  {
    "input": "Grant read/write to user and group",
    "output": "chmod ug+rw sample"
  },
  {
    "input": "Remove write access from group and others",
    "output": "chmod go-w config.cfg"
  },
  {
    "input": "Set permission to 777 for access.txt",
    "output": "chmod 777 access.txt"
  },
  {
    "input": "Set permission to 640 for secret.txt",
    "output": "chmod 640 secret.txt"
  },
  {
    "input": "Revoke all permissions from everyone on lock.file",
    "output": "chmod 000 lock.file"
  },
  {
    "input": "Make all files in current directory executable",
    "output": "chmod +x *"
  },
  {
    "input": "Add execute permission to group",
    "output": "chmod g+x tool"
  },
  {
    "input": "Remove read access from user",
    "output": "chmod u-r hidden.txt"
  },
  {
    "input": "Grant read/write to group only",
    "output": "chmod 020 groupfile"
  },
  {
    "input": "Change directory permission to 755",
    "output": "chmod 755 mydir"
  },
  {
    "input": "Make backup.tar.gz not accessible by others",
    "output": "chmod o= backup.tar.gz"
  },
  {
    "input": "Allow others to read and write output.log",
    "output": "chmod o+rw output.log"
  },
  {
    "input": "Set permission to 666 on open_file.txt",
    "output": "chmod 666 open_file.txt"
  },
  {
    "input": "Give all permissions to all users",
    "output": "chmod a+rwx universal.sh"
  },
  {
    "input": "Restrict file.log to read-only by owner",
    "output": "chmod 400 file.log"
  },
  {
    "input": "Allow only owner to read and write",
    "output": "chmod 600 doc"
  },
  {
    "input": "Add execute to user and group",
    "output": "chmod ug+x runme"
  },
  {
    "input": "Revoke write access from all",
    "output": "chmod a-w anyfile"
  },
  {
    "input": "Remove read permission from everyone",
    "output": "chmod a-r data"
  },
  {
    "input": "Set mode 755 to all .sh files",
    "output": "chmod 755 *.sh"
  },
  {
    "input": "Set permissions recursively to 644",
    "output": "chmod -R 644 folder"
  },
  {
    "input": "Allow read for others",
    "output": "chmod o+r view.txt"
  },
  {
    "input": "Set permission to 711 for user access",
    "output": "chmod 711 run"
  },
  {
    "input": "Remove group permissions",
    "output": "chmod g= file"
  },
  {
    "input": "Give execute to all and remove write",
    "output": "chmod a+x-w script.sh"
  },
  {
    "input": "Apply 755 on a directory recursively",
    "output": "chmod -R 755 /srv/www"
  },
  {
    "input": "Make notes readable by group and user",
    "output": "chmod ug+r notes"
  },
  {
    "input": "Add all permissions to user only",
    "output": "chmod u+rwx file1"
  },
  {
    "input": "Grant execute permission to file hello.sh",
    "output": "chmod +x hello.sh"
  },
  {
    "input": "Remove all permissions from config.yml",
    "output": "chmod 000 config.yml"
  },
  {
    "input": "Set read-only permission for all users on notice.txt",
    "output": "chmod 444 notice.txt"
  },
  {
    "input": "Add execute permission for the owner to run.py",
    "output": "chmod u+x run.py"
  },
  {
    "input": "Make file confidential.txt accessible to user and group",
    "output": "chmod 660 confidential.txt"
  },
  {
    "input": "Allow group to read and write to access.log",
    "output": "chmod g+rw access.log"
  },
  {
    "input": "Revoke execute permission from all on update.sh",
    "output": "chmod a-x update.sh"
  },
  {
    "input": "Assign read permission to everyone on changelog.md",
    "output": "chmod a+r changelog.md"
  },
  {
    "input": "Give full permission to the owner on config.ini",
    "output": "chmod u+rwx config.ini"
  },
  {
    "input": "Make setup.sh executable only by group",
    "output": "chmod 010 setup.sh"
  },
  {
    "input": "Make sure only user has read/write access to login.cfg",
    "output": "chmod 600 login.cfg"
  },
  {
    "input": "Allow group and others to execute service.sh",
    "output": "chmod go+x service.sh"
  },
  {
    "input": "Remove write access from everyone on system.log",
    "output": "chmod a-w system.log"
  },
  {
    "input": "Assign read and execute permissions to everyone on index.html",
    "output": "chmod a+rx index.html"
  },
  {
    "input": "Revoke read access from group for app.py",
    "output": "chmod g-r app.py"
  },
  {
    "input": "Allow only group to execute audit.sh",
    "output": "chmod 010 audit.sh"
  },
  {
    "input": "Give user and group execute permissions on backup.sh",
    "output": "chmod ug+x backup.sh"
  },
  {
    "input": "Remove all access from others to archive.tar.gz",
    "output": "chmod o= archive.tar.gz"
  },
  {
    "input": "Set permission 755 for run.sh",
    "output": "chmod 755 run.sh"
  },
  {
    "input": "Allow only group to write to message.txt",
    "output": "chmod 020 message.txt"
  },
  {
    "input": "Give full permissions to all users on launch.sh",
    "output": "chmod 777 launch.sh"
  },
  {
    "input": "Allow read and execute for others on script.js",
    "output": "chmod o+rx script.js"
  },
  {
    "input": "Assign permission 750 to deploy.sh",
    "output": "chmod 750 deploy.sh"
  },
  {
    "input": "Remove read and write access from user on test.txt",
    "output": "chmod u-rw test.txt"
  },
  {
    "input": "Give execute access to group on bin/app",
    "output": "chmod g+x bin/app"
  },
  {
    "input": "Set full access for user and group, none for others",
    "output": "chmod 770 code.py"
  },
  {
    "input": "Grant all permissions to user and none to others on data.bin",
    "output": "chmod 700 data.bin"
  },
  {
    "input": "Make all text files read-only",
    "output": "chmod a-w *.txt"
  },
  {
    "input": "Set execute permission for all shell scripts",
    "output": "chmod +x *.sh"
  },
  {
    "input": "Grant write to group on dev.env",
    "output": "chmod g+w dev.env"
  },
  {
    "input": "Remove write permission from others on view.png",
    "output": "chmod o-w view.png"
  },
  {
    "input": "Grant read to others for changelog.txt",
    "output": "chmod o+r changelog.txt"
  },
  {
    "input": "Remove read/write access from others",
    "output": "chmod o-rw shared.doc"
  },
  {
    "input": "Grant all to group and user",
    "output": "chmod ug+rwx template.txt"
  },
  {
    "input": "Only allow execute to user",
    "output": "chmod 100 test.sh"
  },
  {
    "input": "Remove all permissions from others on logs",
    "output": "chmod o= logs"
  },
  {
    "input": "Set 755 recursively on /opt/scripts",
    "output": "chmod -R 755 /opt/scripts"
  },
  {
    "input": "Give everyone read and execute permission on start.sh",
    "output": "chmod a+rx start.sh"
  },
  {
    "input": "Remove execute from user and group",
    "output": "chmod ug-x exec.sh"
  },
  {
    "input": "Assign permission 640 to input.csv",
    "output": "chmod 640 input.csv"
  },
  {
    "input": "Allow read for group and others",
    "output": "chmod go+r note.txt"
  },
  {
    "input": "Remove all permissions from group",
    "output": "chmod g= filename"
  },
  {
    "input": "Revoke read from all",
    "output": "chmod a-r secret.txt"
  },
  {
    "input": "Assign 600 to a config file",
    "output": "chmod 600 config.json"
  },
  {
    "input": "Give all permissions to user, execute only to group",
    "output": "chmod 710 service"
  },
  {
    "input": "Set mode 644 for webpage.html",
    "output": "chmod 644 webpage.html"
  },
  {
    "input": "Deny all permissions on backup.img",
    "output": "chmod 000 backup.img"
  },
  {
    "input": "Allow group write and execute on script.py",
    "output": "chmod g+wx script.py"
  },
  {
    "input": "Allow only owner to execute",
    "output": "chmod 100 task.sh"
  },
  {
    "input": "Grant read to user and others",
    "output": "chmod uo+r info.txt"
  },
  {
    "input": "Change ownership of file.txt to user1",
    "output": "chown user1 file.txt"
  },
  {
    "input": "Set user1 as the owner of script.sh",
    "output": "chown user1 script.sh"
  },
  {
    "input": "Assign ownership of folder to john",
    "output": "chown john folder"
  },
  {
    "input": "Change owner to alice for app.py",
    "output": "chown alice app.py"
  },
  {
    "input": "Set bob as the owner for /var/log/syslog",
    "output": "chown bob /var/log/syslog"
  },
  {
    "input": "Assign ownership of images to user mark",
    "output": "chown mark images"
  },
  {
    "input": "Make user1 the owner of project folder",
    "output": "chown user1 project"
  },
  {
    "input": "Set david as new owner for config.ini",
    "output": "chown david config.ini"
  },
  {
    "input": "Assign user2 ownership of notes.txt",
    "output": "chown user2 notes.txt"
  },
  {
    "input": "Change owner of result.csv to sam",
    "output": "chown sam result.csv"
  },
  {
    "input": "Make jane the owner of all .log files",
    "output": "chown jane *.log"
  },
  {
    "input": "Set ownership of /etc/hosts to user alex",
    "output": "chown alex /etc/hosts"
  },
  {
    "input": "Assign tom as the owner of image.png",
    "output": "chown tom image.png"
  },
  {
    "input": "Give john ownership of audio.mp3",
    "output": "chown john audio.mp3"
  },
  {
    "input": "Change folder1's owner to user5",
    "output": "chown user5 folder1"
  },
  {
    "input": "Assign user6 ownership of backup.tar.gz",
    "output": "chown user6 backup.tar.gz"
  },
  {
    "input": "Change ownership of www directory to apache",
    "output": "chown apache www"
  },
  {
    "input": "Assign user7 ownership to /usr/bin/custom",
    "output": "chown user7 /usr/bin/custom"
  },
  {
    "input": "Make daniel the owner of setup.py",
    "output": "chown daniel setup.py"
  },
  {
    "input": "Give sara ownership of /home/sara",
    "output": "chown sara /home/sara"
  },
  {
    "input": "Set user8 as the new owner for test.sql",
    "output": "chown user8 test.sql"
  },
  {
    "input": "Assign owner of file1.txt to user9",
    "output": "chown user9 file1.txt"
  },
  {
    "input": "Make admin the owner of admin.log",
    "output": "chown admin admin.log"
  },
  {
    "input": "Set root as owner for boot files",
    "output": "chown root /boot/*"
  },
  {
    "input": "Assign user10 ownership of tasks.csv",
    "output": "chown user10 tasks.csv"
  },
  {
    "input": "Change owner to webmaster for /var/www/html",
    "output": "chown webmaster /var/www/html"
  },
  {
    "input": "Make user11 owner of journal.pdf",
    "output": "chown user11 journal.pdf"
  },
  {
    "input": "Give user12 ownership of settings.conf",
    "output": "chown user12 settings.conf"
  },
  {
    "input": "Set control as owner of router.cfg",
    "output": "chown control router.cfg"
  },
  {
    "input": "Assign ownership of video.mp4 to michael",
    "output": "chown michael video.mp4"
  },
  {
    "input": "Set user13 as new owner for payroll.xlsx",
    "output": "chown user13 payroll.xlsx"
  },
  {
    "input": "Give bob full ownership of work folder",
    "output": "chown bob work"
  },
  {
    "input": "Set ownership of /opt/tools to devuser",
    "output": "chown devuser /opt/tools"
  },
  {
    "input": "Assign developer as owner of main.cpp",
    "output": "chown developer main.cpp"
  },
  {
    "input": "Change /etc/passwd ownership to sysadmin",
    "output": "chown sysadmin /etc/passwd"
  },
  {
    "input": "Set ownership of install.log to root",
    "output": "chown root install.log"
  },
  {
    "input": "Change owner of home directory to newuser",
    "output": "chown newuser /home/newuser"
  },
  {
    "input": "Assign ownership to user14 on system.log",
    "output": "chown user14 system.log"
  },
  {
    "input": "Set manager as owner of report.pdf",
    "output": "chown manager report.pdf"
  },
  {
    "input": "Change document.docx owner to linda",
    "output": "chown linda document.docx"
  },
  {
    "input": "Set eric as owner of email.eml",
    "output": "chown eric email.eml"
  },
  {
    "input": "Assign support ownership of ticket.log",
    "output": "chown support ticket.log"
  },
  {
    "input": "Assign chris to own all files in /data",
    "output": "chown chris /data/*"
  },
  {
    "input": "Give root ownership of grub.cfg",
    "output": "chown root grub.cfg"
  },
  {
    "input": "Make user15 the owner of test folder",
    "output": "chown user15 test"
  },
  {
    "input": "Change owner to devops on logs.txt",
    "output": "chown devops logs.txt"
  },
  {
    "input": "Assign datauser ownership of finance.db",
    "output": "chown datauser finance.db"
  },
  {
    "input": "Change owner of mount directory to mounter",
    "output": "chown mounter /mnt"
  },
  {
    "input": "Make audit the owner of access.log",
    "output": "chown audit access.log"
  },
  {
    "input": "Change ownership of folder docs to user16",
    "output": "chown user16 docs"
  },
  {
    "input": "Make carol the owner of myfile.txt",
    "output": "chown carol myfile.txt"
  },
  {
    "input": "Assign ownership of script.sh to sysuser",
    "output": "chown sysuser script.sh"
  },
  {
    "input": "Change owner of archive.zip to archivist",
    "output": "chown archivist archive.zip"
  },
  {
    "input": "Set frank as owner of results.json",
    "output": "chown frank results.json"
  },
  {
    "input": "Assign user17 to own the build folder",
    "output": "chown user17 build"
  },
  {
    "input": "Give permissions of data.csv to user18",
    "output": "chown user18 data.csv"
  },
  {
    "input": "Make owner of image.jpg as user19",
    "output": "chown user19 image.jpg"
  },
  {
    "input": "Assign user20 to config.js file",
    "output": "chown user20 config.js"
  },
  {
    "input": "Set tim as new owner of resume.pdf",
    "output": "chown tim resume.pdf"
  },
  {
    "input": "Change report.csv's owner to manager",
    "output": "chown manager report.csv"
  },
  {
    "input": "Set claire as owner for workspace folder",
    "output": "chown claire workspace"
  },
  {
    "input": "Assign user21 to documents.zip",
    "output": "chown user21 documents.zip"
  },
  {
    "input": "Change file.txt ownership to coder",
    "output": "chown coder file.txt"
  },
  {
    "input": "Make user22 the owner of run.sh",
    "output": "chown user22 run.sh"
  },
  {
    "input": "Assign user23 ownership of image folder",
    "output": "chown user23 image"
  },
  {
    "input": "Change user24 as owner of notes.md",
    "output": "chown user24 notes.md"
  },
  {
    "input": "Set timothy as new owner of book.pdf",
    "output": "chown timothy book.pdf"
  },
  {
    "input": "Give user25 ownership of scripts folder",
    "output": "chown user25 scripts"
  },
  {
    "input": "Make helen the owner of audio.wav",
    "output": "chown helen audio.wav"
  },
  {
    "input": "Set nancy as owner for project directory",
    "output": "chown nancy project"
  },
  {
    "input": "Assign patrick ownership of db.sqlite",
    "output": "chown patrick db.sqlite"
  },
  {
    "input": "Change pictures folder owner to user26",
    "output": "chown user26 pictures"
  },
  {
    "input": "Make vikas the new owner of temp files",
    "output": "chown vikas temp/*"
  },
  {
    "input": "Assign ownership of settings.ini to adminuser",
    "output": "chown adminuser settings.ini"
  },
  {
    "input": "Change owner of game.log to gamer",
    "output": "chown gamer game.log"
  },
  {
    "input": "Make user27 the owner of index.html",
    "output": "chown user27 index.html"
  },
  {
    "input": "Assign devops ownership of docker-compose.yml",
    "output": "chown devops docker-compose.yml"
  },
  {
    "input": "Give editor full control of article.docx",
    "output": "chown editor article.docx"
  },
  {
    "input": "Change logs folder to be owned by loguser",
    "output": "chown loguser logs"
  },
  {
    "input": "Assign user28 as the owner of project1",
    "output": "chown user28 project1"
  },
  {
    "input": "Make kate the owner of thesis.tex",
    "output": "chown kate thesis.tex"
  },
  {
    "input": "Set sara as owner for personal.doc",
    "output": "chown sara personal.doc"
  },
  {
    "input": "Assign finance team user to report_final.pdf",
    "output": "chown finance report_final.pdf"
  },
  {
    "input": "Make user29 the owner of folderA",
    "output": "chown user29 folderA"
  },
  {
    "input": "Change ownership of cloud.txt to clouduser",
    "output": "chown clouduser cloud.txt"
  },
  {
    "input": "Assign dev as the owner of codebase.zip",
    "output": "chown dev codebase.zip"
  },
  {
    "input": "Give project manager ownership of roadmap.pdf",
    "output": "chown manager roadmap.pdf"
  },
  {
    "input": "Make root the owner of cron jobs",
    "output": "chown root /etc/cron*"
  },
  {
    "input": "Set database user to own mysql.cnf",
    "output": "chown dbuser mysql.cnf"
  },
  {
    "input": "Change ownership of blog.html to webuser",
    "output": "chown webuser blog.html"
  },
  {
    "input": "Make mary the owner of slides.pptx",
    "output": "chown mary slides.pptx"
  },
  {
    "input": "Assign design lead ownership of logo.svg",
    "output": "chown designer logo.svg"
  },
  {
    "input": "Set itadmin as owner for secure.log",
    "output": "chown itadmin secure.log"
  },
  {
    "input": "Give user30 access to manage firewall.conf",
    "output": "chown user30 firewall.conf"
  },
  {
    "input": "Assign tommy to own nginx.conf",
    "output": "chown tommy nginx.conf"
  },
  {
    "input": "Change backup.sql owner to backupuser",
    "output": "chown backupuser backup.sql"
  },
  {
    "input": "Make logs folder belong to syslog user",
    "output": "chown syslog logs"
  },
  {
    "input": "Set rita as the new owner of debug.log",
    "output": "chown rita debug.log"
  },
  {
    "input": "Display contents of a file",
    "output": "cat file.txt"
  },
  {
    "input": "Concatenate two files",
    "output": "cat file1.txt file2.txt"
  },
  {
    "input": "Create a new file from standard input",
    "output": "cat > newfile.txt"
  },
  {
    "input": "Append standard input to an existing file",
    "output": "cat >> existing.txt"
  },
  {
    "input": "Number all output lines",
    "output": "cat -n file.txt"
  },
  {
    "input": "Number non-blank output lines only",
    "output": "cat -b file.txt"
  },
  {
    "input": "Squeeze multiple adjacent blank lines",
    "output": "cat -s file.txt"
  },
  {
    "input": "Show \"$\" at end of each line",
    "output": "cat -E file.txt"
  },
  {
    "input": "Display tabs as ^I",
    "output": "cat -T file.txt"
  },
  {
    "input": "Show non-printing characters",
    "output": "cat -v file.txt"
  },
  {
    "input": "Redirect a file’s contents to another file",
    "output": "cat file.txt > output.txt"
  },
  {
    "input": "Read from stdin instead of filename",
    "output": "cat < file.txt"
  },
  {
    "input": "Pipe through grep",
    "output": "cat file.txt | grep pattern"
  },
  {
    "input": "Count lines via wc",
    "output": "cat file.txt | wc -l"
  },
  {
    "input": "Extract first field via cut",
    "output": "cat file.csv | cut -d',' -f1"
  },
  {
    "input": "Transform lowercase to uppercase",
    "output": "cat file.txt | tr 'a-z' 'A-Z'"
  },
  {
    "input": "Compress concatenated output",
    "output": "cat file1 file2 | gzip > combined.gz"
  },
  {
    "input": "View with less",
    "output": "cat file.txt | less"
  },
  {
    "input": "Duplicate output via tee",
    "output": "cat file.txt | tee copy.txt"
  },
  {
    "input": "Concatenate outputs of commands",
    "output": "cat <(echo line1) <(echo line2)"
  },
  {
    "input": "Merge directory listings",
    "output": "cat <(ls /etc) <(ls /usr)"
  },
  {
    "input": "View CPU info",
    "output": "cat /proc/cpuinfo"
  },
  {
    "input": "View memory info",
    "output": "cat /proc/meminfo"
  },
  {
    "input": "View kernel version",
    "output": "cat /proc/version"
  },
  {
    "input": "View MAC address",
    "output": "cat /sys/class/net/eth0/address"
  },
  {
    "input": "View interface speed",
    "output": "cat /sys/class/net/eth0/speed"
  },
  {
    "input": "Concatenate all .txt files",
    "output": "cat *.txt"
  },
  {
    "input": "Concatenate numbered file range",
    "output": "cat file{1..5}.txt"
  },
  {
    "input": "Generate 16 random bytes",
    "output": "cat /dev/urandom | head -c 16"
  },
  {
    "input": "Merge binary files",
    "output": "cat file1.bin file2.bin > combined.bin"
  },
  {
    "input": "Pipeline to tar extraction",
    "output": "cat archive.tar.gz | tar xz"
  },
  {
    "input": "Checksum concatenated output",
    "output": "cat file.txt | md5sum"
  },
  {
    "input": "Reverse file line order",
    "output": "tac file.txt"
  },
  {
    "input": "Convert tabs to spaces",
    "output": "cat file.txt | expand"
  },
  {
    "input": "Convert spaces to tabs",
    "output": "cat file.txt | unexpand"
  },
  {
    "input": "Align columns",
    "output": "cat file.txt | column -t"
  },
  {
    "input": "Print Hello",
    "output": "echo \"Hello\""
  },
  {
    "input": "Print Hello without newline",
    "output": "echo -n \"Hello\""
  },
  {
    "input": "Print with escape sequences",
    "output": "echo -e \"Line1\\nLine2\""
  },
  {
    "input": "Print variable value",
    "output": "echo \"$HOME\""
  },
  {
    "input": "Print multiple variables",
    "output": "echo \"$USER@$HOSTNAME\""
  },
  {
    "input": "Redirect output to file",
    "output": "echo \"Hello\" > file.txt"
  },
  {
    "input": "Append output to file",
    "output": "echo \"World\" >> file.txt"
  },
  {
    "input": "Print tab",
    "output": "echo -e \"Column1\\tColumn2\""
  },
  {
    "input": "Print backslash",
    "output": "echo -e \"Path: C:\\\\Windows\""
  },
  {
    "input": "Print single quotes",
    "output": "echo \"It's working\""
  },
  {
    "input": "Print double quotes",
    "output": "echo 'He said \"Hello\"'"
  },
  {
    "input": "Print environment variables",
    "output": "echo \"PATH=$PATH\""
  },
  {
    "input": "Print date in script",
    "output": "echo \"Today is $(date)\""
  },
  {
    "input": "Print command output",
    "output": "echo \"Users: $(who)\""
  },
  {
    "input": "Print today’s user count",
    "output": "echo \"Logged in: $(who | wc -l) users\""
  },
  {
    "input": "Print in background",
    "output": "echo \"Hello\" &"
  },
  {
    "input": "Print exit status",
    "output": "echo \"Exit status: $?\""
  },
  {
    "input": "Print with printf formatting",
    "output": "printf \"%s\\n\" \"Hello\""
  },
  {
    "input": "Print JSON snippet",
    "output": "echo '{\"key\":\"value\"}'"
  },
  {
    "input": "Print XML snippet",
    "output": "echo '<tag>value</tag>'"
  },
  {
    "input": "Print YAML snippet",
    "output": "echo \"key: value\""
  },
  {
    "input": "Print multi-line text",
    "output": "echo -e \"Line1\\nLine2\\nLine3\""
  },
  {
    "input": "Print file path",
    "output": "echo \"File is located at $PWD/file.txt\""
  },
  {
    "input": "Print script name",
    "output": "echo \"Script: $0\""
  },
  {
    "input": "Print random number",
    "output": "echo $RANDOM"
  },
  {
    "input": "Print current PID",
    "output": "echo $$"
  },
  {
    "input": "Print parent PID",
    "output": "echo $PPID"
  },
  {
    "input": "Print process list",
    "output": "echo \"$(ps)\""
  },
  {
    "input": "Print uptime",
    "output": "echo \"Uptime: $(uptime -p)\""
  },
  {
    "input": "Print disk usage",
    "output": "echo \"Disk: $(df -h /)\""
  },
  {
    "input": "Print memory usage",
    "output": "echo \"Mem: $(free -h)\""
  },
  {
    "input": "Print kernel version",
    "output": "echo \"Kernel: $(uname -r)\""
  },
  {
    "input": "Print shell path",
    "output": "echo \"$SHELL\""
  },
  {
    "input": "Print home directory",
    "output": "echo \"$HOME\""
  },
  {
    "input": "Print IFS variable",
    "output": "echo \"$IFS\""
  },
  {
    "input": "Print all positional parameters",
    "output": "echo \"$@\""
  },
  {
    "input": "Print all positional parameters as single string",
    "output": "echo \"$*\""
  },
  {
    "input": "Print last argument",
    "output": "echo \"${!#}\""
  },
  {
    "input": "Print host IPs",
    "output": "echo \"$(hostname -I)\""
  },
  {
    "input": "Print local time only",
    "output": "echo \"$(date +%T)\""
  },
  {
    "input": "Print custom date format",
    "output": "echo \"$(date +%Y-%m-%d)\""
  },
  {
    "input": "Open file in vim",
    "output": "vim file.txt"
  },
  {
    "input": "Open file at specific line",
    "output": "vim +100 file.txt"
  },
  {
    "input": "Open file at line and column",
    "output": "vim +call cursor(100,5) file.txt"
  },
  {
    "input": "Start vim in read-only mode",
    "output": "vim -R file.txt"
  },
  {
    "input": "Open vim in compatible mode",
    "output": "vim -C file.txt"
  },
  {
    "input": "Disable swap file creation",
    "output": "vim -n file.txt"
  },
  {
    "input": "Ignore viminfo file",
    "output": "vim -i NONE file.txt"
  },
  {
    "input": "Start vim with no plugins",
    "output": "vim -u NONE file.txt"
  },
  {
    "input": "Start vim with minimal vimrc",
    "output": "vim -u NORC file.txt"
  },
  {
    "input": "Start vim in silent mode",
    "output": "vim -es file.txt"
  },
  {
    "input": "Start vim in Ex mode",
    "output": "vim -e file.txt"
  },
  {
    "input": "Start vim with GUI disabled",
    "output": "vim -X file.txt"
  },
  {
    "input": "Start vim and execute command",
    "output": "vim +':%s/foo/bar/g' +wq file.txt"
  },
  {
    "input": "Open file and set syntax highlighting",
    "output": "vim -c 'syntax on' file.txt"
  },
  {
    "input": "Open file and set line numbers",
    "output": "vim -c 'set number' file.txt"
  },
  {
    "input": "Open file and enable mouse",
    "output": "vim -c 'set mouse=a' file.txt"
  },
  {
    "input": "Open file and start in insert mode",
    "output": "vim +startinsert file.txt"
  },
  {
    "input": "Open file and go to last edit position",
    "output": "vim +lastfile file.txt"
  },
  {
    "input": "Open file and record session",
    "output": "vim -S session.vim file.txt"
  },
  {
    "input": "Open file and source vimrc",
    "output": "vim -u ~/.vimrc file.txt"
  },
  {
    "input": "Open multiple files in tabs",
    "output": "vim -p file1.txt file2.txt"
  },
  {
    "input": "Open multiple files in windows",
    "output": "vim -o file1.txt file2.txt"
  },
  {
    "input": "Open multiple files in vertical splits",
    "output": "vim -O file1.txt file2.txt"
  },
  {
    "input": "Open vim with custom encoding",
    "output": "vim +'set fileencoding=utf-8' file.txt"
  },
  {
    "input": "Open file and highlight search matches",
    "output": "vim -c 'set hlsearch' file.txt"
  },
  {
    "input": "Open file and disable swapfile",
    "output": "vim -n file.txt"
  },
  {
    "input": "Open file with folding enabled",
    "output": "vim -c 'set foldmethod=indent' file.txt"
  },
  {
    "input": "Open file and set tabstop=4",
    "output": "vim -c 'set tabstop=4' file.txt"
  },
  {
    "input": "Open file and set shiftwidth=4",
    "output": "vim -c 'set shiftwidth=4' file.txt"
  },
  {
    "input": "Open file and expand tabs",
    "output": "vim -c 'set expandtab' file.txt"
  },
  {
    "input": "Open file and set smartindent",
    "output": "vim -c 'set smartindent' file.txt"
  },
  {
    "input": "Open file and set autoindent",
    "output": "vim -c 'set autoindent' file.txt"
  },
  {
    "input": "Open file and enable ruler",
    "output": "vim -c 'set ruler' file.txt"
  },
  {
    "input": "Open file and enable cursorline",
    "output": "vim -c 'set cursorline' file.txt"
  },
  {
    "input": "Open file and enable cursorcolumn",
    "output": "vim -c 'set cursorcolumn' file.txt"
  },
  {
    "input": "Open file and enable wildmenu",
    "output": "vim -c 'set wildmenu' file.txt"
  },
  {
    "input": "Open file and start diff mode between two files",
    "output": "vim -d file1.txt file2.txt"
  },
  {
    "input": "Open file and use ex commands only",
    "output": "ex file.txt"
  },
  {
    "input": "Open file and start in visual mode",
    "output": "vim -c 'normal! V' file.txt"
  },
  {
    "input": "Open file and start in replace mode",
    "output": "vim -c 'normal! R' file.txt"
  },
  {
    "input": "Open file and start in command mode",
    "output": "vim -c '' file.txt"
  },
  {
    "input": "Open file and highlight column 80",
    "output": "vim -c 'set colorcolumn=80' file.txt"
  },
  {
    "input": "Open file and show invisibles",
    "output": "vim -c 'set list' file.txt"
  },
  {
    "input": "Open file and set listchars",
    "output": "vim -c 'set listchars=tab:>-,trail:-' file.txt"
  },
  {
    "input": "Open file and use system clipboard",
    "output": "vim -c 'set clipboard+=unnamedplus' file.txt"
  },
  {
    "input": "Open file and record macro 'q'",
    "output": "vim -c 'normal! qq'"
  },
  {
    "input": "Open file in less",
    "output": "less file.txt"
  },
  {
    "input": "Open multiple files",
    "output": "less file1.txt file2.txt"
  },
  {
    "input": "Ignore case in searches",
    "output": "less -I file.txt"
  },
  {
    "input": "Show line numbers",
    "output": "less -N file.txt"
  },
  {
    "input": "Quit less without waiting output",
    "output": "less -F file.txt"
  },
  {
    "input": "Quit if file fits one screen",
    "output": "less -X file.txt"
  },
  {
    "input": "Search forward for a pattern",
    "output": "/pattern"
  },
  {
    "input": "Search backward",
    "output": "?pattern"
  },
  {
    "input": "Go to line 100",
    "output": "less +100 file.txt"
  },
  {
    "input": "Start less at EOF",
    "output": "less +G file.txt"
  },
  {
    "input": "Start less at BOF",
    "output": "less +g file.txt"
  },
  {
    "input": "Show help screen",
    "output": "less -h"
  },
  {
    "input": "Open file with raw-control-chars",
    "output": "less -R file.txt"
  },
  {
    "input": "Suppress raw-control-chars",
    "output": "less -r file.txt"
  },
  {
    "input": "Follow file like tail -f",
    "output": "less +F file.txt"
  },
  {
    "input": "Reverse search in follow",
    "output": "less -R +F file.txt"
  },
  {
    "input": "Open file and allow window resizing",
    "output": "less -S file.txt"
  },
  {
    "input": "Chop long lines",
    "output": "less -S file.txt"
  },
  {
    "input": "Wrap long lines",
    "output": "less -Sx file.txt"
  },
  {
    "input": "Show tags index",
    "output": "less -t tag file.txt"
  },
  {
    "input": "Use prompt string",
    "output": "LESS='-Pmyprompt>' less file.txt"
  },
  {
    "input": "Open compressed file",
    "output": "less file.txt.gz"
  },
  {
    "input": "Pipe output to less",
    "output": "grep ERROR file.log | less"
  },
  {
    "input": "View man page via less",
    "output": "man ls"
  },
  {
    "input": "Open file and set scrolling speed",
    "output": "less -j5 file.txt"
  },
  {
    "input": "Open file with numbers left-justified",
    "output": "LESS='-N -L' less file.txt"
  },
  {
    "input": "Open file ignoring whitespace change",
    "output": "less -I file.txt"
  },
  {
    "input": "Open file with percent progress",
    "output": "less -P%f%t file.txt"
  },
  {
    "input": "Open file with specific environment",
    "output": "LESSCHARSET=utf-8 less file.txt"
  },
  {
    "input": "Open file with color escapes",
    "output": "less -R file.txt"
  },
  {
    "input": "Open file disabling termcap init/reset",
    "output": "less -X file.txt"
  },
  {
    "input": "Open file without init/reset but preserve capabilities",
    "output": "less -K file.txt"
  },
  {
    "input": "Open file and prompt at line number",
    "output": "less +100g file.txt"
  },
  {
    "input": "Open file and prompt at pattern",
    "output": "less +/pattern file.txt"
  },
  {
    "input": "Open file in quiet mode",
    "output": "less -q file.txt"
  },
  {
    "input": "Open file allowing colors",
    "output": "LESS='-R' less file.txt"
  },
  {
    "input": "View logs in real time",
    "output": "tail -f file.log | less +F"
  },
  {
    "input": "Open binary file in hex (via od)",
    "output": "od -Ax -t x1z file.bin | less"
  },
  {
    "input": "Open one page at a time",
    "output": "less -#1 file.txt"
  },
  {
    "input": "Open with horizontal scrolling off",
    "output": "less -S file.txt"
  },
  {
    "input": "Open with custom keybindings",
    "output": "less -K file.txt"
  },
  {
    "input": "Open with screen compatibility",
    "output": "less -k file.txt"
  },
  {
    "input": "Open with case-insensitive patterns",
    "output": "less -I file.txt"
  },
  {
    "input": "Open with XSS safe handling",
    "output": "less -R file.txt"
  },
  {
    "input": "Show last 10 lines",
    "output": "tail file.txt"
  },
  {
    "input": "Show last 5 lines",
    "output": "tail -n 5 file.txt"
  },
  {
    "input": "Show last 20 lines",
    "output": "tail -n 20 file.txt"
  },
  {
    "input": "Follow file in real time",
    "output": "tail -f file.log"
  },
  {
    "input": "Follow file with retry on rename",
    "output": "tail -F file.log"
  },
  {
    "input": "Follow file and show line numbers",
    "output": "tail -n +1 file.txt"
  },
  {
    "input": "Show last 100 bytes",
    "output": "tail -c 100 file.txt"
  },
  {
    "input": "Show last 1KB",
    "output": "tail -c 1K file.txt"
  },
  {
    "input": "Show last 1MB",
    "output": "tail -c 1M file.txt"
  },
  {
    "input": "Show last 5 files lines",
    "output": "tail -n 5 file1.txt file2.txt"
  },
  {
    "input": "Follow multiple files",
    "output": "tail -f file1.log file2.log"
  },
  {
    "input": "Follow file with process ID display",
    "output": "tail -f --pid=1234 file.log"
  },
  {
    "input": "Follow file with time stamp",
    "output": "tail -f file.log | ts"
  },
  {
    "input": "Follow file and filter by grep",
    "output": "tail -f file.log | grep ERROR"
  },
  {
    "input": "Show last lines from STDIN",
    "output": "echo -e 'a\nb\nc' | tail -n 2"
  },
  {
    "input": "Show last 20 lines of syslog",
    "output": "tail -n 20 /var/log/syslog"
  },
  {
    "input": "Follow auth.log",
    "output": "tail -f /var/log/auth.log"
  },
  {
    "input": "Monitor dmesg",
    "output": "dmesg -wH"
  },
  {
    "input": "Follow Apache access logs",
    "output": "tail -f /var/log/apache2/access.log"
  },
  {
    "input": "Follow Nginx error logs",
    "output": "tail -f /var/log/nginx/error.log"
  },
  {
    "input": "Follow Docker logs",
    "output": "docker logs -f container_name"
  },
  {
    "input": "Show last 50 entries of journal",
    "output": "journalctl -n 50"
  },
  {
    "input": "Follow journal logs",
    "output": "journalctl -f"
  },
  {
    "input": "Follow journal for specific unit",
    "output": "journalctl -u sshd -f"
  },
  {
    "input": "Follow kernel ring buffer",
    "output": "dmesg --follow"
  },
  {
    "input": "Show last lines of CSV file",
    "output": "tail -n 1 data.csv"
  },
  {
    "input": "Show last lines of JSON file",
    "output": "jq . file.json | tail"
  },
  {
    "input": "Show last lines of XML file",
    "output": "xmllint --format file.xml | tail"
  },
  {
    "input": "Show last lines of Markdown",
    "output": "tail -n 20 README.md"
  },
  {
    "input": "Show last lines of code file",
    "output": "tail -n 30 script.sh"
  },
  {
    "input": "Show last 5 processes",
    "output": "ps aux | tail -n 5"
  },
  {
    "input": "Show last 10 connections",
    "output": "ss -tunap | tail"
  },
  {
    "input": "Show last entries of dstat",
    "output": "dstat 1 5 | tail"
  },
  {
    "input": "Show last 5 lines of find output",
    "output": "find . -type f | tail -n 5"
  },
  {
    "input": "Show last lines of tar listing",
    "output": "tar tzf archive.tar.gz | tail"
  },
  {
    "input": "Show last lines of grep output",
    "output": "grep pattern file.txt | tail"
  },
  {
    "input": "Show last lines with timestamps",
    "output": "tail -f file.log | cut -d' ' -f1-2"
  },
  {
    "input": "Filter last lines by awk",
    "output": "tail file.txt | awk 'NR>5{print}'"
  },
  {
    "input": "Filter last lines by sed",
    "output": "tail file.txt | sed -n '1,5p'"
  },
  {
    "input": "Pipe last lines to less",
    "output": "tail file.txt | less"
  },
  {
    "input": "Pipe last lines to more",
    "output": "tail file.txt | more"
  },
  {
    "input": "Monitor tail of compressed file",
    "output": "zcat file.gz | tail -f"
  },
  {
    "input": "Monitor tail of bzipped file",
    "output": "bzcat file.bz2 | tail -f"
  },
  {
    "input": "Monitor tail of xz file",
    "output": "xzcat file.xz | tail -f"
  },
  {
    "input": "Show last lines by find and tail",
    "output": "find . -name '*.log' -exec tail -n 5 {} \\;"
  },
  {
    "input": "Open file in vim",
    "output": "vim file.txt"
  },
  {
    "input": "Open file at specific line",
    "output": "vim +100 file.txt"
  },
  {
    "input": "Open file at line and column",
    "output": "vim +call cursor(100,5) file.txt"
  },
  {
    "input": "Start vim in read-only mode",
    "output": "vim -R file.txt"
  },
  {
    "input": "Open vim in compatible mode",
    "output": "vim -C file.txt"
  },
  {
    "input": "Disable swap file creation",
    "output": "vim -n file.txt"
  },
  {
    "input": "Ignore viminfo file",
    "output": "vim -i NONE file.txt"
  },
  {
    "input": "Start vim with no plugins",
    "output": "vim -u NONE file.txt"
  },
  {
    "input": "Start vim with minimal vimrc",
    "output": "vim -u NORC file.txt"
  },
  {
    "input": "Start vim in silent mode",
    "output": "vim -es file.txt"
  },
  {
    "input": "Start vim in Ex mode",
    "output": "vim -e file.txt"
  },
  {
    "input": "Start vim with GUI disabled",
    "output": "vim -X file.txt"
  },
  {
    "input": "Start vim and execute command",
    "output": "vim +':%s/foo/bar/g' +wq file.txt"
  },
  {
    "input": "Open file and set syntax highlighting",
    "output": "vim -c 'syntax on' file.txt"
  },
  {
    "input": "Open file and set line numbers",
    "output": "vim -c 'set number' file.txt"
  },
  {
    "input": "Open file and enable mouse",
    "output": "vim -c 'set mouse=a' file.txt"
  },
  {
    "input": "Open file and start in insert mode",
    "output": "vim +startinsert file.txt"
  },
  {
    "input": "Open file and go to last edit position",
    "output": "vim +lastfile file.txt"
  },
  {
    "input": "Open file and record session",
    "output": "vim -S session.vim file.txt"
  },
  {
    "input": "Open file and source vimrc",
    "output": "vim -u ~/.vimrc file.txt"
  },
  {
    "input": "Open multiple files in tabs",
    "output": "vim -p file1.txt file2.txt"
  },
  {
    "input": "Open multiple files in windows",
    "output": "vim -o file1.txt file2.txt"
  },
  {
    "input": "Open multiple files in vertical splits",
    "output": "vim -O file1.txt file2.txt"
  },
  {
    "input": "Open vim with custom encoding",
    "output": "vim +'set fileencoding=utf-8' file.txt"
  },
  {
    "input": "Open file and highlight search matches",
    "output": "vim -c 'set hlsearch' file.txt"
  },
  {
    "input": "Open file and disable swapfile",
    "output": "vim -n file.txt"
  },
  {
    "input": "Open file with folding enabled",
    "output": "vim -c 'set foldmethod=indent' file.txt"
  },
  {
    "input": "Open file and set tabstop=4",
    "output": "vim -c 'set tabstop=4' file.txt"
  },
  {
    "input": "Open file and set shiftwidth=4",
    "output": "vim -c 'set shiftwidth=4' file.txt"
  },
  {
    "input": "Open file and expand tabs",
    "output": "vim -c 'set expandtab' file.txt"
  },
  {
    "input": "Open file and set smartindent",
    "output": "vim -c 'set smartindent' file.txt"
  },
  {
    "input": "Open file and set autoindent",
    "output": "vim -c 'set autoindent' file.txt"
  },
  {
    "input": "Open file and enable ruler",
    "output": "vim -c 'set ruler' file.txt"
  },
  {
    "input": "Open file and enable cursorline",
    "output": "vim -c 'set cursorline' file.txt"
  },
  {
    "input": "Open file and enable cursorcolumn",
    "output": "vim -c 'set cursorcolumn' file.txt"
  },
  {
    "input": "Open file and enable wildmenu",
    "output": "vim -c 'set wildmenu' file.txt"
  },
  {
    "input": "Open file and start diff mode between two files",
    "output": "vim -d file1.txt file2.txt"
  },
  {
    "input": "Open file and use ex commands only",
    "output": "ex file.txt"
  },
  {
    "input": "Open file and start in visual mode",
    "output": "vim -c 'normal! V' file.txt"
  },
  {
    "input": "Open file and start in replace mode",
    "output": "vim -c 'normal! R' file.txt"
  },
  {
    "input": "Open file and start in command mode",
    "output": "vim -c '' file.txt"
  },
  {
    "input": "Open file and highlight column 80",
    "output": "vim -c 'set colorcolumn=80' file.txt"
  },
  {
    "input": "Open file and show invisibles",
    "output": "vim -c 'set list' file.txt"
  },
  {
    "input": "Open file and set listchars",
    "output": "vim -c 'set listchars=tab:>-,trail:-' file.txt"
  },
  {
    "input": "Open file and use system clipboard",
    "output": "vim -c 'set clipboard+=unnamedplus' file.txt"
  },
  {
    "input": "Open file and record macro 'q'",
    "output": "vim -c 'normal! qq'"
  },
  {
    "input": "Create an alias for listing files as 'll'",
    "output": "alias ll='ls -alF'"
  },
  {
    "input": "Make 'la' show all files including hidden ones",
    "output": "alias la='ls -A'"
  },
  {
    "input": "Alias grep to show color output",
    "output": "alias grep='grep --color=auto'"
  },
  {
    "input": "Create an alias to clear the terminal",
    "output": "alias c='clear'"
  },
  {
    "input": "Make 'gs' a shortcut for git status",
    "output": "alias gs='git status'"
  },
  {
    "input": "Alias 'update' to update packages in Debian",
    "output": "alias update='sudo apt update && sudo apt upgrade'"
  },
  {
    "input": "Alias rm to be interactive",
    "output": "alias rm='rm -i'"
  },
  {
    "input": "Shortcut 'v' for vim",
    "output": "alias v='vim'"
  },
  {
    "input": "Alias 'q' to exit terminal",
    "output": "alias q='exit'"
  },
  {
    "input": "Alias python to python3",
    "output": "alias python='python3'"
  },
  {
    "input": "Create alias to launch VS Code",
    "output": "alias code='code .'"
  },
  {
    "input": "Create alias to go to home directory",
    "output": "alias home='cd ~'"
  },
  {
    "input": "Make alias for listing directory with size",
    "output": "alias lsize='ls -lhS'"
  },
  {
    "input": "Alias to show current directory",
    "output": "alias cwd='pwd'"
  },
  {
    "input": "Make 'gcm' run git commit",
    "output": "alias gcm='git commit -m'"
  },
  {
    "input": "Make 'gl' show git log",
    "output": "alias gl='git log'"
  },
  {
    "input": "Create alias for running Python scripts",
    "output": "alias runpy='python3 main.py'"
  },
  {
    "input": "Alias 'du' with human readable option",
    "output": "alias du='du -h'"
  },
  {
    "input": "Alias shutdown command",
    "output": "alias poweroff='sudo shutdown -h now'"
  },
  {
    "input": "Create alias to show disk usage",
    "output": "alias disk='df -h'"
  },
  {
    "input": "Create a safe move alias",
    "output": "alias mv='mv -i'"
  },
  {
    "input": "Create an alias for installing packages",
    "output": "alias install='sudo apt install'"
  },
  {
    "input": "Alias to reload shell config",
    "output": "alias reload='source ~/.bashrc'"
  },
  {
    "input": "Alias to open .bashrc",
    "output": "alias bashrc='nano ~/.bashrc'"
  },
  {
    "input": "Create alias for docker compose",
    "output": "alias dcu='docker-compose up'"
  },
  {
    "input": "Alias to remove all docker containers",
    "output": "alias dclean='docker rm $(docker ps -a -q)'"
  },
  {
    "input": "Create alias for system update",
    "output": "alias sysup='sudo apt update && sudo apt upgrade -y'"
  },
  {
    "input": "Alias top with tree view",
    "output": "alias htop='htop'"
  },
  {
    "input": "Create alias to show all environment variables",
    "output": "alias envs='printenv'"
  },
  {
    "input": "Make alias to ping google",
    "output": "alias pingg='ping 8.8.8.8'"
  },
  {
    "input": "Alias for launching Firefox",
    "output": "alias ff='firefox'"
  },
  {
    "input": "Create alias for rebooting",
    "output": "alias reboot='sudo reboot'"
  },
  {
    "input": "Create alias for tree command",
    "output": "alias tree='tree -C'"
  },
  {
    "input": "Make alias to kill a process",
    "output": "alias killp='kill -9'"
  },
  {
    "input": "Alias to copy file with progress",
    "output": "alias cp='rsync -ah --progress'"
  },
  {
    "input": "Alias to edit crontab",
    "output": "alias crontabedit='crontab -e'"
  },
  {
    "input": "Alias to see network interfaces",
    "output": "alias net='ip a'"
  },
  {
    "input": "Alias to show listening ports",
    "output": "alias ports='sudo lsof -i -P -n | grep LISTEN'"
  },
  {
    "input": "Alias to run make",
    "output": "alias mk='make'"
  },
  {
    "input": "Alias to remove .pyc files",
    "output": "alias cleanpyc='find . -name \"*.pyc\" -delete'"
  },
  {
    "input": "Alias to go to root",
    "output": "alias root='cd /'"
  },
  {
    "input": "Make alias to show mounted drives",
    "output": "alias mounts='mount | column -t'"
  },
  {
    "input": "Alias to show current time",
    "output": "alias now='date +\"%T\"'"
  },
  {
    "input": "Alias to list hidden files",
    "output": "alias lh='ls -d .*'"
  },
  {
    "input": "Alias to open nautilus file explorer",
    "output": "alias open='nautilus .'"
  },
  {
    "input": "Alias to show CPU info",
    "output": "alias cpuinfo='lscpu'"
  },
  {
    "input": "Alias to show memory usage",
    "output": "alias mem='free -h'"
  },
  {
    "input": "Alias for monitoring system load",
    "output": "alias sysload='uptime'"
  },
  {
    "input": "Alias for fast directory listing",
    "output": "alias l='ls -CF'"
  },
  {
    "input": "Alias to edit .zshrc",
    "output": "alias zshrc='nano ~/.zshrc'"
  },
  {
    "input": "Alias to start local HTTP server",
    "output": "alias serve='python3 -m http.server'"
  },
  {
    "input": "Alias to navigate to Downloads",
    "output": "alias dload='cd ~/Downloads'"
  },
  {
    "input": "Alias to navigate to Documents",
    "output": "alias docs='cd ~/Documents'"
  },
  {
    "input": "Alias to view logs",
    "output": "alias logs='tail -f /var/log/syslog'"
  },
  {
    "input": "Alias for sudo",
    "output": "alias please='sudo'"
  },
  {
    "input": "Alias to show Git branches",
    "output": "alias gb='git branch'"
  },
  {
    "input": "Alias to checkout a Git branch",
    "output": "alias gco='git checkout'"
  },
  {
    "input": "Alias to clone a Git repo",
    "output": "alias gcl='git clone'"
  },
  {
    "input": "Alias to add all and commit",
    "output": "alias gac='git add . && git commit -m'"
  },
  {
    "input": "Alias to push Git changes",
    "output": "alias gp='git push'"
  },
  {
    "input": "Alias to start virtual environment",
    "output": "alias venv='source venv/bin/activate'"
  },
  {
    "input": "Alias to deactivate venv",
    "output": "alias vdeact='deactivate'"
  },
  {
    "input": "Alias to launch Jupyter Notebook",
    "output": "alias jn='jupyter notebook'"
  },
  {
    "input": "Alias to show aliases",
    "output": "alias list='alias'"
  },
  {
    "input": "Alias to remove an alias",
    "output": "unalias list"
  },
  {
    "input": "Create alias to list all installed packages",
    "output": "alias packages='dpkg --get-selections'"
  },
  {
    "input": "Alias to backup a file",
    "output": "alias backup='cp $1 $1.bak'"
  },
  {
    "input": "Alias to check open ports",
    "output": "alias openports='netstat -tuln'"
  },
  {
    "input": "Alias to restart network",
    "output": "alias netr='sudo systemctl restart NetworkManager'"
  },
  {
    "input": "Alias to flush DNS cache",
    "output": "alias flushdns='sudo systemd-resolve --flush-caches'"
  },
  {
    "input": "Alias to compile C code",
    "output": "alias gccbuild='gcc main.c -o main'"
  },
  {
    "input": "Alias for javac",
    "output": "alias jc='javac'"
  },
  {
    "input": "Alias for java",
    "output": "alias jr='java'"
  },
  {
    "input": "Alias to run python3 interactive mode",
    "output": "alias py='python3'"
  },
  {
    "input": "Alias to get external IP",
    "output": "alias myip='curl ifconfig.me'"
  },
  {
    "input": "Alias to unzip archive",
    "output": "alias unzipf='unzip -o'"
  },
  {
    "input": "Alias to extract .tar.gz",
    "output": "alias untar='tar -xvzf'"
  },
  {
    "input": "Alias to archive folder",
    "output": "alias tarzip='tar -czvf'"
  },
  {
    "input": "Alias to list block devices",
    "output": "alias blk='lsblk'"
  },
  {
    "input": "Alias to show last 50 commands",
    "output": "alias h50='history | tail -n 50'"
  },
  {
    "input": "Clear the terminal screen",
    "output": "clear"
  },
  {
    "input": "Wipe everything shown on terminal",
    "output": "clear"
  },
  {
    "input": "Erase the terminal output",
    "output": "clear"
  },
  {
    "input": "Reset the command line view",
    "output": "clear"
  },
  {
    "input": "Get rid of all previous terminal logs",
    "output": "clear"
  },
  {
    "input": "Make the terminal window blank",
    "output": "clear"
  },
  {
    "input": "Remove all the previous commands from view",
    "output": "clear"
  },
  {
    "input": "Clean the terminal screen",
    "output": "clear"
  },
  {
    "input": "Start with a fresh terminal",
    "output": "clear"
  },
  {
    "input": "Flush terminal display",
    "output": "clear"
  },
  {
    "input": "Refresh the terminal output",
    "output": "clear"
  },
  {
    "input": "Hide all previous outputs in terminal",
    "output": "clear"
  },
  {
    "input": "Wipe out all console text",
    "output": "clear"
  },
  {
    "input": "Empty the terminal buffer",
    "output": "clear"
  },
  {
    "input": "Clear up the screen space",
    "output": "clear"
  },
  {
    "input": "Wipe the shell window",
    "output": "clear"
  },
  {
    "input": "Clean up terminal before running next command",
    "output": "clear"
  },
  {
    "input": "Reset the shell interface",
    "output": "clear"
  },
  {
    "input": "Make terminal output disappear",
    "output": "clear"
  },
  {
    "input": "Free up the terminal display area",
    "output": "clear"
  },
  {
    "input": "Clear entire screen",
    "output": "clear"
  },
  {
    "input": "Clear previous logs and commands",
    "output": "clear"
  },
  {
    "input": "Clean up CLI screen",
    "output": "clear"
  },
  {
    "input": "Get a new clean terminal interface",
    "output": "clear"
  },
  {
    "input": "Flush old outputs from terminal",
    "output": "clear"
  },
  {
    "input": "Reset terminal to blank state",
    "output": "clear"
  },
  {
    "input": "Make terminal empty",
    "output": "clear"
  },
  {
    "input": "Start with a clean shell window",
    "output": "clear"
  },
  {
    "input": "Remove all previous text from shell",
    "output": "clear"
  },
  {
    "input": "Wipe visible command history",
    "output": "clear"
  },
  {
    "input": "Blank out the terminal",
    "output": "clear"
  },
  {
    "input": "Clear the display buffer",
    "output": "clear"
  },
  {
    "input": "Remove output from screen",
    "output": "clear"
  },
  {
    "input": "Erase terminal screen contents",
    "output": "clear"
  },
  {
    "input": "Clean shell terminal for new work",
    "output": "clear"
  },
  {
    "input": "Purge the terminal view",
    "output": "clear"
  },
  {
    "input": "Start fresh in terminal",
    "output": "clear"
  },
  {
    "input": "Get a clear shell",
    "output": "clear"
  },
  {
    "input": "Clean console before running script",
    "output": "clear"
  },
  {
    "input": "Reset everything on terminal display",
    "output": "clear"
  },
  {
    "input": "Clear terminal screen before user input",
    "output": "clear"
  },
  {
    "input": "Remove old data from the shell window",
    "output": "clear"
  },
  {
    "input": "Blank the screen before next output",
    "output": "clear"
  },
  {
    "input": "Get rid of clutter on terminal",
    "output": "clear"
  },
  {
    "input": "Clear cluttered terminal output",
    "output": "clear"
  },
  {
    "input": "Clean previous outputs in console",
    "output": "clear"
  },
  {
    "input": "Flush current terminal session display",
    "output": "clear"
  },
  {
    "input": "Clear all visible lines from terminal",
    "output": "clear"
  },
  {
    "input": "Empty terminal to make space",
    "output": "clear"
  },
  {
    "input": "Clear before entering new commands",
    "output": "clear"
  },
  {
    "input": "Reset terminal before launching tool",
    "output": "clear"
  },
  {
    "input": "Clean old shell logs",
    "output": "clear"
  },
  {
    "input": "Refresh screen by clearing old text",
    "output": "clear"
  },
  {
    "input": "Start clean CLI",
    "output": "clear"
  },
  {
    "input": "Get rid of previous script output",
    "output": "clear"
  },
  {
    "input": "Empty shell view for cleaner output",
    "output": "clear"
  },
  {
    "input": "Remove all content from terminal",
    "output": "clear"
  },
  {
    "input": "Hide everything shown in terminal",
    "output": "clear"
  },
  {
    "input": "Clear visible command history",
    "output": "clear"
  },
  {
    "input": "Wipe everything on the CLI screen",
    "output": "clear"
  },
  {
    "input": "Clean terminal buffer and screen",
    "output": "clear"
  },
  {
    "input": "Clear all text on shell",
    "output": "clear"
  },
  {
    "input": "Flush terminal interface",
    "output": "clear"
  },
  {
    "input": "Reset command line UI",
    "output": "clear"
  },
  {
    "input": "Clean current shell output",
    "output": "clear"
  },
  {
    "input": "Clear screen before new prompt",
    "output": "clear"
  },
  {
    "input": "Make terminal display empty",
    "output": "clear"
  },
  {
    "input": "Remove noise from terminal",
    "output": "clear"
  },
  {
    "input": "Clean visual terminal screen",
    "output": "clear"
  },
  {
    "input": "Remove all shell display content",
    "output": "clear"
  },
  {
    "input": "Clear screen to reduce distraction",
    "output": "clear"
  },
  {
    "input": "Refresh terminal to blank state",
    "output": "clear"
  },
  {
    "input": "Wipe out history from screen",
    "output": "clear"
  },
  {
    "input": "Free terminal screen before typing",
    "output": "clear"
  },
  {
    "input": "Clear to avoid scrolling",
    "output": "clear"
  },
  {
    "input": "Clean command line space",
    "output": "clear"
  },
  {
    "input": "Wipe previously displayed data",
    "output": "clear"
  },
  {
    "input": "Start with empty terminal window",
    "output": "clear"
  },
  {
    "input": "Make shell interface blank again",
    "output": "clear"
  },
  {
    "input": "Clean up terminal clutter",
    "output": "clear"
  },
  {
    "input": "Clear terminal for screenshot",
    "output": "clear"
  },
  {
    "input": "Remove logs before demo",
    "output": "clear"
  },
  {
    "input": "Prepare clean screen for next command",
    "output": "clear"
  },
  {
    "input": "Clear shell before pasting code",
    "output": "clear"
  },
  {
    "input": "Erase scrollback content",
    "output": "clear"
  },
  {
    "input": "Hide all output before prompt",
    "output": "clear"
  },
  {
    "input": "Clean terminal before screen recording",
    "output": "clear"
  },
  {
    "input": "Reset screen after long output",
    "output": "clear"
  },
  {
    "input": "Blank screen before showing menu",
    "output": "clear"
  },
  {
    "input": "Get clean console for testing",
    "output": "clear"
  },
  {
    "input": "Check if cron service is running",
    "output": "systemctl status cron"
  },
  {
    "input": "Start the cron daemon",
    "output": "sudo systemctl start cron"
  },
  {
    "input": "Stop the cron daemon",
    "output": "sudo systemctl stop cron"
  },
  {
    "input": "Restart the cron service",
    "output": "sudo systemctl restart cron"
  },
  {
    "input": "Enable cron to start on boot",
    "output": "sudo systemctl enable cron"
  },
  {
    "input": "Disable cron from starting on boot",
    "output": "sudo systemctl disable cron"
  },
  {
    "input": "Reload the cron daemon",
    "output": "sudo systemctl reload cron"
  },
  {
    "input": "Check the status of cron service using service command",
    "output": "service cron status"
  },
  {
    "input": "Start cron service using service command",
    "output": "sudo service cron start"
  },
  {
    "input": "Stop cron service using service command",
    "output": "sudo service cron stop"
  },
  {
    "input": "View system cron logs",
    "output": "grep CRON /var/log/syslog"
  },
  {
    "input": "Watch cron job logs in real-time",
    "output": "tail -f /var/log/syslog | grep CRON"
  },
  {
    "input": "Check system-wide cron jobs",
    "output": "cat /etc/crontab"
  },
  {
    "input": "List all cron jobs for all users",
    "output": "sudo ls /var/spool/cron/crontabs"
  },
  {
    "input": "Edit system-wide cron jobs",
    "output": "sudo nano /etc/crontab"
  },
  {
    "input": "Check root's scheduled cron jobs",
    "output": "sudo crontab -l -u root"
  },
  {
    "input": "Edit cron job for root user",
    "output": "sudo crontab -e -u root"
  },
  {
    "input": "List jobs in hourly cron directory",
    "output": "ls /etc/cron.hourly/"
  },
  {
    "input": "List jobs in daily cron directory",
    "output": "ls /etc/cron.daily/"
  },
  {
    "input": "List jobs in weekly cron directory",
    "output": "ls /etc/cron.weekly/"
  },
  {
    "input": "List jobs in monthly cron directory",
    "output": "ls /etc/cron.monthly/"
  },
  {
    "input": "Add a shell script to run hourly",
    "output": "sudo cp myscript.sh /etc/cron.hourly/"
  },
  {
    "input": "Add a shell script to run daily",
    "output": "sudo cp dailyjob.sh /etc/cron.daily/"
  },
  {
    "input": "Add a script to weekly cron folder",
    "output": "sudo cp weekly.sh /etc/cron.weekly/"
  },
  {
    "input": "Make script executable for cron job",
    "output": "chmod +x script.sh"
  },
  {
    "input": "Change ownership of a cron script",
    "output": "sudo chown root:root script.sh"
  },
  {
    "input": "Restart cron after changes to crontab",
    "output": "sudo systemctl restart cron"
  },
  {
    "input": "Disable a user from using cron",
    "output": "echo 'username' >> /etc/cron.deny"
  },
  {
    "input": "Allow only certain users to use cron",
    "output": "echo 'username' >> /etc/cron.allow"
  },
  {
    "input": "Create cron job to run every hour",
    "output": "echo '0 * * * * /path/to/script.sh' | crontab -"
  },
  {
    "input": "Find cron executable path",
    "output": "which cron"
  },
  {
    "input": "Check cron version",
    "output": "cron --version"
  },
  {
    "input": "Manually run cron for debugging",
    "output": "sudo cron -f"
  },
  {
    "input": "Run cron in debug mode",
    "output": "sudo cron -x"
  },
  {
    "input": "Find all cron-related processes",
    "output": "ps aux | grep cron"
  },
  {
    "input": "Kill cron service",
    "output": "sudo pkill cron"
  },
  {
    "input": "Reload cron daemon via init",
    "output": "sudo initctl reload-configuration"
  },
  {
    "input": "Schedule script in /etc/cron.d directory",
    "output": "sudo nano /etc/cron.d/mycronjob"
  },
  {
    "input": "Set up a new cron job in cron.d",
    "output": "echo '0 1 * * * root /opt/task.sh' > /etc/cron.d/task"
  },
  {
    "input": "Ensure cron logs are enabled",
    "output": "grep cron /etc/rsyslog.d/50-default.conf"
  },
  {
    "input": "Flush cron logs",
    "output": "sudo truncate -s 0 /var/log/syslog"
  },
  {
    "input": "Use cron.d to schedule script",
    "output": "sudo bash -c 'echo \"30 2 * * * root /usr/local/bin/backup.sh\" > /etc/cron.d/backup'"
  },
  {
    "input": "Create a one-minute cron job",
    "output": "echo '* * * * * /script.sh' | crontab -"
  },
  {
    "input": "Reboot cron job",
    "output": "echo '@reboot /reboot.sh' | crontab -"
  },
  {
    "input": "Run script with cron and redirect output",
    "output": "echo '0 * * * * /script.sh >> /var/log/script.log 2>&1' | crontab -"
  },
  {
    "input": "Check cron job errors",
    "output": "grep -i cron /var/log/syslog | grep -i error"
  },
  {
    "input": "Debug failed cron job",
    "output": "journalctl -u cron.service"
  },
  {
    "input": "List active cron jobs by user",
    "output": "crontab -l -u username"
  },
  {
    "input": "Remove all cron jobs for a user",
    "output": "crontab -r -u username"
  },
  {
    "input": "Prevent user from creating cron jobs",
    "output": "sudo echo 'username' >> /etc/cron.deny"
  },
  {
    "input": "Install cron package",
    "output": "sudo apt install cron"
  },
  {
    "input": "Reinstall cron",
    "output": "sudo apt-get install --reinstall cron"
  },
  {
    "input": "Check if cron is enabled",
    "output": "systemctl is-enabled cron"
  },
  {
    "input": "Enable cron logging",
    "output": "sudo nano /etc/rsyslog.d/50-default.conf"
  },
  {
    "input": "List all cron timers",
    "output": "systemctl list-timers"
  },
  {
    "input": "Create a cron timer for systemd",
    "output": "sudo nano /etc/systemd/system/myjob.timer"
  },
  {
    "input": "Check cron job run success",
    "output": "grep 'CRON' /var/log/syslog | grep 'CMD'"
  },
  {
    "input": "Edit a cron job file directly",
    "output": "sudo nano /var/spool/cron/crontabs/username"
  },
  {
    "input": "Add a logging wrapper to cron job",
    "output": "echo '0 * * * * /myscript.sh >> /var/log/mylog.log' | crontab -"
  },
  {
    "input": "Run cron job in different shell",
    "output": "SHELL=/bin/bash && crontab -e"
  },
  {
    "input": "Run cron job with environment variables",
    "output": "crontab -e # PATH=/usr/bin:/bin"
  },
  {
    "input": "Use MAILTO to email cron job results",
    "output": "crontab -e # MAILTO='user@example.com'"
  },
  {
    "input": "Disable mail notifications for cron job",
    "output": "crontab -e # MAILTO=''"
  },
  {
    "input": "Run cron job with custom PATH",
    "output": "crontab -e # PATH=/custom/bin:$PATH"
  },
  {
    "input": "Make sure cron logs are rotated",
    "output": "cat /etc/logrotate.d/rsyslog"
  },
  {
    "input": "Configure cron to log errors to file",
    "output": "echo '0 * * * * /myscript.sh 2>> /tmp/errors.log' | crontab -"
  },
  {
    "input": "Prevent overlapping cron runs",
    "output": "flock -n /tmp/lockfile /myscript.sh"
  },
  {
    "input": "Test cron job manually",
    "output": "/bin/bash /myscript.sh"
  },
  {
    "input": "Verify cron script permissions",
    "output": "ls -l /etc/cron.daily/"
  },
  {
    "input": "Set script executable for cron use",
    "output": "chmod 755 /myscript.sh"
  },
  {
    "input": "Open the current user's crontab for editing",
    "output": "crontab -e"
  },
  {
    "input": "List the current user's crontab entries",
    "output": "crontab -l"
  },
  {
    "input": "Remove all crontab entries for the current user",
    "output": "crontab -r"
  },
  {
    "input": "Edit root's crontab",
    "output": "sudo crontab -e"
  },
  {
    "input": "List root user's crontab",
    "output": "sudo crontab -l"
  },
  {
    "input": "Delete root's crontab",
    "output": "sudo crontab -r"
  },
  {
    "input": "Create a new crontab file from a file",
    "output": "crontab mycron.txt"
  },
  {
    "input": "Schedule a job to run every minute",
    "output": "crontab -e # * * * * * command"
  },
  {
    "input": "Schedule a script to run every day at 5 AM",
    "output": "crontab -e # 0 5 * * * /path/to/script.sh"
  },
  {
    "input": "Run a backup every Sunday at midnight",
    "output": "crontab -e # 0 0 * * 0 /usr/local/bin/backup.sh"
  },
  {
    "input": "Schedule to clean temp every hour",
    "output": "crontab -e # 0 * * * * /bin/rm -rf /tmp/*"
  },
  {
    "input": "Run a Python script every day at 8 AM",
    "output": "crontab -e # 0 8 * * * /usr/bin/python3 /home/user/script.py"
  },
  {
    "input": "Run a script on reboot",
    "output": "crontab -e # @reboot /path/to/startup.sh"
  },
  {
    "input": "Run a command every 5 minutes",
    "output": "crontab -e # */5 * * * * command"
  },
  {
    "input": "Execute every weekday at 10 AM",
    "output": "crontab -e # 0 10 * * 1-5 command"
  },
  {
    "input": "Run command on first day of every month",
    "output": "crontab -e # 0 0 1 * * command"
  },
  {
    "input": "Execute command every 15 minutes",
    "output": "crontab -e # */15 * * * * command"
  },
  {
    "input": "Run log rotate daily at midnight",
    "output": "crontab -e # 0 0 * * * /usr/sbin/logrotate"
  },
  {
    "input": "Schedule job every Monday at 1 PM",
    "output": "crontab -e # 0 13 * * 1 /path/to/job.sh"
  },
  {
    "input": "Run job only in January",
    "output": "crontab -e # 0 0 * 1 * command"
  },
  {
    "input": "Create crontab entry from stdin",
    "output": "cat mycron | crontab -"
  },
  {
    "input": "Backup current crontab to a file",
    "output": "crontab -l > mycron.backup"
  },
  {
    "input": "Restore crontab from backup",
    "output": "crontab mycron.backup"
  },
  {
    "input": "Check crontab for specific command",
    "output": "crontab -l | grep 'backup'"
  },
  {
    "input": "Schedule job at 11:30 PM daily",
    "output": "crontab -e # 30 23 * * * /path/to/script.sh"
  },
  {
    "input": "Add entry to run script at 3 AM every Friday",
    "output": "crontab -e # 0 3 * * 5 /script.sh"
  },
  {
    "input": "Run script every 2 hours",
    "output": "crontab -e # 0 */2 * * * /script.sh"
  },
  {
    "input": "Run job every 10 minutes",
    "output": "crontab -e # */10 * * * * /script.sh"
  },
  {
    "input": "Run job once a year",
    "output": "crontab -e # @yearly /yearly_job.sh"
  },
  {
    "input": "Run job monthly",
    "output": "crontab -e # @monthly /monthly_job.sh"
  },
  {
    "input": "Run job weekly",
    "output": "crontab -e # @weekly /weekly_job.sh"
  },
  {
    "input": "Run daily cleanup",
    "output": "crontab -e # @daily /cleanup.sh"
  },
  {
    "input": "Schedule command every Tuesday at 7 PM",
    "output": "crontab -e # 0 19 * * 2 /cmd.sh"
  },
  {
    "input": "Run job on weekends at 6 AM",
    "output": "crontab -e # 0 6 * * 6,0 /weekend.sh"
  },
  {
    "input": "Run alert script every 30 minutes",
    "output": "crontab -e # */30 * * * * /alert.sh"
  },
  {
    "input": "Run system update every night",
    "output": "crontab -e # 0 2 * * * /update.sh"
  },
  {
    "input": "Run disk check monthly",
    "output": "crontab -e # 0 1 1 * * /disk_check.sh"
  },
  {
    "input": "Schedule ping to run every hour",
    "output": "crontab -e # 0 * * * * ping -c 4 google.com"
  },
  {
    "input": "Run weather fetch every morning",
    "output": "crontab -e # 30 7 * * * /get_weather.sh"
  },
  {
    "input": "Run email notification at 8 PM",
    "output": "crontab -e # 0 20 * * * /send_email.sh"
  },
  {
    "input": "Create cron job to log time every minute",
    "output": "crontab -e # * * * * * date >> /tmp/time.log"
  },
  {
    "input": "Run report generator every 6 hours",
    "output": "crontab -e # 0 */6 * * * /report.sh"
  },
  {
    "input": "Execute command every weekday",
    "output": "crontab -e # 0 9 * * 1-5 /weekday.sh"
  },
  {
    "input": "Schedule job at 6 PM only in December",
    "output": "crontab -e # 0 18 * 12 * /december.sh"
  },
  {
    "input": "Log uptime every 30 minutes",
    "output": "crontab -e # */30 * * * * uptime >> /tmp/uptime.log"
  },
  {
    "input": "Reboot alert script on system startup",
    "output": "crontab -e # @reboot /startup_alert.sh"
  },
  {
    "input": "Schedule bash script every 3rd of the month",
    "output": "crontab -e # 0 0 3 * * /script.sh"
  },
  {
    "input": "Run python script every 45 minutes",
    "output": "crontab -e # */45 * * * * python3 /job.py"
  },
  {
    "input": "Run script only on 15th of each month",
    "output": "crontab -e # 0 0 15 * * /monthly_task.sh"
  },
  {
    "input": "Check internet connection every hour",
    "output": "crontab -e # 0 * * * * /check_internet.sh"
  },
  {
    "input": "Create cron job for logging CPU stats",
    "output": "crontab -e # */5 * * * * top -bn1 >> /tmp/cpu.log"
  },
  {
    "input": "Run temperature monitor every 2 minutes",
    "output": "crontab -e # */2 * * * * /temp.sh"
  },
  {
    "input": "Set up a cron job from file",
    "output": "crontab < cronjobs.txt"
  },
  {
    "input": "Create a job for restarting service daily",
    "output": "crontab -e # 0 4 * * * systemctl restart myservice"
  },
  {
    "input": "Backup database weekly",
    "output": "crontab -e # 0 3 * * 0 /db_backup.sh"
  },
  {
    "input": "Monitor system every minute",
    "output": "crontab -e # * * * * * /monitor.sh"
  },
  {
    "input": "Run a job at 11 PM on weekdays",
    "output": "crontab -e # 0 23 * * 1-5 /nightly.sh"
  },
  {
    "input": "Clear logs every month",
    "output": "crontab -e # 0 0 1 * * /clear_logs.sh"
  },
  {
    "input": "Reboot job for backup restore",
    "output": "crontab -e # @reboot /restore.sh"
  },
  {
    "input": "Run docker cleanup script every night",
    "output": "crontab -e # 0 1 * * * /docker_clean.sh"
  },
  {
    "input": "Show all environment variables",
    "output": "env"
  },
  {
    "input": "Display the current environment",
    "output": "env"
  },
  {
    "input": "List environment variables in the terminal",
    "output": "env"
  },
  {
    "input": "Print current shell environment",
    "output": "env"
  },
  {
    "input": "Check PATH variable and others",
    "output": "env"
  },
  {
    "input": "Display all environment settings",
    "output": "env"
  },
  {
    "input": "Get a list of all current environment variables",
    "output": "env"
  },
  {
    "input": "Print the shell’s environment",
    "output": "env"
  },
  {
    "input": "Show environment settings used by shell",
    "output": "env"
  },
  {
    "input": "List variables like HOME, PATH, and USER",
    "output": "env"
  },
  {
    "input": "Print all exported variables",
    "output": "env"
  },
  {
    "input": "Display all session variables",
    "output": "env"
  },
  {
    "input": "View full environment details",
    "output": "env"
  },
  {
    "input": "Show all set environment values",
    "output": "env"
  },
  {
    "input": "Check exported shell variables",
    "output": "env"
  },
  {
    "input": "See what's in the environment",
    "output": "env"
  },
  {
    "input": "Show env without running a command",
    "output": "env"
  },
  {
    "input": "Display login environment",
    "output": "env"
  },
  {
    "input": "Print list of active variables",
    "output": "env"
  },
  {
    "input": "Print current environment snapshot",
    "output": "env"
  },
  {
    "input": "Run a command with a modified environment",
    "output": "env VAR=value command"
  },
  {
    "input": "Run 'node' with a custom NODE_ENV value",
    "output": "env NODE_ENV=production node"
  },
  {
    "input": "Set TEMP=123 for a python script",
    "output": "env TEMP=123 python script.py"
  },
  {
    "input": "Execute echo with HELLO=world",
    "output": "env HELLO=world echo $HELLO"
  },
  {
    "input": "Run ls with a fake PATH",
    "output": "env PATH=/fake/bin ls"
  },
  {
    "input": "Set DEBUG=true and run app.js",
    "output": "env DEBUG=true node app.js"
  },
  {
    "input": "Launch bash with FOO=bar",
    "output": "env FOO=bar bash"
  },
  {
    "input": "Run curl with proxy set",
    "output": "env http_proxy=http://proxy curl example.com"
  },
  {
    "input": "Run command with LANG=C",
    "output": "env LANG=C command"
  },
  {
    "input": "Temporarily change environment for a command",
    "output": "env VAR1=value1 VAR2=value2 some_command"
  },
  {
    "input": "Use env to print variables before running program",
    "output": "env VAR=xyz ./program"
  },
  {
    "input": "Run a python script with custom ENV",
    "output": "env ENV=dev python script.py"
  },
  {
    "input": "Test a script with LOG_LEVEL=debug",
    "output": "env LOG_LEVEL=debug ./test.sh"
  },
  {
    "input": "Start Node.js server with PORT=8080",
    "output": "env PORT=8080 node server.js"
  },
  {
    "input": "Set HOME to /tmp while running ls",
    "output": "env HOME=/tmp ls"
  },
  {
    "input": "Run echo with a modified USER variable",
    "output": "env USER=testuser echo $USER"
  },
  {
    "input": "Run a C program with a custom environment",
    "output": "env VAR1=1 VAR2=2 ./a.out"
  },
  {
    "input": "Check if variable DEBUG is set during execution",
    "output": "env DEBUG=true echo $DEBUG"
  },
  {
    "input": "Set ENVIRONMENT=staging before running shell",
    "output": "env ENVIRONMENT=staging bash"
  },
  {
    "input": "Run Go app with ENV vars",
    "output": "env DB_USER=root DB_PASS=secret go run main.go"
  },
  {
    "input": "List environment variables in CI pipeline",
    "output": "env"
  },
  {
    "input": "Show available variables for docker run",
    "output": "env"
  },
  {
    "input": "Dump environment before running deployment script",
    "output": "env"
  },
  {
    "input": "Run make with CFLAGS defined in env",
    "output": "env CFLAGS=-O2 make"
  },
  {
    "input": "Run shell with restricted variables",
    "output": "env -i bash"
  },
  {
    "input": "Print empty environment",
    "output": "env -i"
  },
  {
    "input": "Clear all environment vars and start shell",
    "output": "env -i /bin/sh"
  },
  {
    "input": "Run command with empty environment",
    "output": "env -i command"
  },
  {
    "input": "Use env to simulate clean environment",
    "output": "env -i VAR=1 command"
  },
  {
    "input": "Run command without inheriting any variables",
    "output": "env -i SOME=thing ./app"
  },
  {
    "input": "Show PATH using env",
    "output": "env | grep PATH"
  },
  {
    "input": "Filter env for JAVA_HOME",
    "output": "env | grep JAVA_HOME"
  },
  {
    "input": "Get only SHELL environment var",
    "output": "env | grep SHELL"
  },
  {
    "input": "Check if TERM is set",
    "output": "env | grep TERM"
  },
  {
    "input": "Find all variables starting with LC_",
    "output": "env | grep '^LC_'"
  },
  {
    "input": "Print the DISPLAY variable from env",
    "output": "env | grep DISPLAY"
  },
  {
    "input": "Verify USER variable in environment",
    "output": "env | grep USER"
  },
  {
    "input": "See if EDITOR is set",
    "output": "env | grep EDITOR"
  },
  {
    "input": "Show LANG value",
    "output": "env | grep LANG"
  },
  {
    "input": "Look for PYTHONPATH in env",
    "output": "env | grep PYTHONPATH"
  },
  {
    "input": "Start shell with VAR1=value1 and no other env",
    "output": "env -i VAR1=value1 bash"
  },
  {
    "input": "Start python with only PATH and HOME set",
    "output": "env -i PATH=$PATH HOME=$HOME python"
  },
  {
    "input": "Debug a failing script with minimal environment",
    "output": "env -i DEBUG=true ./script.sh"
  },
  {
    "input": "Run sudo command with clean environment",
    "output": "sudo env -i command"
  },
  {
    "input": "Set environment and run as different user",
    "output": "sudo -u user env VAR=value command"
  },
  {
    "input": "Use env to simulate cron job environment",
    "output": "env -i PATH=/usr/bin:/bin ./cron_script.sh"
  },
  {
    "input": "Use env in Makefile to set variables",
    "output": "env VAR=val make"
  },
  {
    "input": "Inject config variables via env before running script",
    "output": "env CONFIG_PATH=/etc/config.json script.sh"
  },
  {
    "input": "Run script with temporary proxy settings",
    "output": "env http_proxy=http://127.0.0.1:3128 ./script.sh"
  },
  {
    "input": "Set multiple variables before launching GUI app",
    "output": "env QT_DEBUG_PLUGINS=1 LANG=en_US.UTF-8 ./gui-app"
  },
  {
    "input": "Run 'printenv' with env",
    "output": "env printenv"
  },
  {
    "input": "Print env and write to file",
    "output": "env > env_dump.txt"
  },
  {
    "input": "Redirect environment output",
    "output": "env > myenv.txt"
  },
  {
    "input": "Print and count environment variables",
    "output": "env | wc -l"
  },
  {
    "input": "Print specific environment variable using env and grep",
    "output": "env | grep HOME"
  },
  {
    "input": "Export custom variable and print env",
    "output": "env MYVAR=hello env"
  },
  {
    "input": "Run a docker container with custom ENV",
    "output": "docker run -e VAR=value alpine env"
  },
  {
    "input": "Set custom environment in ssh session",
    "output": "env VAR1=abc ssh user@host"
  },
  {
    "input": "Compare environments of two users",
    "output": "sudo -u user1 env; sudo -u user2 env"
  },
  {
    "input": "Temporarily override environment for one command",
    "output": "env TEMP=value ./script.sh"
  },
  {
    "input": "Show the list of all previously run commands",
    "output": "history"
  },
  {
    "input": "Display the shell command history",
    "output": "history"
  },
  {
    "input": "View all commands you've executed so far",
    "output": "history"
  },
  {
    "input": "List past commands in the current terminal session",
    "output": "history"
  },
  {
    "input": "Print the command history",
    "output": "history"
  },
  {
    "input": "Show command history with numbers",
    "output": "history"
  },
  {
    "input": "Get recent shell commands",
    "output": "history"
  },
  {
    "input": "Show the latest commands used",
    "output": "history"
  },
  {
    "input": "Check what commands were used earlier",
    "output": "history"
  },
  {
    "input": "Display the entire terminal history",
    "output": "history"
  },
  {
    "input": "List the last 5 commands",
    "output": "history | tail -n 5"
  },
  {
    "input": "Get the last 10 commands",
    "output": "history | tail -n 10"
  },
  {
    "input": "Get the last 20 commands from history",
    "output": "history | tail -n 20"
  },
  {
    "input": "Show top 10 commands from the history",
    "output": "history | head -n 10"
  },
  {
    "input": "Search for 'git' in command history",
    "output": "history | grep git"
  },
  {
    "input": "Find all docker commands used before",
    "output": "history | grep docker"
  },
  {
    "input": "Show commands that involved 'python'",
    "output": "history | grep python"
  },
  {
    "input": "Look up all curl commands in history",
    "output": "history | grep curl"
  },
  {
    "input": "Find previous npm commands",
    "output": "history | grep npm"
  },
  {
    "input": "Show command history related to ssh",
    "output": "history | grep ssh"
  },
  {
    "input": "Clear all command history",
    "output": "history -c"
  },
  {
    "input": "Wipe shell command history",
    "output": "history -c"
  },
  {
    "input": "Delete previous terminal commands",
    "output": "history -c"
  },
  {
    "input": "Clear command history from memory",
    "output": "history -c"
  },
  {
    "input": "Erase command history",
    "output": "history -c"
  },
  {
    "input": "Flush shell history",
    "output": "history -c"
  },
  {
    "input": "Remove everything from bash history",
    "output": "history -c"
  },
  {
    "input": "Delete saved command logs",
    "output": "history -c"
  },
  {
    "input": "Reset the command history",
    "output": "history -c"
  },
  {
    "input": "Clear out all history entries",
    "output": "history -c"
  },
  {
    "input": "Re-execute the last command",
    "output": "!!"
  },
  {
    "input": "Run the second last command again",
    "output": "!-2"
  },
  {
    "input": "Repeat the last used 'ls' command",
    "output": "!ls"
  },
  {
    "input": "Run the previous command starting with 'git'",
    "output": "!git"
  },
  {
    "input": "Execute command with number 101 from history",
    "output": "!101"
  },
  {
    "input": "Run a command from position 57 in history",
    "output": "!57"
  },
  {
    "input": "Re-run previous grep command",
    "output": "!grep"
  },
  {
    "input": "Repeat command starting with ssh",
    "output": "!ssh"
  },
  {
    "input": "Re-execute the most recent docker command",
    "output": "!docker"
  },
  {
    "input": "Run last command starting with pip",
    "output": "!pip"
  },
  {
    "input": "Append current session commands to history file",
    "output": "history -a"
  },
  {
    "input": "Write recent history to .bash_history file",
    "output": "history -a"
  },
  {
    "input": "Reload history from file",
    "output": "history -r"
  },
  {
    "input": "Read history from default file",
    "output": "history -r"
  },
  {
    "input": "Save history to file",
    "output": "history -w"
  },
  {
    "input": "Write history to .bash_history",
    "output": "history -w"
  },
  {
    "input": "Append all commands to history file",
    "output": "history -a && history -w"
  },
  {
    "input": "Merge history from disk with memory",
    "output": "history -n"
  },
  {
    "input": "Synchronize current history with saved file",
    "output": "history -a && history -r"
  },
  {
    "input": "Load new lines from history file",
    "output": "history -n"
  },
  {
    "input": "See how many commands are stored",
    "output": "history | wc -l"
  },
  {
    "input": "Count total number of commands used",
    "output": "history | wc -l"
  },
  {
    "input": "Search history for a command containing 'tar'",
    "output": "history | grep tar"
  },
  {
    "input": "Display history with only command names",
    "output": "history | awk '{$1=\"\"; print $0}'"
  },
  {
    "input": "Export shell history to a file",
    "output": "history > history.txt"
  },
  {
    "input": "Backup current session history",
    "output": "history > backup_history.txt"
  },
  {
    "input": "Store recent commands in a text file",
    "output": "history > commands.log"
  },
  {
    "input": "Filter bash history for sudo commands",
    "output": "history | grep sudo"
  },
  {
    "input": "Find package installation history",
    "output": "history | grep apt"
  },
  {
    "input": "List previously used compilation commands",
    "output": "history | grep gcc"
  },
  {
    "input": "See commands executed in early morning",
    "output": "history | grep 05:"
  },
  {
    "input": "Look for previously used python3 scripts",
    "output": "history | grep python3"
  },
  {
    "input": "Print commands containing 'make'",
    "output": "history | grep make"
  },
  {
    "input": "Search for last executed file-related commands",
    "output": "history | grep touch"
  },
  {
    "input": "See if you ran any 'kill' commands",
    "output": "history | grep kill"
  },
  {
    "input": "Show entries where rsync was used",
    "output": "history | grep rsync"
  },
  {
    "input": "Display all cd commands used",
    "output": "history | grep '^cd'"
  },
  {
    "input": "Show any rm commands",
    "output": "history | grep rm"
  },
  {
    "input": "Filter all chmod commands",
    "output": "history | grep chmod"
  },
  {
    "input": "Display pip installation history",
    "output": "history | grep 'pip install'"
  },
  {
    "input": "Delete specific command from history file",
    "output": "history -d 75"
  },
  {
    "input": "Remove command 123 from history",
    "output": "history -d 123"
  },
  {
    "input": "Delete the latest command from history",
    "output": "history -d $(history 1 | awk '{print $1}')"
  },
  {
    "input": "Permanently delete one command from memory",
    "output": "history -d <line_number>"
  },
  {
    "input": "Delete command number 50",
    "output": "history -d 50"
  },
  {
    "input": "Remove sudo command from history",
    "output": "history | grep -n sudo"
  },
  {
    "input": "Check history with timestamps",
    "output": "HISTTIMEFORMAT=\"%F %T \" history"
  },
  {
    "input": "Show when each command was run",
    "output": "HISTTIMEFORMAT=\"%d/%m/%y %T \" history"
  },
  {
    "input": "Display history with date and time",
    "output": "HISTTIMEFORMAT=\"%c \" history"
  },
  {
    "input": "Print command history with time included",
    "output": "HISTTIMEFORMAT=\"%F %T \" history"
  },
  {
    "input": "List all open files",
    "output": "lsof"
  },
  {
    "input": "Find files opened by process ID 1234",
    "output": "lsof -p 1234"
  },
  {
    "input": "List files opened by user 'john'",
    "output": "lsof -u john"
  },
  {
    "input": "Show all network connections",
    "output": "lsof -i"
  },
  {
    "input": "Show TCP connections only",
    "output": "lsof -i tcp"
  },
  {
    "input": "Show UDP connections only",
    "output": "lsof -i udp"
  },
  {
    "input": "Find files opened by a command 'sshd'",
    "output": "lsof -c sshd"
  },
  {
    "input": "Show all open files under /var/log",
    "output": "lsof +D /var/log"
  },
  {
    "input": "List files opened by root user",
    "output": "lsof -u root"
  },
  {
    "input": "Show open files for process named chrome",
    "output": "lsof -c chrome"
  },
  {
    "input": "Find files opened on port 22",
    "output": "lsof -i :22"
  },
  {
    "input": "Show all open IPv4 network connections",
    "output": "lsof -i 4"
  },
  {
    "input": "Show all open IPv6 network connections",
    "output": "lsof -i 6"
  },
  {
    "input": "Display open files for user ID 1000",
    "output": "lsof -u 1000"
  },
  {
    "input": "Show all open files by process 'python3'",
    "output": "lsof -c python3"
  },
  {
    "input": "Find open files in /tmp directory",
    "output": "lsof +D /tmp"
  },
  {
    "input": "Show open files related to device /dev/sda1",
    "output": "lsof /dev/sda1"
  },
  {
    "input": "Show open files for network port 80",
    "output": "lsof -i :80"
  },
  {
    "input": "Display files opened by process ID 4321",
    "output": "lsof -p 4321"
  },
  {
    "input": "List open files for current user",
    "output": "lsof -u $(whoami)"
  },
  {
    "input": "Check who is using a file /etc/passwd",
    "output": "lsof /etc/passwd"
  },
  {
    "input": "Show files opened by users alice and bob",
    "output": "lsof -u alice,bob"
  },
  {
    "input": "Show open files for PID 5678",
    "output": "lsof -p 5678"
  },
  {
    "input": "List open files on TCP port 443",
    "output": "lsof -i tcp:443"
  },
  {
    "input": "Display all files opened by systemd",
    "output": "lsof -c systemd"
  },
  {
    "input": "Show all open files in /home directory",
    "output": "lsof +D /home"
  },
  {
    "input": "Find who is using file /var/log/syslog",
    "output": "lsof /var/log/syslog"
  },
  {
    "input": "Show files opened over SSH",
    "output": "lsof -i tcp:ssh"
  },
  {
    "input": "List open files for user with UID 0",
    "output": "lsof -u 0"
  },
  {
    "input": "Find all open files in /opt",
    "output": "lsof +D /opt"
  },
  {
    "input": "Check what files are open under /etc",
    "output": "lsof +D /etc"
  },
  {
    "input": "Show open files on port 3306",
    "output": "lsof -i :3306"
  },
  {
    "input": "List open files by nginx process",
    "output": "lsof -c nginx"
  },
  {
    "input": "List files used by firefox",
    "output": "lsof -c firefox"
  },
  {
    "input": "Display open files with IPv6 only",
    "output": "lsof -i 6"
  },
  {
    "input": "Check open files on interface eth0",
    "output": "lsof -i@eth0"
  },
  {
    "input": "Find files used by port 53",
    "output": "lsof -i :53"
  },
  {
    "input": "List all open files sorted by PID",
    "output": "lsof | sort -k2"
  },
  {
    "input": "Find open files on port used by mysql",
    "output": "lsof -i :3306"
  },
  {
    "input": "Check if log files are in use",
    "output": "lsof /var/log/*"
  },
  {
    "input": "Run a script in background without hangup",
    "output": "nohup ./myscript.sh &"
  },
  {
    "input": "Run Python app with nohup",
    "output": "nohup python3 app.py &"
  },
  {
    "input": "Start long-running process with nohup",
    "output": "nohup longtask.sh &"
  },
  {
    "input": "Run backup script and ignore terminal hangups",
    "output": "nohup ./backup.sh &"
  },
  {
    "input": "Run a shell command persistently",
    "output": "nohup bash -c 'while true; do echo hello; sleep 1; done' &"
  },
  {
    "input": "Run server.js using node in background",
    "output": "nohup node server.js &"
  },
  {
    "input": "Launch a ping and let it keep running",
    "output": "nohup ping 8.8.8.8 > ping.log 2>&1 &"
  },
  {
    "input": "Run curl without interruption",
    "output": "nohup curl https://example.com &"
  },
  {
    "input": "Execute top and persist after logout",
    "output": "nohup top &"
  },
  {
    "input": "Run Java program in background safely",
    "output": "nohup java -jar app.jar &"
  },
  {
    "input": "Run C compiled program using nohup",
    "output": "nohup ./a.out &"
  },
  {
    "input": "Download large file without hangup",
    "output": "nohup wget http://example.com/bigfile.zip &"
  },
  {
    "input": "Run make command detached",
    "output": "nohup make build &"
  },
  {
    "input": "Run R script detached from terminal",
    "output": "nohup Rscript analysis.R &"
  },
  {
    "input": "Run ssh persistently",
    "output": "nohup ssh user@remotehost &"
  },
  {
    "input": "Run sleep command with nohup",
    "output": "nohup sleep 1000 &"
  },
  {
    "input": "Start gunicorn server safely",
    "output": "nohup gunicorn app:app &"
  },
  {
    "input": "Run Ruby script with nohup",
    "output": "nohup ruby script.rb &"
  },
  {
    "input": "Start Django server in background",
    "output": "nohup python manage.py runserver &"
  },
  {
    "input": "Run npm start detached",
    "output": "nohup npm start &"
  },
  {
    "input": "Run Flask app without interruption",
    "output": "nohup flask run &"
  },
  {
    "input": "Start background ffmpeg recording",
    "output": "nohup ffmpeg -i input.mp4 output.avi &"
  },
  {
    "input": "Run system update script persistently",
    "output": "nohup ./update.sh &"
  },
  {
    "input": "Start Jupyter server via nohup",
    "output": "nohup jupyter notebook &"
  },
  {
    "input": "Run shell loop without hangup",
    "output": "nohup bash -c 'while true; do date; sleep 60; done' &"
  },
  {
    "input": "Start stress test in background",
    "output": "nohup stress --cpu 2 --timeout 60 &"
  },
  {
    "input": "Launch monitoring script with nohup",
    "output": "nohup ./monitor.sh &"
  },
  {
    "input": "Run Go app in background",
    "output": "nohup ./go_app &"
  },
  {
    "input": "Run backup job with redirected output",
    "output": "nohup ./backup.sh > backup.log 2>&1 &"
  },
  {
    "input": "Run perl script safely",
    "output": "nohup perl script.pl &"
  },
  {
    "input": "Run rsync job in background",
    "output": "nohup rsync -avz source/ dest/ &"
  },
  {
    "input": "Start MongoDB in background",
    "output": "nohup mongod &"
  },
  {
    "input": "Start Python script with log",
    "output": "nohup python script.py > out.log 2>&1 &"
  },
  {
    "input": "Start data scraping in background",
    "output": "nohup python scraper.py &"
  },
  {
    "input": "Use nohup to run sleep 500",
    "output": "nohup sleep 500 &"
  },
  {
    "input": "Run infinite ping persistently",
    "output": "nohup ping google.com > ping_output.txt 2>&1 &"
  },
  {
    "input": "Run training script overnight",
    "output": "nohup python train.py &"
  },
  {
    "input": "Start tail on log file in background",
    "output": "nohup tail -f /var/log/syslog &"
  },
  {
    "input": "Run kubectl command persistently",
    "output": "nohup kubectl get pods -w &"
  },
  {
    "input": "Start flask app and log output",
    "output": "nohup flask run > flask.log 2>&1 &"
  },
  {
    "input": "Launch git pull with nohup",
    "output": "nohup git pull &"
  },
  {
    "input": "Run PostgreSQL server in background",
    "output": "nohup postgres &"
  },
  {
    "input": "Start simple http server in Python",
    "output": "nohup python3 -m http.server &"
  },
  {
    "input": "Execute batch job safely",
    "output": "nohup ./batch_job.sh &"
  },
  {
    "input": "Run kafka producer with nohup",
    "output": "nohup kafka-console-producer.sh --topic test &"
  },
  {
    "input": "Run spark job with nohup",
    "output": "nohup spark-submit job.py &"
  },
  {
    "input": "Run celery worker detached",
    "output": "nohup celery -A app worker &"
  },
  {
    "input": "Run ansible playbook with nohup",
    "output": "nohup ansible-playbook deploy.yml &"
  },
  {
    "input": "Keep syncing files in loop",
    "output": "nohup bash sync_loop.sh &"
  },
  {
    "input": "Start node app and redirect logs",
    "output": "nohup node index.js > app.log 2>&1 &"
  },
  {
    "input": "Run docker-compose with nohup",
    "output": "nohup docker-compose up &"
  },
  {
    "input": "Run model inference job in background",
    "output": "nohup python infer.py &"
  },
  {
    "input": "Execute cron task manually with nohup",
    "output": "nohup ./cronjob.sh &"
  },
  {
    "input": "Start long-running grep in background",
    "output": "nohup grep -r 'pattern' / &"
  },
  {
    "input": "Run time-consuming job quietly",
    "output": "nohup ./longjob.sh > /dev/null 2>&1 &"
  },
  {
    "input": "Run a command that takes 1 hour",
    "output": "nohup bash -c 'sleep 3600' &"
  },
  {
    "input": "Keep echoing time every 10 seconds",
    "output": "nohup bash -c 'while true; do date; sleep 10; done' &"
  },
  {
    "input": "Persist background tar compression",
    "output": "nohup tar czf backup.tar.gz /data &"
  },
  {
    "input": "Run SSH tunnel persistently",
    "output": "nohup ssh -N -L 8080:localhost:80 user@host &"
  },
  {
    "input": "Start X server using nohup",
    "output": "nohup startx &"
  },
  {
    "input": "Run bash script and log output",
    "output": "nohup ./script.sh > out.log 2>&1 &"
  },
  {
    "input": "Execute training.py with nohup",
    "output": "nohup python training.py &"
  },
  {
    "input": "Run command inside tmux with nohup",
    "output": "nohup tmux new-session -d 'top'"
  },
  {
    "input": "Run ping and save result",
    "output": "nohup ping 1.1.1.1 > log.txt &"
  },
  {
    "input": "Run Docker container restart script",
    "output": "nohup ./restart_docker.sh &"
  },
  {
    "input": "Start distributed job via nohup",
    "output": "nohup mpirun -np 4 ./parallel_job &"
  },
  {
    "input": "Run nginx start script safely",
    "output": "nohup ./start_nginx.sh &"
  },
  {
    "input": "Background cleanup script",
    "output": "nohup ./cleanup.sh &"
  },
  {
    "input": "Keep running network monitor script",
    "output": "nohup ./net_monitor.sh &"
  },
  {
    "input": "Use nohup for delay loop",
    "output": "nohup bash -c 'while true; do sleep 60; done' &"
  },
  {
    "input": "Run tmux session start script",
    "output": "nohup ./start_tmux.sh &"
  },
  {
    "input": "Persist update check in background",
    "output": "nohup ./check_updates.sh &"
  },
  {
    "input": "Start camera recording via script",
    "output": "nohup ./record.sh &"
  },
  {
    "input": "Execute daemon manually",
    "output": "nohup ./daemon.sh &"
  },
  {
    "input": "Run Java process and log",
    "output": "nohup java -cp . MainClass > out.txt 2>&1 &"
  },
  {
    "input": "Run test automation in background",
    "output": "nohup ./run_tests.sh &"
  },
  {
    "input": "Perform sync via script",
    "output": "nohup ./sync_data.sh &"
  },
  {
    "input": "Start log rotation manually",
    "output": "nohup ./rotate_logs.sh &"
  },
  {
    "input": "Persist environment diagnostics",
    "output": "nohup ./env_check.sh &"
  },
  {
    "input": "Run bot in background",
    "output": "nohup python bot.py &"
  },
  {
    "input": "Start a new screen session",
    "output": "screen"
  },
  {
    "input": "Create a new screen session named 'myjob'",
    "output": "screen -S myjob"
  },
  {
    "input": "List all active screen sessions",
    "output": "screen -ls"
  },
  {
    "input": "Reattach to the most recent screen session",
    "output": "screen -r"
  },
  {
    "input": "Reattach to a screen session with ID 1234",
    "output": "screen -r 1234"
  },
  {
    "input": "Start screen session that runs top",
    "output": "screen -S monitor top"
  },
  {
    "input": "Detach from current screen session",
    "output": "Ctrl-a d"
  },
  {
    "input": "Kill a screen session named 'test'",
    "output": "screen -S test -X quit"
  },
  {
    "input": "Start a new session named backup",
    "output": "screen -S backup"
  },
  {
    "input": "Reconnect to screen session 'data'",
    "output": "screen -r data"
  },
  {
    "input": "Start a screen session and run python3",
    "output": "screen -S pyenv python3"
  },
  {
    "input": "Check screen sessions",
    "output": "screen -ls"
  },
  {
    "input": "Kill all screen sessions",
    "output": "pkill screen"
  },
  {
    "input": "Start screen and run shell script",
    "output": "screen -S updates ./update.sh"
  },
  {
    "input": "Create screen session and run ping",
    "output": "screen -S netwatch ping 8.8.8.8"
  },
  {
    "input": "Exit screen session",
    "output": "exit"
  },
  {
    "input": "Detach using keyboard",
    "output": "Ctrl-a d"
  },
  {
    "input": "Reattach screen with partial name",
    "output": "screen -r myjob"
  },
  {
    "input": "Use screen for persistent command",
    "output": "screen -S longtask sleep 1000"
  },
  {
    "input": "Detach and logout",
    "output": "Ctrl-a d && exit"
  },
  {
    "input": "Send command to screen session",
    "output": "screen -S mysession -X stuff 'ls\\n'"
  },
  {
    "input": "Start screen session for logs",
    "output": "screen -S logs tail -f /var/log/syslog"
  },
  {
    "input": "Kill screen by session ID",
    "output": "screen -X -S 1234.pts-0.hostname quit"
  },
  {
    "input": "Create screen for background process",
    "output": "screen -S downloader wget largefile.zip"
  },
  {
    "input": "Reattach to named screen",
    "output": "screen -r monitor"
  },
  {
    "input": "List screen sessions before reconnecting",
    "output": "screen -ls"
  },
  {
    "input": "Start interactive bash in screen",
    "output": "screen -S shell bash"
  },
  {
    "input": "Run custom job inside screen",
    "output": "screen -S job ./job.sh"
  },
  {
    "input": "Screen session for machine learning training",
    "output": "screen -S training python train.py"
  },
  {
    "input": "Detach screen after running",
    "output": "Ctrl-a d"
  },
  {
    "input": "Send Ctrl+C to screen session",
    "output": "screen -S mysession -X stuff '^C'"
  },
  {
    "input": "Create a screen that auto logs output",
    "output": "screen -L -S outputlog"
  },
  {
    "input": "Run tail -f in a screen",
    "output": "screen -S watch tail -f /var/log/messages"
  },
  {
    "input": "Use screen to run a long simulation",
    "output": "screen -S sim python simulate.py"
  },
  {
    "input": "Exit from screen completely",
    "output": "exit"
  },
  {
    "input": "Use screen in interactive mode",
    "output": "screen -S interactive"
  },
  {
    "input": "Start screen and log everything",
    "output": "screen -L -S full_log"
  },
  {
    "input": "Send restart command to screen",
    "output": "screen -S nginx -X stuff 'sudo systemctl restart nginx\\n'"
  },
  {
    "input": "Start screen for database shell",
    "output": "screen -S mysql mysql -u root -p"
  },
  {
    "input": "Monitor system with screen and htop",
    "output": "screen -S sysmon htop"
  },
  {
    "input": "Check how many screen sessions are open",
    "output": "screen -ls"
  },
  {
    "input": "Start screen for text editor",
    "output": "screen -S editor nano file.txt"
  },
  {
    "input": "Automatically run top in screen",
    "output": "screen -dmS watchtop top"
  },
  {
    "input": "Screen session for git pull",
    "output": "screen -S deploy git pull"
  },
  {
    "input": "Run screen session with interactive bash",
    "output": "screen -S dev bash"
  },
  {
    "input": "Kill screen by name",
    "output": "screen -X -S training quit"
  },
  {
    "input": "Detach screen with keyboard",
    "output": "Ctrl-a d"
  },
  {
    "input": "Use screen for persistent SSH",
    "output": "screen -S sshsession ssh user@host"
  },
  {
    "input": "Run Django server inside screen",
    "output": "screen -S django python manage.py runserver"
  },
  {
    "input": "Use screen to test code interactively",
    "output": "screen -S testenv python3"
  },
  {
    "input": "Screen for monitoring cron logs",
    "output": "screen -S cronlogs tail -f /var/log/cron.log"
  },
  {
    "input": "Run screen for Docker logs",
    "output": "screen -S dockerlogs docker logs -f mycontainer"
  },
  {
    "input": "Reattach screen by session name",
    "output": "screen -r dockerlogs"
  },
  {
    "input": "Start screen for CPU benchmark",
    "output": "screen -S benchmark stress --cpu 4"
  },
  {
    "input": "Detach using Ctrl command",
    "output": "Ctrl-a d"
  },
  {
    "input": "Reattach latest screen if only one",
    "output": "screen -r"
  },
  {
    "input": "Screen for editing files",
    "output": "screen -S edit vim main.py"
  },
  {
    "input": "Create a silent screen session",
    "output": "screen -dmS silentjob"
  },
  {
    "input": "Run background command in screen",
    "output": "screen -dmS backup ./backup.sh"
  },
  {
    "input": "Run log parsing with screen",
    "output": "screen -S parser python parse_logs.py"
  },
  {
    "input": "Screen for automation script",
    "output": "screen -S autoscript ./auto.sh"
  },
  {
    "input": "Automatically start and detach screen",
    "output": "screen -dmS detached echo 'hi'"
  },
  {
    "input": "Use screen with name and command",
    "output": "screen -S monitor bash monitor.sh"
  },
  {
    "input": "Send input to screen session",
    "output": "screen -S autoscript -X stuff 'q\\n'"
  },
  {
    "input": "Quick start screen and detach",
    "output": "screen -dmS quicktop top"
  },
  {
    "input": "Kill screen after task",
    "output": "screen -S deploy -X quit"
  },
  {
    "input": "Start Python REPL with screen",
    "output": "screen -S repl python3"
  },
  {
    "input": "Run node server with screen",
    "output": "screen -S node node server.js"
  },
  {
    "input": "Run Go app in screen session",
    "output": "screen -S goapp ./app"
  },
  {
    "input": "Run TensorFlow training in screen",
    "output": "screen -S tf python train.py"
  },
  {
    "input": "Create a session that logs to file",
    "output": "screen -L -S logfile"
  },
  {
    "input": "Start bash shell with screen",
    "output": "screen -S shell bash"
  },
  {
    "input": "Send Ctrl+D to session",
    "output": "screen -S shell -X stuff '^D'"
  },
  {
    "input": "View logs from screen session",
    "output": "less screenlog.0"
  },
  {
    "input": "Monitor CPU temp inside screen",
    "output": "screen -S cputemp watch sensors"
  },
  {
    "input": "Run remote job with screen",
    "output": "screen -S remote ssh user@server 'longtask.sh'"
  },
  {
    "input": "Create minimal screen session",
    "output": "screen -dmS temp"
  },
  {
    "input": "Screen for live disk usage",
    "output": "screen -S duwatch watch df -h"
  },
  {
    "input": "Start Redis server in screen",
    "output": "screen -S redis redis-server"
  },
  {
    "input": "Run system upgrade inside screen",
    "output": "screen -S upgrade sudo apt update && sudo apt upgrade"
  },
  {
    "input": "Start the nginx service",
    "output": "service nginx start"
  },
  {
    "input": "Stop the mysql service",
    "output": "service mysql stop"
  },
  {
    "input": "Restart the apache2 service",
    "output": "service apache2 restart"
  },
  {
    "input": "Reload the ssh service",
    "output": "service ssh reload"
  },
  {
    "input": "Check the status of docker service",
    "output": "service docker status"
  },
  {
    "input": "Start the cron service",
    "output": "service cron start"
  },
  {
    "input": "Stop the bluetooth service",
    "output": "service bluetooth stop"
  },
  {
    "input": "Restart the postfix service",
    "output": "service postfix restart"
  },
  {
    "input": "Reload the cups service",
    "output": "service cups reload"
  },
  {
    "input": "Check the status of the ufw firewall",
    "output": "service ufw status"
  },
  {
    "input": "Start the apache2 web server",
    "output": "service apache2 start"
  },
  {
    "input": "Stop the samba service",
    "output": "service smbd stop"
  },
  {
    "input": "Restart the mysql service",
    "output": "service mysql restart"
  },
  {
    "input": "Check if ssh is running",
    "output": "service ssh status"
  },
  {
    "input": "Start the smbd service",
    "output": "service smbd start"
  },
  {
    "input": "Stop the cron daemon",
    "output": "service cron stop"
  },
  {
    "input": "Restart the network service",
    "output": "service networking restart"
  },
  {
    "input": "Reload the nginx server",
    "output": "service nginx reload"
  },
  {
    "input": "Check cups printing service status",
    "output": "service cups status"
  },
  {
    "input": "Start the ufw firewall",
    "output": "service ufw start"
  },
  {
    "input": "Stop the apache2 service",
    "output": "service apache2 stop"
  },
  {
    "input": "Restart the rsyslog service",
    "output": "service rsyslog restart"
  },
  {
    "input": "Reload the mysql service",
    "output": "service mysql reload"
  },
  {
    "input": "Check the smbd status",
    "output": "service smbd status"
  },
  {
    "input": "Start the avahi-daemon",
    "output": "service avahi-daemon start"
  },
  {
    "input": "Stop the ssh service",
    "output": "service ssh stop"
  },
  {
    "input": "Restart the fail2ban service",
    "output": "service fail2ban restart"
  },
  {
    "input": "Check if NetworkManager is active",
    "output": "service NetworkManager status"
  },
  {
    "input": "Start the docker service",
    "output": "service docker start"
  },
  {
    "input": "Stop the docker service",
    "output": "service docker stop"
  },
  {
    "input": "Restart the cron service",
    "output": "service cron restart"
  },
  {
    "input": "Reload the ssh configuration",
    "output": "service ssh reload"
  },
  {
    "input": "Start the rsyslog daemon",
    "output": "service rsyslog start"
  },
  {
    "input": "Stop the postfix service",
    "output": "service postfix stop"
  },
  {
    "input": "Restart the bluetooth service",
    "output": "service bluetooth restart"
  },
  {
    "input": "Check apache2 server status",
    "output": "service apache2 status"
  },
  {
    "input": "Start the NetworkManager service",
    "output": "service NetworkManager start"
  },
  {
    "input": "Stop the rsyslog service",
    "output": "service rsyslog stop"
  },
  {
    "input": "Restart the smbd daemon",
    "output": "service smbd restart"
  },
  {
    "input": "Reload the postfix service",
    "output": "service postfix reload"
  },
  {
    "input": "Start the cups print service",
    "output": "service cups start"
  },
  {
    "input": "Stop the avahi-daemon",
    "output": "service avahi-daemon stop"
  },
  {
    "input": "Restart the ufw firewall",
    "output": "service ufw restart"
  },
  {
    "input": "Reload the docker daemon",
    "output": "service docker reload"
  },
  {
    "input": "Start ssh service immediately",
    "output": "service ssh start"
  },
  {
    "input": "Stop cups printing service",
    "output": "service cups stop"
  },
  {
    "input": "Restart the apache2 server",
    "output": "service apache2 restart"
  },
  {
    "input": "Check the status of cron",
    "output": "service cron status"
  },
  {
    "input": "Start mysql database service",
    "output": "service mysql start"
  },
  {
    "input": "Stop mysql database service",
    "output": "service mysql stop"
  },
  {
    "input": "Restart docker service",
    "output": "service docker restart"
  },
  {
    "input": "Reload bluetooth service",
    "output": "service bluetooth reload"
  },
  {
    "input": "Check if smbd is running",
    "output": "service smbd status"
  },
  {
    "input": "Start postfix email service",
    "output": "service postfix start"
  },
  {
    "input": "Stop postfix email service",
    "output": "service postfix stop"
  },
  {
    "input": "Restart NetworkManager",
    "output": "service NetworkManager restart"
  },
  {
    "input": "Reload rsyslog config",
    "output": "service rsyslog reload"
  },
  {
    "input": "Start the fail2ban service",
    "output": "service fail2ban start"
  },
  {
    "input": "Stop the fail2ban service",
    "output": "service fail2ban stop"
  },
  {
    "input": "Check postfix status",
    "output": "service postfix status"
  },
  {
    "input": "Start a failing service 'failtest'",
    "output": "service failtest start"
  },
  {
    "input": "Stop a failing service 'failtest'",
    "output": "service failtest stop"
  },
  {
    "input": "Restart a failing service 'failtest'",
    "output": "service failtest restart"
  },
  {
    "input": "Check status of a failing service 'failtest'",
    "output": "service failtest status"
  },
  {
    "input": "Reload apache2 configuration",
    "output": "service apache2 reload"
  },
  {
    "input": "Start nginx server now",
    "output": "service nginx start"
  },
  {
    "input": "Stop nginx server now",
    "output": "service nginx stop"
  },
  {
    "input": "Restart nginx server",
    "output": "service nginx restart"
  },
  {
    "input": "Check nginx status",
    "output": "service nginx status"
  },
  {
    "input": "Reload nginx configuration",
    "output": "service nginx reload"
  },
  {
    "input": "Pause for 5 seconds",
    "output": "sleep 5"
  },
  {
    "input": "Sleep for 1 minute",
    "output": "sleep 60"
  },
  {
    "input": "Delay script by 10 seconds",
    "output": "sleep 10"
  },
  {
    "input": "Sleep for half a second",
    "output": "sleep 0.5"
  },
  {
    "input": "Wait for 2 minutes",
    "output": "sleep 120"
  },
  {
    "input": "Pause for 3 hours",
    "output": "sleep 10800"
  },
  {
    "input": "Sleep for 0.2 seconds",
    "output": "sleep 0.2"
  },
  {
    "input": "Wait for 1 hour",
    "output": "sleep 3600"
  },
  {
    "input": "Sleep for 3 minutes and 30 seconds",
    "output": "sleep 210"
  },
  {
    "input": "Pause script for 45 seconds",
    "output": "sleep 45"
  },
  {
    "input": "Delay execution by 90 seconds",
    "output": "sleep 90"
  },
  {
    "input": "Pause for 4.2 seconds",
    "output": "sleep 4.2"
  },
  {
    "input": "Sleep for 0.05 seconds",
    "output": "sleep 0.05"
  },
  {
    "input": "Wait 10 minutes",
    "output": "sleep 600"
  },
  {
    "input": "Pause for 1.25 minutes",
    "output": "sleep 75"
  },
  {
    "input": "Sleep between two commands for 1 sec",
    "output": "sleep 1"
  },
  {
    "input": "Hold process for 7 seconds",
    "output": "sleep 7"
  },
  {
    "input": "Pause for 2.5 minutes",
    "output": "sleep 150"
  },
  {
    "input": "Sleep before retrying a command",
    "output": "sleep 2"
  },
  {
    "input": "Wait for 6 seconds between loops",
    "output": "sleep 6"
  },
  {
    "input": "Pause for 8.8 seconds",
    "output": "sleep 8.8"
  },
  {
    "input": "Sleep 0.01 seconds",
    "output": "sleep 0.01"
  },
  {
    "input": "Pause for 13 seconds",
    "output": "sleep 13"
  },
  {
    "input": "Wait 5 minutes",
    "output": "sleep 300"
  },
  {
    "input": "Delay next command for 0.8 seconds",
    "output": "sleep 0.8"
  },
  {
    "input": "Pause for 1 day",
    "output": "sleep 86400"
  },
  {
    "input": "Sleep 100 milliseconds",
    "output": "sleep 0.1"
  },
  {
    "input": "Wait 2 hours",
    "output": "sleep 7200"
  },
  {
    "input": "Pause 10.5 seconds",
    "output": "sleep 10.5"
  },
  {
    "input": "Pause execution for 0.7 seconds",
    "output": "sleep 0.7"
  },
  {
    "input": "Sleep 0.25 seconds",
    "output": "sleep 0.25"
  },
  {
    "input": "Pause for 200 seconds",
    "output": "sleep 200"
  },
  {
    "input": "Sleep for 15 seconds",
    "output": "sleep 15"
  },
  {
    "input": "Wait for 999 seconds",
    "output": "sleep 999"
  },
  {
    "input": "Sleep before starting process",
    "output": "sleep 3"
  },
  {
    "input": "Add a 12-second delay",
    "output": "sleep 12"
  },
  {
    "input": "Wait 30 seconds",
    "output": "sleep 30"
  },
  {
    "input": "Sleep for 6.9 seconds",
    "output": "sleep 6.9"
  },
  {
    "input": "Hold task for 0.6 seconds",
    "output": "sleep 0.6"
  },
  {
    "input": "Sleep for 1.5 minutes",
    "output": "sleep 90"
  },
  {
    "input": "Wait for 4 hours",
    "output": "sleep 14400"
  },
  {
    "input": "Pause for 0.03 seconds",
    "output": "sleep 0.03"
  },
  {
    "input": "Sleep for 2.2 minutes",
    "output": "sleep 132"
  },
  {
    "input": "Wait for 20 minutes",
    "output": "sleep 1200"
  },
  {
    "input": "Sleep between retries",
    "output": "sleep 5"
  },
  {
    "input": "Pause for 0.001 seconds",
    "output": "sleep 0.001"
  },
  {
    "input": "Wait 1.1 seconds",
    "output": "sleep 1.1"
  },
  {
    "input": "Sleep before shutting down",
    "output": "sleep 60"
  },
  {
    "input": "Delay response 10s",
    "output": "sleep 10"
  },
  {
    "input": "Pause execution for 60s",
    "output": "sleep 60"
  },
  {
    "input": "Sleep 50 seconds",
    "output": "sleep 50"
  },
  {
    "input": "Wait for 1800 seconds",
    "output": "sleep 1800"
  },
  {
    "input": "Sleep 0.09 seconds",
    "output": "sleep 0.09"
  },
  {
    "input": "Delay 2.75 minutes",
    "output": "sleep 165"
  },
  {
    "input": "Sleep for 3.3 seconds",
    "output": "sleep 3.3"
  },
  {
    "input": "Pause for 111 seconds",
    "output": "sleep 111"
  },
  {
    "input": "Sleep 0.4 seconds",
    "output": "sleep 0.4"
  },
  {
    "input": "Wait 888 seconds",
    "output": "sleep 888"
  },
  {
    "input": "Sleep before running job",
    "output": "sleep 15"
  },
  {
    "input": "Pause for 666 seconds",
    "output": "sleep 666"
  },
  {
    "input": "Delay script by 0.6 seconds",
    "output": "sleep 0.6"
  },
  {
    "input": "Sleep for 3.14 seconds",
    "output": "sleep 3.14"
  },
  {
    "input": "Wait before retry in loop",
    "output": "sleep 1"
  },
  {
    "input": "Sleep for 1000 seconds",
    "output": "sleep 1000"
  },
  {
    "input": "Wait for 250 seconds",
    "output": "sleep 250"
  },
  {
    "input": "Sleep for 5 milliseconds",
    "output": "sleep 0.005"
  },
  {
    "input": "Pause process for 0.02 seconds",
    "output": "sleep 0.02"
  },
  {
    "input": "Wait for a short duration",
    "output": "sleep 2"
  },
  {
    "input": "Sleep for long-running delay",
    "output": "sleep 10000"
  },
  {
    "input": "Wait before next retry",
    "output": "sleep 8"
  },
  {
    "input": "Sleep for 11 minutes",
    "output": "sleep 660"
  },
  {
    "input": "Pause task 22 seconds",
    "output": "sleep 22"
  },
  {
    "input": "Delay execution by 0.33 seconds",
    "output": "sleep 0.33"
  },
  {
    "input": "Sleep for 77 seconds",
    "output": "sleep 77"
  },
  {
    "input": "Wait 0.75 seconds",
    "output": "sleep 0.75"
  },
  {
    "input": "Sleep for 3.7 seconds",
    "output": "sleep 3.7"
  },
  {
    "input": "Sleep for 2700 seconds",
    "output": "sleep 2700"
  },
  {
    "input": "Pause for 42 seconds",
    "output": "sleep 42"
  },
  {
    "input": "Delay program for 0.12 seconds",
    "output": "sleep 0.12"
  },
  {
    "input": "Sleep 2 seconds in shell",
    "output": "sleep 2"
  },
  {
    "input": "Add a delay of 9 seconds",
    "output": "sleep 9"
  },
  {
    "input": "Sleep between script retries",
    "output": "sleep 20"
  },
  {
    "input": "Wait for 123 seconds",
    "output": "sleep 123"
  },
  {
    "input": "Sleep in shell script for 0.09 seconds",
    "output": "sleep 0.09"
  },
  {
    "input": "Pause for 404 seconds",
    "output": "sleep 404"
  },
  {
    "input": "Sleep before killing a process",
    "output": "sleep 4"
  },
  {
    "input": "Wait before system shutdown",
    "output": "sleep 180"
  },
  {
    "input": "Add artificial delay of 0.3 seconds",
    "output": "sleep 0.3"
  },
  {
    "input": "Sleep for 2.8 seconds",
    "output": "sleep 2.8"
  },
  {
    "input": "Pause for 5.5 seconds",
    "output": "sleep 5.5"
  },
  {
    "input": "Start the nginx service",
    "output": "systemctl start nginx"
  },
  {
    "input": "Stop the mysql service",
    "output": "systemctl stop mysql"
  },
  {
    "input": "Restart the apache2 service",
    "output": "systemctl restart apache2"
  },
  {
    "input": "Reload the sshd service",
    "output": "systemctl reload sshd"
  },
  {
    "input": "Enable the docker service to start at boot",
    "output": "systemctl enable docker"
  },
  {
    "input": "Disable the bluetooth service",
    "output": "systemctl disable bluetooth"
  },
  {
    "input": "Check the status of the nginx service",
    "output": "systemctl status nginx"
  },
  {
    "input": "List all running services",
    "output": "systemctl list-units --type=service --state=running"
  },
  {
    "input": "List all enabled services",
    "output": "systemctl list-unit-files --state=enabled"
  },
  {
    "input": "Mask the telnet service to prevent it from being started",
    "output": "systemctl mask telnet"
  },
  {
    "input": "Unmask the telnet service",
    "output": "systemctl unmask telnet"
  },
  {
    "input": "Restart the NetworkManager service",
    "output": "systemctl restart NetworkManager"
  },
  {
    "input": "Start the postgresql service",
    "output": "systemctl start postgresql"
  },
  {
    "input": "Stop the ufw firewall service",
    "output": "systemctl stop ufw"
  },
  {
    "input": "Enable apache2 service to run at startup",
    "output": "systemctl enable apache2"
  },
  {
    "input": "Check if docker service is enabled",
    "output": "systemctl is-enabled docker"
  },
  {
    "input": "Check if nginx is active",
    "output": "systemctl is-active nginx"
  },
  {
    "input": "Show all failed services",
    "output": "systemctl --failed"
  },
  {
    "input": "Get list of all services",
    "output": "systemctl list-units --type=service"
  },
  {
    "input": "Restart sshd service with force",
    "output": "systemctl restart sshd"
  },
  {
    "input": "Show the status of all units",
    "output": "systemctl list-units"
  },
  {
    "input": "View all unit files",
    "output": "systemctl list-unit-files"
  },
  {
    "input": "Start the cron service",
    "output": "systemctl start cron"
  },
  {
    "input": "Stop the cups service",
    "output": "systemctl stop cups"
  },
  {
    "input": "Restart the rsyslog service",
    "output": "systemctl restart rsyslog"
  },
  {
    "input": "Reload systemd manager configuration",
    "output": "systemctl daemon-reexec"
  },
  {
    "input": "Re-execute systemd to reload configs",
    "output": "systemctl daemon-reexec"
  },
  {
    "input": "Reenable the ssh service",
    "output": "systemctl reenable ssh"
  },
  {
    "input": "Disable nginx from starting automatically",
    "output": "systemctl disable nginx"
  },
  {
    "input": "Show dependencies for the ssh service",
    "output": "systemctl list-dependencies ssh"
  },
  {
    "input": "Display the status of docker",
    "output": "systemctl status docker"
  },
  {
    "input": "Force stop apache2",
    "output": "systemctl stop apache2"
  },
  {
    "input": "Show all active units",
    "output": "systemctl list-units --state=active"
  },
  {
    "input": "Show systemctl version",
    "output": "systemctl --version"
  },
  {
    "input": "Start mysql service now",
    "output": "systemctl start mysql"
  },
  {
    "input": "Restart the snapd service",
    "output": "systemctl restart snapd"
  },
  {
    "input": "Check status of systemd-journald",
    "output": "systemctl status systemd-journald"
  },
  {
    "input": "Mask the telnet.socket",
    "output": "systemctl mask telnet.socket"
  },
  {
    "input": "Unmask the telnet.socket",
    "output": "systemctl unmask telnet.socket"
  },
  {
    "input": "Enable cron",
    "output": "systemctl enable cron"
  },
  {
    "input": "Reload cron service configuration",
    "output": "systemctl reload cron"
  },
  {
    "input": "Disable avahi-daemon service",
    "output": "systemctl disable avahi-daemon"
  },
  {
    "input": "Enable bluetooth service",
    "output": "systemctl enable bluetooth"
  },
  {
    "input": "Start smbd service",
    "output": "systemctl start smbd"
  },
  {
    "input": "Stop smbd service",
    "output": "systemctl stop smbd"
  },
  {
    "input": "Restart smbd service",
    "output": "systemctl restart smbd"
  },
  {
    "input": "Check if cron is enabled",
    "output": "systemctl is-enabled cron"
  },
  {
    "input": "Reload the apache2 service",
    "output": "systemctl reload apache2"
  },
  {
    "input": "List inactive services",
    "output": "systemctl list-units --type=service --state=inactive"
  },
  {
    "input": "Show dependencies of systemd",
    "output": "systemctl list-dependencies systemd"
  },
  {
    "input": "Stop a failing service 'failtest'",
    "output": "systemctl stop failtest"
  },
  {
    "input": "Unmask a previously masked service",
    "output": "systemctl unmask apache2"
  },
  {
    "input": "Enable and start NetworkManager",
    "output": "systemctl enable --now NetworkManager"
  },
  {
    "input": "Disable and stop postfix",
    "output": "systemctl disable --now postfix"
  },
  {
    "input": "Restart cups service quietly",
    "output": "systemctl restart cups"
  },
  {
    "input": "Reload all daemons",
    "output": "systemctl daemon-reexec"
  },
  {
    "input": "Display failed services",
    "output": "systemctl --failed"
  },
  {
    "input": "Enable fail2ban service",
    "output": "systemctl enable fail2ban"
  },
  {
    "input": "Stop fail2ban",
    "output": "systemctl stop fail2ban"
  },
  {
    "input": "Check if firewalld is active",
    "output": "systemctl is-active firewalld"
  },
  {
    "input": "Start a new tmux session",
    "output": "tmux"
  },
  {
    "input": "Create a new tmux session named 'work'",
    "output": "tmux new -s work"
  },
  {
    "input": "List all tmux sessions",
    "output": "tmux ls"
  },
  {
    "input": "Attach to the last used tmux session",
    "output": "tmux attach"
  },
  {
    "input": "Attach to a tmux session named 'dev'",
    "output": "tmux attach -t dev"
  },
  {
    "input": "Kill a tmux session named 'test'",
    "output": "tmux kill-session -t test"
  },
  {
    "input": "Rename current tmux session to 'main'",
    "output": "tmux rename-session -t 0 main"
  },
  {
    "input": "Detach from the current tmux session",
    "output": "Ctrl-b d"
  },
  {
    "input": "Split tmux window vertically",
    "output": "Ctrl-b %"
  },
  {
    "input": "Split tmux window horizontally",
    "output": "Ctrl-b \""
  },
  {
    "input": "Create a new window in tmux",
    "output": "Ctrl-b c"
  },
  {
    "input": "Switch to the next window in tmux",
    "output": "Ctrl-b n"
  },
  {
    "input": "Switch to previous window in tmux",
    "output": "Ctrl-b p"
  },
  {
    "input": "List all windows in tmux",
    "output": "Ctrl-b w"
  },
  {
    "input": "Kill the current tmux window",
    "output": "Ctrl-b &"
  },
  {
    "input": "Kill the current tmux pane",
    "output": "Ctrl-b x"
  },
  {
    "input": "Resize current pane upwards",
    "output": "Ctrl-b :resize-pane -U 5"
  },
  {
    "input": "Resize current pane downwards",
    "output": "Ctrl-b :resize-pane -D 5"
  },
  {
    "input": "Move to the pane on the right",
    "output": "Ctrl-b →"
  },
  {
    "input": "Move to the pane on the left",
    "output": "Ctrl-b ←"
  },
  {
    "input": "Start tmux session with shell script",
    "output": "tmux new -s backup './backup.sh'"
  },
  {
    "input": "Create and detach tmux session named 'logs'",
    "output": "tmux new -d -s logs"
  },
  {
    "input": "Kill all tmux sessions",
    "output": "tmux kill-server"
  },
  {
    "input": "Scroll up in tmux",
    "output": "Ctrl-b ["
  },
  {
    "input": "Create a session with logging enabled",
    "output": "tmux new -s logsession"
  },
  {
    "input": "Send command to tmux session",
    "output": "tmux send-keys -t logs 'ls -l' C-m"
  },
  {
    "input": "Start a Python REPL in tmux session",
    "output": "tmux new -s py python3"
  },
  {
    "input": "Run a node server in tmux",
    "output": "tmux new -s server 'node app.js'"
  },
  {
    "input": "Start a detached tmux session running top",
    "output": "tmux new -d -s top 'top'"
  },
  {
    "input": "Display all tmux key bindings",
    "output": "Ctrl-b ?"
  },
  {
    "input": "Switch to window 1",
    "output": "Ctrl-b 1"
  },
  {
    "input": "Switch to window 0",
    "output": "Ctrl-b 0"
  },
  {
    "input": "Rename current window",
    "output": "Ctrl-b ,"
  },
  {
    "input": "Toggle between last two windows",
    "output": "Ctrl-b l"
  },
  {
    "input": "Detach from tmux safely",
    "output": "Ctrl-b d"
  },
  {
    "input": "Reload tmux configuration",
    "output": "tmux source-file ~/.tmux.conf"
  },
  {
    "input": "Send Ctrl+C to pane",
    "output": "tmux send-keys -t dev C-c"
  },
  {
    "input": "Paste from tmux buffer",
    "output": "Ctrl-b ]"
  },
  {
    "input": "Enter command mode in tmux",
    "output": "Ctrl-b :"
  },
  {
    "input": "List all panes in current window",
    "output": "Ctrl-b q"
  },
  {
    "input": "Zoom in on current pane",
    "output": "Ctrl-b z"
  },
  {
    "input": "Create new session and run bash",
    "output": "tmux new-session -s shell bash"
  },
  {
    "input": "Reattach to named session 'ml'",
    "output": "tmux attach -t ml"
  },
  {
    "input": "Kill tmux window by name",
    "output": "tmux kill-window -t 1"
  },
  {
    "input": "Capture tmux screen output",
    "output": "tmux capture-pane -S -"
  },
  {
    "input": "Save captured output to file",
    "output": "tmux save-buffer ~/tmux-buffer.txt"
  },
  {
    "input": "Paste last yanked buffer",
    "output": "tmux paste-buffer"
  },
  {
    "input": "Send multiple commands to tmux session",
    "output": "tmux send-keys -t shell 'cd / && ls' C-m"
  },
  {
    "input": "Create session in detached mode",
    "output": "tmux new-session -d -s silent"
  },
  {
    "input": "Run long task in tmux",
    "output": "tmux new -s job 'sleep 300'"
  },
  {
    "input": "Run htop inside tmux",
    "output": "tmux new -s sys htop"
  },
  {
    "input": "Run Flask app in tmux",
    "output": "tmux new -s flask 'flask run'"
  },
  {
    "input": "Monitor logs with tail inside tmux",
    "output": "tmux new -s logs 'tail -f /var/log/syslog'"
  },
  {
    "input": "Move current pane to a new window",
    "output": "Ctrl-b ! "
  },
  {
    "input": "Switch pane layout to even-horizontal",
    "output": "Ctrl-b Space"
  },
  {
    "input": "Toggle pane synchronization",
    "output": "Ctrl-b :setw synchronize-panes"
  },
  {
    "input": "View all current bindings",
    "output": "Ctrl-b ?"
  },
  {
    "input": "Detach session from remote server",
    "output": "Ctrl-b d"
  },
  {
    "input": "Exit tmux session",
    "output": "exit"
  },
  {
    "input": "Lock tmux session",
    "output": "Ctrl-b :"
  },
  {
    "input": "Change prefix key in tmux config",
    "output": "set-option -g prefix C-a"
  },
  {
    "input": "Send input to specific pane",
    "output": "tmux send-keys -t 0.1 'uptime' C-m"
  },
  {
    "input": "List active tmux clients",
    "output": "tmux list-clients"
  },
  {
    "input": "Kill a specific window",
    "output": "tmux kill-window -t 2"
  },
  {
    "input": "Kill a specific pane",
    "output": "tmux kill-pane -t 0.1"
  },
  {
    "input": "Move to pane on the bottom",
    "output": "Ctrl-b ↓"
  },
  {
    "input": "Move to pane on the top",
    "output": "Ctrl-b ↑"
  },
  {
    "input": "Send enter key to pane",
    "output": "tmux send-keys -t dev C-m"
  },
  {
    "input": "Send custom command to running pane",
    "output": "tmux send-keys -t logs 'df -h' C-m"
  },
  {
    "input": "Switch to last session",
    "output": "tmux switch-client -l"
  },
  {
    "input": "Start tmux from crontab",
    "output": "@reboot tmux new -d -s boot '/usr/bin/python3 boot.py'"
  },
  {
    "input": "Bind a new key to split window",
    "output": "bind | split-window -h"
  },
  {
    "input": "Customize tmux status bar",
    "output": "set -g status-bg black"
  },
  {
    "input": "Highlight current window",
    "output": "setw -g window-status-current-bg blue"
  },
  {
    "input": "Set automatic window renaming",
    "output": "set -g allow-rename on"
  },
  {
    "input": "Disable automatic rename",
    "output": "set-option -g allow-rename off"
  },
  {
    "input": "Clear tmux scrollback history",
    "output": "tmux clear-history"
  },
  {
    "input": "Select pane using numbers",
    "output": "Ctrl-b q"
  },
  {
    "input": "Resize pane left",
    "output": "Ctrl-b :resize-pane -L 10"
  },
  {
    "input": "Resize pane right",
    "output": "Ctrl-b :resize-pane -R 10"
  },
  {
    "input": "Wait for all background jobs to finish",
    "output": "wait"
  },
  {
    "input": "Start two background processes and wait for both",
    "output": "sleep 2 & sleep 3 & wait"
  },
  {
    "input": "Run a script and wait until it finishes",
    "output": "./myscript.sh & wait"
  },
  {
    "input": "Wait for specific process ID 1234",
    "output": "wait 1234"
  },
  {
    "input": "Run ping and sleep in background, then wait",
    "output": "ping -c 3 google.com & sleep 5 & wait"
  },
  {
    "input": "Start three jobs and wait for them",
    "output": "job1 & job2 & job3 & wait"
  },
  {
    "input": "Wait for process with PID stored in a variable",
    "output": "wait $pid"
  },
  {
    "input": "Run background process and wait before exit",
    "output": "long_task & wait"
  },
  {
    "input": "Wait until background compilation completes",
    "output": "gcc file.c & wait"
  },
  {
    "input": "Start a command, get PID, and wait",
    "output": "sleep 3 & pid=$!; wait $pid"
  },
  {
    "input": "Download file in background and wait for it",
    "output": "wget file.zip & wait"
  },
  {
    "input": "Wait for two background sleep commands",
    "output": "sleep 2 & sleep 4 & wait"
  },
  {
    "input": "Wait for a job started in subshell",
    "output": "(sleep 5) & wait"
  },
  {
    "input": "Wait for process that runs after a fork",
    "output": "./child_process & wait"
  },
  {
    "input": "Launch function in background and wait",
    "output": "myfunc & wait"
  },
  {
    "input": "Start service in background and wait",
    "output": "start_service.sh & wait"
  },
  {
    "input": "Run curl in background and wait",
    "output": "curl example.com & wait"
  },
  {
    "input": "Run two scripts and wait until both are done",
    "output": "./script1.sh & ./script2.sh & wait"
  },
  {
    "input": "Start make command in background and wait",
    "output": "make & wait"
  },
  {
    "input": "Run Python script in background and wait",
    "output": "python3 app.py & wait"
  },
  {
    "input": "Wait for a shell function launched in background",
    "output": "f() { sleep 1; }; f & wait"
  },
  {
    "input": "Wait for all background processes in loop",
    "output": "for i in {1..3}; do sleep $i & done; wait"
  },
  {
    "input": "Use wait in a bash trap handler",
    "output": "trap 'wait' EXIT"
  },
  {
    "input": "Wait for background tar compression",
    "output": "tar czf archive.tar.gz dir/ & wait"
  },
  {
    "input": "Run multiple commands in background and wait",
    "output": "{ ls; sleep 2; } & wait"
  },
  {
    "input": "Background a while loop and wait",
    "output": "while true; do sleep 1; done & wait"
  },
  {
    "input": "Start xargs in background and wait",
    "output": "cat files.txt | xargs -n1 -P4 cp & wait"
  },
  {
    "input": "Fork a subshell process and wait",
    "output": "(echo hello; sleep 2) & wait"
  },
  {
    "input": "Background rsync and wait",
    "output": "rsync -a src/ dst/ & wait"
  },
  {
    "input": "Run docker build and wait",
    "output": "docker build . & wait"
  },
  {
    "input": "Launch two background tasks and wait after both",
    "output": "cmd1 & pid1=$!; cmd2 & pid2=$!; wait $pid1 $pid2"
  },
  {
    "input": "Run sleep and echo in background, then wait",
    "output": "sleep 3 & echo done & wait"
  },
  {
    "input": "Run SSH command in background and wait",
    "output": "ssh user@host 'uptime' & wait"
  },
  {
    "input": "Run scp in background and wait",
    "output": "scp file user@host:/tmp/ & wait"
  },
  {
    "input": "Wait for function background execution",
    "output": "do_something() { sleep 1; }; do_something & wait"
  },
  {
    "input": "Background npm install and wait",
    "output": "npm install & wait"
  },
  {
    "input": "Sleep in background and wait on its PID",
    "output": "sleep 2 & pid=$!; wait $pid"
  },
  {
    "input": "Run loop with background tasks and wait",
    "output": "for i in {1..3}; do sleep $i & done; wait"
  },
  {
    "input": "Start script1 and script2 and wait for both",
    "output": "./script1.sh & ./script2.sh & wait"
  },
  {
    "input": "Background find command and wait",
    "output": "find / -name test.txt & wait"
  },
  {
    "input": "Run ping on multiple hosts and wait",
    "output": "ping -c 1 google.com & ping -c 1 bing.com & wait"
  },
  {
    "input": "Wait after background docker run",
    "output": "docker run nginx & wait"
  },
  {
    "input": "Start a script with sudo and wait",
    "output": "sudo ./admin_script.sh & wait"
  },
  {
    "input": "Forked command and wait",
    "output": "(command &) && wait"
  },
  {
    "input": "Run file copy in background and wait",
    "output": "cp file1 file2 & wait"
  },
  {
    "input": "Wait for a detached job to complete",
    "output": "longjob.sh & wait"
  },
  {
    "input": "Background a C program and wait",
    "output": "./a.out & wait"
  },
  {
    "input": "Run background bash block and wait",
    "output": "{ echo 1; sleep 2; } & wait"
  },
  {
    "input": "Use wait with multiple PIDs",
    "output": "cmd1 & pid1=$!; cmd2 & pid2=$!; wait $pid1 $pid2"
  },
  {
    "input": "Background rsync and wait for it",
    "output": "rsync -a /src /dst & wait"
  },
  {
    "input": "Wait for command that outputs PID",
    "output": "command & pid=$!; wait $pid"
  },
  {
    "input": "Start sleep and notify completion",
    "output": "sleep 2 & wait; echo 'done'"
  },
  {
    "input": "Run curl in background and wait with echo",
    "output": "curl https://example.com & wait; echo 'fetched'"
  },
  {
    "input": "Run long job and notify after wait",
    "output": "longjob & wait; echo finished"
  },
  {
    "input": "Use wait inside a function",
    "output": "myfunc() { command1 & command2 & wait; }; myfunc"
  },
  {
    "input": "Wait for completion after gzip",
    "output": "gzip bigfile & wait"
  },
  {
    "input": "Wait on background sleep",
    "output": "sleep 5 & wait"
  },
  {
    "input": "Wait for process using saved PID",
    "output": "cmd & pid=$!; wait $pid"
  },
  {
    "input": "Run sleep with timeout and wait",
    "output": "timeout 5s sleep 10 & wait"
  },
  {
    "input": "Run build.sh in background and wait",
    "output": "./build.sh & wait"
  },
  {
    "input": "Background a job and show exit code after wait",
    "output": "myjob & wait; echo $?"
  },
  {
    "input": "Use wait for job in pipeline",
    "output": "cat file | grep text & wait"
  },
  {
    "input": "Fork subshell and wait",
    "output": "(ls; sleep 1) & wait"
  },
  {
    "input": "Sleep command and wait in script",
    "output": "sleep 4 & wait"
  },
  {
    "input": "Wait after kill command",
    "output": "kill $pid & wait"
  },
  {
    "input": "Start sleep and use echo after wait",
    "output": "sleep 1 & wait; echo done"
  },
  {
    "input": "Multiple background tasks with wait",
    "output": "cmd1 & cmd2 & wait"
  },
  {
    "input": "Check job with PID then wait",
    "output": "longrun & pid=$!; wait $pid"
  },
  {
    "input": "Wait after background file deletion",
    "output": "rm -rf temp/ & wait"
  },
  {
    "input": "Use wait in shell script after background process",
    "output": "#!/bin/bash\nsleep 2 &\nwait\necho Done"
  },
  {
    "input": "Continuously check disk space every 2 seconds",
    "output": "watch -n 2 df -h"
  },
  {
    "input": "Monitor free memory with watch",
    "output": "watch free -m"
  },
  {
    "input": "Watch CPU load every 5 seconds",
    "output": "watch -n 5 uptime"
  },
  {
    "input": "Track number of running processes",
    "output": "watch 'ps aux | wc -l'"
  },
  {
    "input": "Watch a directory for new files",
    "output": "watch 'ls -lh /path/to/dir'"
  },
  {
    "input": "Monitor network interfaces",
    "output": "watch -n 3 ifconfig"
  },
  {
    "input": "Keep an eye on netstat output",
    "output": "watch netstat -tulpn"
  },
  {
    "input": "Watch changes in a log file",
    "output": "watch tail /var/log/syslog"
  },
  {
    "input": "Monitor memory usage with htop",
    "output": "watch htop"
  },
  {
    "input": "Observe docker container status",
    "output": "watch docker ps"
  },
  {
    "input": "Run ls repeatedly to track file changes",
    "output": "watch ls -l"
  },
  {
    "input": "Track CPU temp every 10 seconds",
    "output": "watch -n 10 sensors"
  },
  {
    "input": "Monitor memory usage with free",
    "output": "watch free -h"
  },
  {
    "input": "Check logged-in users every 3 seconds",
    "output": "watch -n 3 who"
  },
  {
    "input": "Display cron log updates",
    "output": "watch tail -f /var/log/cron.log"
  },
  {
    "input": "Monitor number of SSH connections",
    "output": "watch 'netstat -tn | grep :22 | wc -l'"
  },
  {
    "input": "Track ping latency to Google",
    "output": "watch ping -c 1 google.com"
  },
  {
    "input": "Observe top 5 memory-consuming processes",
    "output": "watch \"ps aux --sort=-%mem | head -n 6\""
  },
  {
    "input": "Monitor changes in current directory",
    "output": "watch 'ls -l'"
  },
  {
    "input": "Check disk usage in /home",
    "output": "watch du -sh /home/*"
  },
  {
    "input": "Watch for new kernel messages",
    "output": "watch dmesg | tail"
  },
  {
    "input": "Monitor server uptime",
    "output": "watch uptime"
  },
  {
    "input": "Observe swap memory usage",
    "output": "watch 'free | grep Swap'"
  },
  {
    "input": "Display number of files in folder",
    "output": "watch 'ls -1 | wc -l'"
  },
  {
    "input": "Display inode usage",
    "output": "watch df -i"
  },
  {
    "input": "Follow changes to hostname",
    "output": "watch hostname"
  },
  {
    "input": "See ARP table changes",
    "output": "watch arp -a"
  },
  {
    "input": "Monitor system clock",
    "output": "watch date"
  },
  {
    "input": "Keep watching firewall rules",
    "output": "watch sudo iptables -L"
  },
  {
    "input": "Track Nginx active connections",
    "output": "watch curl -s http://localhost/nginx_status"
  },
  {
    "input": "See DNS cache stats every 4s",
    "output": "watch -n 4 sudo rndc stats"
  },
  {
    "input": "View service statuses",
    "output": "watch systemctl list-units --type=service"
  },
  {
    "input": "Monitor CPU with mpstat",
    "output": "watch mpstat"
  },
  {
    "input": "Watch IO stats",
    "output": "watch iostat"
  },
  {
    "input": "Track package updates",
    "output": "watch apt list --upgradable"
  },
  {
    "input": "Track files modified today",
    "output": "watch 'find . -type f -mtime 0'"
  },
  {
    "input": "Keep an eye on MySQL process",
    "output": "watch 'ps aux | grep mysql'"
  },
  {
    "input": "Watch journalctl logs",
    "output": "watch journalctl -xe"
  },
  {
    "input": "Observe CPU frequency scaling",
    "output": "watch 'cat /proc/cpuinfo | grep MHz'"
  },
  {
    "input": "Monitor user sessions",
    "output": "watch w"
  },
  {
    "input": "Track RAM usage with top 10",
    "output": "watch 'ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head'"
  },
  {
    "input": "Display top CPU consuming processes",
    "output": "watch 'ps aux --sort=-%cpu | head'"
  },
  {
    "input": "Check disk IO performance",
    "output": "watch iotop"
  },
  {
    "input": "Check load average visually",
    "output": "watch cat /proc/loadavg"
  },
  {
    "input": "Monitor Apache status",
    "output": "watch apachectl status"
  },
  {
    "input": "Display open ports",
    "output": "watch 'ss -tuln'"
  },
  {
    "input": "Monitor number of files in /tmp",
    "output": "watch 'ls /tmp | wc -l'"
  },
  {
    "input": "Display logged messages",
    "output": "watch 'tail -n 20 /var/log/messages'"
  },
  {
    "input": "Monitor sudo usage logs",
    "output": "watch 'grep sudo /var/log/auth.log'"
  },
  {
    "input": "Watch for new processes",
    "output": "watch 'ps -e'"
  },
  {
    "input": "Track SSH login attempts",
    "output": "watch 'grep sshd /var/log/auth.log'"
  },
  {
    "input": "Display cron execution logs",
    "output": "watch 'grep CRON /var/log/syslog'"
  },
  {
    "input": "Watch for file system mount changes",
    "output": "watch mount"
  },
  {
    "input": "Display inode stats",
    "output": "watch 'df -i'"
  },
  {
    "input": "Track number of users",
    "output": "watch 'who | wc -l'"
  },
  {
    "input": "See memory stats with vmstat",
    "output": "watch vmstat"
  },
  {
    "input": "Track virtual memory behavior",
    "output": "watch 'cat /proc/meminfo'"
  },
  {
    "input": "Monitor active TCP connections",
    "output": "watch 'netstat -an | grep ESTABLISHED'"
  },
  {
    "input": "Track internet connectivity",
    "output": "watch -n 5 curl -Is https://google.com | head -1"
  },
  {
    "input": "Monitor process tree",
    "output": "watch pstree"
  },
  {
    "input": "Observe ip a changes",
    "output": "watch ip a"
  },
  {
    "input": "Check number of open files",
    "output": "watch 'lsof | wc -l'"
  },
  {
    "input": "Observe number of active cron jobs",
    "output": "watch 'ps aux | grep cron'"
  },
  {
    "input": "Check for blocked processes",
    "output": "watch 'ps -eo stat,command | grep ^D'"
  },
  {
    "input": "Track background jobs",
    "output": "watch jobs"
  },
  {
    "input": "Monitor SELinux logs",
    "output": "watch 'grep AVC /var/log/audit/audit.log'"
  },
  {
    "input": "Watch changes in system time",
    "output": "watch date +%T"
  },
  {
    "input": "Track top 3 largest files",
    "output": "watch 'du -ah | sort -rh | head -n 3'"
  },
  {
    "input": "Observe system's temperature",
    "output": "watch sensors"
  },
  {
    "input": "Watch for pending updates",
    "output": "watch 'apt list --upgradable'"
  },
  {
    "input": "Track ssh sessions",
    "output": "watch 'who | grep pts'"
  },
  {
    "input": "Display users with 'sudo' permissions",
    "output": "watch 'getent group sudo'"
  },
  {
    "input": "Watch for new SSH keys added",
    "output": "watch 'ls -l ~/.ssh/authorized_keys'"
  },
  {
    "input": "Track number of failed login attempts",
    "output": "watch 'grep \"Failed password\" /var/log/auth.log'"
  },
  {
    "input": "Observe systemd services",
    "output": "watch 'systemctl list-units --type=service'"
  },
  {
    "input": "Check SELinux enforcing mode",
    "output": "watch getenforce"
  },
  {
    "input": "Track /var usage",
    "output": "watch 'du -sh /var/*'"
  },
  {
    "input": "Monitor load average over time",
    "output": "watch 'uptime'"
  },
  {
    "input": "Display available system updates",
    "output": "watch 'apt update'"
  },
  {
    "input": "Check currently logged in user",
    "output": "watch whoami"
  },
  {
    "input": "Make a simple GET request to a URL",
    "output": "curl http://example.com"
  },
  {
    "input": "Make a GET request and save output to a file",
    "output": "curl -o output.html http://example.com"
  },
  {
    "input": "Make a GET request and save with original filename",
    "output": "curl -O http://example.com/file.zip"
  },
  {
    "input": "Make a GET request and follow redirects",
    "output": "curl -L http://example.com"
  },
  {
    "input": "Make a GET request with verbose output",
    "output": "curl -v http://example.com"
  },
  {
    "input": "Make a GET request and show only headers",
    "output": "curl -I http://example.com"
  },
  {
    "input": "Make a GET request and include response headers",
    "output": "curl -i http://example.com"
  },
  {
    "input": "Make a GET request silently (no progress bar)",
    "output": "curl -s http://example.com"
  },
  {
    "input": "Make a GET request and show progress bar",
    "output": "curl --progress-bar http://example.com"
  },
  {
    "input": "Make a POST request with data",
    "output": "curl -X POST -d 'name=value' http://example.com/api"
  },
  {
    "input": "Make a POST request with JSON data",
    "output": "curl -X POST -H 'Content-Type: application/json' -d '{\"key\":\"value\"}' http://example.com/api"
  },
  {
    "input": "Make a POST request with form data",
    "output": "curl -X POST -F 'field=value' http://example.com/upload"
  },
  {
    "input": "Make a POST request with file upload",
    "output": "curl -X POST -F 'file=@/path/to/file.txt' http://example.com/upload"
  },
  {
    "input": "Make a PUT request with data",
    "output": "curl -X PUT -d 'data' http://example.com/api/resource"
  },
  {
    "input": "Make a DELETE request",
    "output": "curl -X DELETE http://example.com/api/resource/123"
  },
  {
    "input": "Make a PATCH request with data",
    "output": "curl -X PATCH -d 'field=newvalue' http://example.com/api/resource/123"
  },
  {
    "input": "Make a request with custom headers",
    "output": "curl -H 'Authorization: Bearer token123' http://example.com/api"
  },
  {
    "input": "Make a request with multiple headers",
    "output": "curl -H 'Accept: application/json' -H 'User-Agent: MyApp/1.0' http://example.com/api"
  },
  {
    "input": "Make a request with basic authentication",
    "output": "curl -u username:password http://example.com/api"
  },
  {
    "input": "Make a request with bearer token authentication",
    "output": "curl -H 'Authorization: Bearer your_token_here' http://example.com/api"
  },
  {
    "input": "Make a request with cookies",
    "output": "curl -b 'session=abc123' http://example.com"
  },
  {
    "input": "Make a request and save cookies to file",
    "output": "curl -c cookies.txt http://example.com"
  },
  {
    "input": "Make a request and load cookies from file",
    "output": "curl -b cookies.txt http://example.com"
  },
  {
    "input": "Make a request with custom user agent",
    "output": "curl -A 'Mozilla/5.0 (Custom Agent)' http://example.com"
  },
  {
    "input": "Make a request with referer header",
    "output": "curl -e 'http://google.com' http://example.com"
  },
  {
    "input": "Make a request over HTTPS ignoring certificate errors",
    "output": "curl -k https://example.com"
  },
  {
    "input": "Make a request with client certificate",
    "output": "curl --cert client.pem --key client-key.pem https://example.com"
  },
  {
    "input": "Make a request with CA certificate",
    "output": "curl --cacert ca-cert.pem https://example.com"
  },
  {
    "input": "Make a request with timeout",
    "output": "curl --max-time 30 http://example.com"
  },
  {
    "input": "Make a request with connection timeout",
    "output": "curl --connect-timeout 10 http://example.com"
  },
  {
    "input": "Make a request with retry attempts",
    "output": "curl --retry 3 http://example.com"
  },
  {
    "input": "Make a request with retry delay",
    "output": "curl --retry 3 --retry-delay 5 http://example.com"
  },
  {
    "input": "Make a request using HTTP/2",
    "output": "curl --http2 https://example.com"
  },
  {
    "input": "Make a request using HTTP/1.1",
    "output": "curl --http1.1 http://example.com"
  },
  {
    "input": "Make a request using proxy",
    "output": "curl --proxy http://proxy.example.com:8080 http://example.com"
  },
  {
    "input": "Make a request using SOCKS proxy",
    "output": "curl --socks5 proxy.example.com:1080 http://example.com"
  },
  {
    "input": "Make a request with proxy authentication",
    "output": "curl --proxy-user username:password --proxy http://proxy.example.com:8080 http://example.com"
  },
  {
    "input": "Make a request and limit download speed",
    "output": "curl --limit-rate 100k http://example.com/largefile.zip"
  },
  {
    "input": "Make a request and resume download",
    "output": "curl -C - -O http://example.com/largefile.zip"
  },
  {
    "input": "Make a request with range (partial content)",
    "output": "curl -r 0-1023 http://example.com/file.txt"
  },
  {
    "input": "Make multiple requests in parallel",
    "output": "curl -Z http://example.com/file1 http://example.com/file2"
  },
  {
    "input": "Make a request with compressed response",
    "output": "curl --compressed http://example.com"
  },
  {
    "input": "Make a request and write output to stdout",
    "output": "curl http://example.com -o -"
  },
  {
    "input": "Make a request with custom DNS server",
    "output": "curl --dns-servers 8.8.8.8 http://example.com"
  },
  {
    "input": "Make a request using IPv4 only",
    "output": "curl -4 http://example.com"
  },
  {
    "input": "Make a request using IPv6 only",
    "output": "curl -6 http://example.com"
  },
  {
    "input": "Make a request and show timing information",
    "output": "curl -w '%{time_total}\\n' http://example.com"
  },
  {
    "input": "Make a request and show detailed timing",
    "output": "curl -w 'Total: %{time_total}s\\nDNS: %{time_namelookup}s\\nConnect: %{time_connect}s\\n' http://example.com"
  },
  {
    "input": "Make a request and show HTTP status code",
    "output": "curl -w '%{http_code}\\n' -s -o /dev/null http://example.com"
  },
  {
    "input": "Make a request and show response size",
    "output": "curl -w 'Size: %{size_download} bytes\\n' -s -o /dev/null http://example.com"
  },
  {
    "input": "Make a request with custom method",
    "output": "curl -X CUSTOM http://example.com"
  },
  {
    "input": "Make a HEAD request",
    "output": "curl -X HEAD http://example.com"
  },
  {
    "input": "Make an OPTIONS request",
    "output": "curl -X OPTIONS http://example.com"
  },
  {
    "input": "Upload file via PUT",
    "output": "curl -X PUT --data-binary @file.txt http://example.com/upload"
  },
  {
    "input": "Upload file via POST multipart",
    "output": "curl -F 'file=@document.pdf' http://example.com/upload"
  },
  {
    "input": "Upload multiple files",
    "output": "curl -F 'file1=@file1.txt' -F 'file2=@file2.txt' http://example.com/upload"
  },
  {
    "input": "Send raw binary data",
    "output": "curl --data-binary @image.jpg http://example.com/api"
  },
  {
    "input": "Send URL-encoded data",
    "output": "curl --data-urlencode 'param=value with spaces' http://example.com/api"
  },
  {
    "input": "Make request with TRACE method",
    "output": "curl -X TRACE http://example.com"
  },
  {
    "input": "Test API endpoint availability",
    "output": "curl -f -s -o /dev/null http://example.com/api/health"
  },
  {
    "input": "Download file with progress meter",
    "output": "curl --progress-bar -O http://example.com/file.zip"
  },
  {
    "input": "Download file to specific directory",
    "output": "curl -o /tmp/downloaded_file.zip http://example.com/file.zip"
  },
  {
    "input": "Download with custom filename pattern",
    "output": "curl -o 'file_#1.txt' http://example.com/files/{1,2,3}.txt"
  },
  {
    "input": "Fetch multiple URLs sequentially",
    "output": "curl http://example.com/page[1-5].html"
  },
  {
    "input": "Fetch URLs with alphanumeric pattern",
    "output": "curl http://example.com/file{a,b,c}.txt"
  },
  {
    "input": "Make request with interface binding",
    "output": "curl --interface eth0 http://example.com"
  },
  {
    "input": "Make request with local port binding",
    "output": "curl --local-port 12345 http://example.com"
  },
  {
    "input": "Make request and follow redirects with max count",
    "output": "curl -L --max-redirs 5 http://example.com"
  },
  {
    "input": "Make request and get redirect location only",
    "output": "curl -I -s http://example.com | grep -i location"
  },
  {
    "input": "Make request with custom SSL version",
    "output": "curl --tlsv1.2 https://example.com"
  },
  {
    "input": "Make request with SSL cipher selection",
    "output": "curl --ciphers ECDHE-RSA-AES256-GCM-SHA384 https://example.com"
  },
  {
    "input": "Make request with SNI hostname",
    "output": "curl --resolve example.com:443:1.2.3.4 https://example.com"
  },
  {
    "input": "Test SSL certificate",
    "output": "curl -vI https://example.com 2>&1 | grep -E 'certificate|SSL'"
  },
  {
    "input": "Make request with keep-alive",
    "output": "curl -H 'Connection: keep-alive' http://example.com"
  },
  {
    "input": "Make request without keep-alive",
    "output": "curl -H 'Connection: close' http://example.com"
  },
  {
    "input": "Make request with TCP keep-alive",
    "output": "curl --keepalive-time 60 http://example.com"
  },
  {
    "input": "Make request with TCP nodelay",
    "output": "curl --tcp-nodelay http://example.com"
  },
  {
    "input": "Make FTP request",
    "output": "curl ftp://ftp.example.com/file.txt"
  },
  {
    "input": "Upload file via FTP",
    "output": "curl -T localfile.txt ftp://ftp.example.com/"
  },
  {
    "input": "FTP with authentication",
    "output": "curl -u username:password ftp://ftp.example.com/file.txt"
  },
  {
    "input": "FTP passive mode",
    "output": "curl --ftp-pasv ftp://ftp.example.com/file.txt"
  },
  {
    "input": "FTP active mode",
    "output": "curl --ftp-port - ftp://ftp.example.com/file.txt"
  },
  {
    "input": "FTP list directory",
    "output": "curl ftp://ftp.example.com/directory/"
  },
  {
    "input": "FTP create directory",
    "output": "curl -X 'MKD newdir' ftp://ftp.example.com/"
  },
  {
    "input": "FTP delete file",
    "output": "curl -X 'DELE file.txt' ftp://ftp.example.com/"
  },
  {
    "input": "SFTP file transfer",
    "output": "curl -u username:password sftp://sftp.example.com/file.txt"
  },
  {
    "input": "SCP file transfer",
    "output": "curl -u username:password scp://scp.example.com/file.txt"
  },
  {
    "input": "Make request using NTLM authentication",
    "output": "curl --ntlm -u username:password http://example.com"
  },
  {
    "input": "Make request using Digest authentication",
    "output": "curl --digest -u username:password http://example.com"
  },
  {
    "input": "Make request using Negotiate authentication",
    "output": "curl --negotiate -u : http://example.com"
  },
  {
    "input": "Make request with form data and filename",
    "output": "curl -F 'file=@data.txt;filename=newname.txt' http://example.com/upload"
  },
  {
    "input": "Make request with form data and content type",
    "output": "curl -F 'file=@data.json;type=application/json' http://example.com/upload"
  },
  {
    "input": "Send email via SMTP",
    "output": "curl --mail-from sender@example.com --mail-rcpt recipient@example.com smtp://mail.example.com"
  },
  {
    "input": "Read email via POP3",
    "output": "curl -u username:password pop3://mail.example.com/1"
  },
  {
    "input": "Read email via IMAP",
    "output": "curl -u username:password imap://mail.example.com/INBOX/1"
  },
  {
    "input": "Make request with configuration file",
    "output": "curl -K config.txt http://example.com"
  },
  {
    "input": "Make request and include protocol in output",
    "output": "curl --include-protocol http://example.com"
  },
  {
    "input": "Make request with happy eyeballs delay",
    "output": "curl --happy-eyeballs-timeout-ms 200 http://example.com"
  },
  {
    "input": "Make request with HSTS database",
    "output": "curl --hsts hsts.txt https://example.com"
  },
  {
    "input": "Make request ignoring HSTS",
    "output": "curl --ignore-hsts https://example.com"
  },
  {
    "input": "Make request with HTTP/3",
    "output": "curl --http3 https://example.com"
  },
  {
    "input": "Make request and show version",
    "output": "curl --version"
  },
  {
    "input": "Make request and show help",
    "output": "curl --help"
  },
  {
    "input": "Test API with GET and check response time",
    "output": "curl -w 'Response time: %{time_total}s\\n' -s -o /dev/null http://api.example.com/status"
  },
  {
    "input": "Perform health check on multiple endpoints",
    "output": "curl -f -s -o /dev/null -w '%{http_code} %{url_effective}\\n' http://api1.example.com/health http://api2.example.com/health"
  },
  {
    "input": "Download and extract response headers only",
    "output": "curl -D headers.txt -o /dev/null -s http://example.com"
  },
  {
    "input": "Make request with custom socket timeout",
    "output": "curl --max-time 30 --connect-timeout 10 http://example.com"
  },
  {
    "input": "Test WebSocket connection",
    "output": "curl --include --no-buffer --header 'Connection: Upgrade' --header 'Upgrade: websocket' --header 'Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==' --header 'Sec-WebSocket-Version: 13' http://example.com/websocket"
  },
  {
    "input": "Make request with rate limiting",
    "output": "curl --limit-rate 50k --max-time 60 http://example.com/largefile"
  },
  {
    "input": "Test GraphQL API",
    "output": "curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"{ users { id name } }\"}' http://example.com/graphql"
  },
  {
    "input": "Query A record for google.com",
    "output": "dig google.com"
  },
  {
    "input": "Query A record for example.com",
    "output": "dig example.com"
  },
  {
    "input": "Query A record for yahoo.com",
    "output": "dig yahoo.com"
  },
  {
    "input": "Query A record for github.com",
    "output": "dig github.com"
  },
  {
    "input": "Query A record for facebook.com",
    "output": "dig facebook.com"
  },
  {
    "input": "Query AAAA record for google.com",
    "output": "dig google.com AAAA"
  },
  {
    "input": "Query MX record for google.com",
    "output": "dig google.com MX"
  },
  {
    "input": "Query NS record for google.com",
    "output": "dig google.com NS"
  },
  {
    "input": "Query SOA record for google.com",
    "output": "dig google.com SOA"
  },
  {
    "input": "Query TXT record for google.com",
    "output": "dig google.com TXT"
  },
  {
    "input": "Query CNAME record for www.google.com",
    "output": "dig www.google.com CNAME"
  },
  {
    "input": "Query PTR record for 8.8.8.8",
    "output": "dig -x 8.8.8.8"
  },
  {
    "input": "Query ANY record for google.com",
    "output": "dig google.com ANY"
  },
  {
    "input": "Query SPF record for google.com",
    "output": "dig google.com SPF"
  },
  {
    "input": "Query SRV record for _sip._tcp.google.com",
    "output": "dig _sip._tcp.google.com SRV"
  },
  {
    "input": "Query DNSKEY record for google.com",
    "output": "dig google.com DNSKEY"
  },
  {
    "input": "Query DS record for google.com",
    "output": "dig google.com DS"
  },
  {
    "input": "Query NAPTR record for google.com",
    "output": "dig google.com NAPTR"
  },
  {
    "input": "Query CAA record for google.com",
    "output": "dig google.com CAA"
  },
  {
    "input": "Query TLSA record for google.com",
    "output": "dig google.com TLSA"
  },
  {
    "input": "Query A record for google.com using DNS server 1.1.1.1",
    "output": "dig @1.1.1.1 google.com"
  },
  {
    "input": "Query A record for example.com using DNS server 8.8.8.8",
    "output": "dig @8.8.8.8 example.com"
  },
  {
    "input": "Query A record for yahoo.com using DNS server 9.9.9.9",
    "output": "dig @9.9.9.9 yahoo.com"
  },
  {
    "input": "Query A record for github.com using DNS server 4.2.2.2",
    "output": "dig @4.2.2.2 github.com"
  },
  {
    "input": "Query A record for facebook.com using DNS server 208.67.222.222",
    "output": "dig @208.67.222.222 facebook.com"
  },
  {
    "input": "Query A record for google.com with +short output",
    "output": "dig google.com +short"
  },
  {
    "input": "Query MX record for google.com with +short output",
    "output": "dig google.com MX +short"
  },
  {
    "input": "Query NS record for google.com with +short output",
    "output": "dig google.com NS +short"
  },
  {
    "input": "Query SOA record for google.com with +short output",
    "output": "dig google.com SOA +short"
  },
  {
    "input": "Query TXT record for google.com with +short output",
    "output": "dig google.com TXT +short"
  },
  {
    "input": "Query CNAME record for www.google.com with +short output",
    "output": "dig www.google.com CNAME +short"
  },
  {
    "input": "Query PTR record for 8.8.8.8 with +short output",
    "output": "dig -x 8.8.8.8 +short"
  },
  {
    "input": "Query ANY record for google.com with +short output",
    "output": "dig google.com ANY +short"
  },
  {
    "input": "Query A record for google.com and display only answer section",
    "output": "dig google.com +noall +answer"
  },
  {
    "input": "Query MX record for google.com and display only answer section",
    "output": "dig google.com MX +noall +answer"
  },
  {
    "input": "Query NS record for google.com and display only answer section",
    "output": "dig google.com NS +noall +answer"
  },
  {
    "input": "Query SOA record for google.com and display only answer section",
    "output": "dig google.com SOA +noall +answer"
  },
  {
    "input": "Query TXT record for google.com and display only answer section",
    "output": "dig google.com TXT +noall +answer"
  },
  {
    "input": "Query CNAME record for www.google.com and display only answer section",
    "output": "dig www.google.com CNAME +noall +answer"
  },
  {
    "input": "Query PTR record for 8.8.8.8 and display only answer section",
    "output": "dig -x 8.8.8.8 +noall +answer"
  },
  {
    "input": "Query ANY record for google.com and display only answer section",
    "output": "dig google.com ANY +noall +answer"
  },
  {
    "input": "Query A record for google.com and display authority section",
    "output": "dig google.com +noall +authority"
  },
  {
    "input": "Query A record for google.com and display additional section",
    "output": "dig google.com +noall +additional"
  },
  {
    "input": "Query A record for google.com and show query time",
    "output": "dig google.com +stats"
  },
  {
    "input": "Query A record for google.com and show comments",
    "output": "dig google.com +comments"
  },
  {
    "input": "Query A record for google.com and show TTLs",
    "output": "dig google.com +ttlid"
  },
  {
    "input": "Query A record for google.com and show DNSSEC info",
    "output": "dig google.com +dnssec"
  },
  {
    "input": "Query A record for google.com and show all sections",
    "output": "dig google.com +multiline"
  },
  {
    "input": "Query A record for google.com with TCP",
    "output": "dig google.com +tcp"
  },
  {
    "input": "Query A record for google.com with UDP",
    "output": "dig google.com +notcp"
  },
  {
    "input": "Query A record for google.com with trace",
    "output": "dig google.com +trace"
  },
  {
    "input": "Query A record for google.com with recursion desired",
    "output": "dig google.com +rd"
  },
  {
    "input": "Query A record for google.com with recursion not desired",
    "output": "dig google.com +nord"
  },
  {
    "input": "Query A record for google.com with edns=0",
    "output": "dig google.com +edns=0"
  },
  {
    "input": "Query A record for google.com with edns=1",
    "output": "dig google.com +edns=1"
  },
  {
    "input": "Query A record for google.com with ednsopt=3",
    "output": "dig google.com +ednsopt=3"
  },
  {
    "input": "Query A record for google.com with padding",
    "output": "dig google.com +padding"
  },
  {
    "input": "Query A record for google.com with bufsize 4096",
    "output": "dig google.com +bufsize=4096"
  },
  {
    "input": "Query A record for google.com with timeout 2 seconds",
    "output": "dig google.com +timeout=2"
  },
  {
    "input": "Query A record for google.com with tries 3",
    "output": "dig google.com +tries=3"
  },
  {
    "input": "Query A record for google.com with retry 2",
    "output": "dig google.com +retry=2"
  },
  {
    "input": "Query A record for google.com with ndots 2",
    "output": "dig google.com +ndots=2"
  },
  {
    "input": "Query A record for google.com with search domain example.com",
    "output": "dig google.com +search +domain=example.com"
  },
  {
    "input": "Query A record for google.com and use only IPv4",
    "output": "dig google.com -4"
  },
  {
    "input": "Query A record for google.com and use only IPv6",
    "output": "dig google.com -6"
  },
  {
    "input": "Query A record for google.com and set port 5353",
    "output": "dig google.com -p 5353"
  },
  {
    "input": "Query A record for google.com and set port 53",
    "output": "dig google.com -p 53"
  },
  {
    "input": "Query A record for google.com and set port 1053",
    "output": "dig google.com -p 1053"
  },
  {
    "input": "Query A record for google.com and set source IP 192.168.1.1",
    "output": "dig google.com -b 192.168.1.1"
  },
  {
    "input": "Query A record for google.com and set source IP ::1",
    "output": "dig google.com -b ::1"
  },
  {
    "input": "Query A record for google.com and set query class IN",
    "output": "dig google.com IN"
  },
  {
    "input": "Query A record for google.com and set query class CH",
    "output": "dig google.com CH"
  },
  {
    "input": "Query A record for google.com and set query class HS",
    "output": "dig google.com HS"
  },
  {
    "input": "Query A record for google.com and set +ignore",
    "output": "dig google.com +ignore"
  },
  {
    "input": "Query A record for google.com and set +noignore",
    "output": "dig google.com +noignore"
  },
  {
    "input": "Query A record for google.com and set +recurse",
    "output": "dig google.com +recurse"
  },
  {
    "input": "Query A record for google.com and set +norecurse",
    "output": "dig google.com +norecurse"
  },
  {
    "input": "Query A record for google.com and set +fail",
    "output": "dig google.com +fail"
  },
  {
    "input": "Query A record for google.com and set +nofail",
    "output": "dig google.com +nofail"
  },
  {
    "input": "Query A record for google.com and set +besteffort",
    "output": "dig google.com +besteffort"
  },
  {
    "input": "Query A record for google.com and set +nobesteffort",
    "output": "dig google.com +nobesteffort"
  },
  {
    "input": "Query A record for google.com and set +adflag",
    "output": "dig google.com +adflag"
  },
  {
    "input": "Query A record for google.com and set +noadflag",
    "output": "dig google.com +noadflag"
  },
  {
    "input": "Query A record for google.com and set +cdflag",
    "output": "dig google.com +cdflag"
  },
  {
    "input": "Query A record for google.com and set +nocdflag",
    "output": "dig google.com +nocdflag"
  },
  {
    "input": "Query A record for google.com and set +nssearch",
    "output": "dig google.com +nssearch"
  },
  {
    "input": "Query A record for google.com and set +nonssearch",
    "output": "dig google.com +nonssearch"
  },
  {
    "input": "Query A record for google.com and set +trace",
    "output": "dig google.com +trace"
  },
  {
    "input": "Query A record for google.com and set +notrace",
    "output": "dig google.com +notrace"
  },
  {
    "input": "Query A record for google.com and set +sigchase",
    "output": "dig google.com +sigchase"
  },
  {
    "input": "Query A record for google.com and set +nosigchase",
    "output": "dig google.com +nosigchase"
  },
  {
    "input": "Query A record for google.com and set +topdown",
    "output": "dig google.com +topdown"
  },
  {
    "input": "Query A record for google.com and set +notopdown",
    "output": "dig google.com +notopdown"
  },
  {
    "input": "Query A record for google.com and set +cmd",
    "output": "dig google.com +cmd"
  },
  {
    "input": "Query A record for google.com and set +nocmd",
    "output": "dig google.com +nocmd"
  },
  {
    "input": "Query A record for google.com and set +question",
    "output": "dig google.com +question"
  },
  {
    "input": "Query A record for google.com and set +noquestion",
    "output": "dig google.com +noquestion"
  },
  {
    "input": "Query A record for google.com and set +answer",
    "output": "dig google.com +answer"
  },
  {
    "input": "Query A record for google.com and set +noanswer",
    "output": "dig google.com +noanswer"
  },
  {
    "input": "Query A record for google.com and set +authority",
    "output": "dig google.com +authority"
  },
  {
    "input": "Query A record for google.com and set +noauthority",
    "output": "dig google.com +noauthority"
  },
  {
    "input": "Query A record for google.com and set +additional",
    "output": "dig google.com +additional"
  },
  {
    "input": "Query A record for google.com and set +noadditional",
    "output": "dig google.com +noadditional"
  },
  {
    "input": "Query A record for google.com and set +all",
    "output": "dig google.com +all"
  },
  {
    "input": "Query A record for google.com and set +noall",
    "output": "dig google.com +noall"
  },
  {
    "input": "Query A record for google.com and set +stats",
    "output": "dig google.com +stats"
  },
  {
    "input": "Query A record for google.com and set +nostats",
    "output": "dig google.com +nostats"
  },
  {
    "input": "Query A record for google.com and set +comments",
    "output": "dig google.com +comments"
  },
  {
    "input": "Query A record for google.com and set +nocomments",
    "output": "dig google.com +nocomments"
  },
  {
    "input": "Query A record for google.com and set +multiline",
    "output": "dig google.com +multiline"
  },
  {
    "input": "Query A record for google.com and set +nomultiline",
    "output": "dig google.com +nomultiline"
  },
  {
    "input": "Query A record for google.com and set +question",
    "output": "dig google.com +question"
  },
  {
    "input": "Query A record for google.com and set +noquestion",
    "output": "dig google.com +noquestion"
  },
  {
    "input": "Query A record for google.com and set +short",
    "output": "dig google.com +short"
  },
  {
    "input": "Query A record for google.com and set +noshort",
    "output": "dig google.com +noshort"
  },
  {
    "input": "Query A record for google.com and set +ttl",
    "output": "dig google.com +ttl"
  },
  {
    "input": "Query A record for google.com and set +nottl",
    "output": "dig google.com +nottl"
  },
  {
    "input": "Query A record for google.com and set +identify",
    "output": "dig google.com +identify"
  },
  {
    "input": "Query A record for google.com and set +noidentify",
    "output": "dig google.com +noidentify"
  },
  {
    "input": "Query A record for google.com and set +sigchase",
    "output": "dig google.com +sigchase"
  },
  {
    "input": "Query A record for google.com and set +nosigchase",
    "output": "dig google.com +nosigchase"
  },
  {
    "input": "Query A record for google.com and set +topdown",
    "output": "dig google.com +topdown"
  },
  {
    "input": "Query A record for google.com and set +notopdown",
    "output": "dig google.com +notopdown"
  },
  {
    "input": "Query A record for google.com and set +cmd",
    "output": "dig google.com +cmd"
  },
  {
    "input": "Query A record for google.com and set +nocmd",
    "output": "dig google.com +nocmd"
  },
  {
    "input": "Query A record for google.com and set +question",
    "output": "dig google.com +question"
  },
  {
    "input": "Query A record for google.com and set +noquestion",
    "output": "dig google.com +noquestion"
  },
  {
    "input": "Query A record for google.com and set +answer",
    "output": "dig google.com +answer"
  },
  {
    "input": "Query A record for google.com and set +noanswer",
    "output": "dig google.com +noanswer"
  },
  {
    "input": "Query A record for google.com and set +authority",
    "output": "dig google.com +authority"
  },
  {
    "input": "Query A record for google.com and set +noauthority",
    "output": "dig google.com +noauthority"
  },
  {
    "input": "Query A record for google.com and set +additional",
    "output": "dig google.com +additional"
  },
  {
    "input": "Query A record for google.com and set +noadditional",
    "output": "dig google.com +noadditional"
  },
  {
    "input": "Query A record for google.com and set +all",
    "output": "dig google.com +all"
  },
  {
    "input": "Query A record for google.com and set +noall",
    "output": "dig google.com +noall"
  },
  {
    "input": "Query the A record for google.com",
    "output": "host google.com"
  },
  {
    "input": "Query the A record for example.com",
    "output": "host example.com"
  },
  {
    "input": "Query the A record for yahoo.com",
    "output": "host yahoo.com"
  },
  {
    "input": "Query the A record for github.com",
    "output": "host github.com"
  },
  {
    "input": "Query the A record for facebook.com",
    "output": "host facebook.com"
  },
  {
    "input": "Query the A record for 8.8.8.8 (reverse lookup)",
    "output": "host 8.8.8.8"
  },
  {
    "input": "Query the A record for 1.1.1.1 (reverse lookup)",
    "output": "host 1.1.1.1"
  },
  {
    "input": "Query the AAAA (IPv6) record for google.com",
    "output": "host -t AAAA google.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for example.com",
    "output": "host -t AAAA example.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for yahoo.com",
    "output": "host -t AAAA yahoo.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for github.com",
    "output": "host -t AAAA github.com"
  },
  {
    "input": "Query the MX record for google.com",
    "output": "host -t MX google.com"
  },
  {
    "input": "Query the MX record for example.com",
    "output": "host -t MX example.com"
  },
  {
    "input": "Query the MX record for yahoo.com",
    "output": "host -t MX yahoo.com"
  },
  {
    "input": "Query the MX record for github.com",
    "output": "host -t MX github.com"
  },
  {
    "input": "Query the NS record for google.com",
    "output": "host -t NS google.com"
  },
  {
    "input": "Query the NS record for example.com",
    "output": "host -t NS example.com"
  },
  {
    "input": "Query the NS record for yahoo.com",
    "output": "host -t NS yahoo.com"
  },
  {
    "input": "Query the NS record for github.com",
    "output": "host -t NS github.com"
  },
  {
    "input": "Query the SOA record for google.com",
    "output": "host -t SOA google.com"
  },
  {
    "input": "Query the SOA record for example.com",
    "output": "host -t SOA example.com"
  },
  {
    "input": "Query the SOA record for yahoo.com",
    "output": "host -t SOA yahoo.com"
  },
  {
    "input": "Query the SOA record for github.com",
    "output": "host -t SOA github.com"
  },
  {
    "input": "Query the TXT record for google.com",
    "output": "host -t TXT google.com"
  },
  {
    "input": "Query the TXT record for example.com",
    "output": "host -t TXT example.com"
  },
  {
    "input": "Query the TXT record for yahoo.com",
    "output": "host -t TXT yahoo.com"
  },
  {
    "input": "Query the TXT record for github.com",
    "output": "host -t TXT github.com"
  },
  {
    "input": "Query the CNAME record for www.google.com",
    "output": "host -t CNAME www.google.com"
  },
  {
    "input": "Query the CNAME record for www.example.com",
    "output": "host -t CNAME www.example.com"
  },
  {
    "input": "Query the CNAME record for www.yahoo.com",
    "output": "host -t CNAME www.yahoo.com"
  },
  {
    "input": "Query the CNAME record for www.github.com",
    "output": "host -t CNAME www.github.com"
  },
  {
    "input": "Query the PTR record for 8.8.8.8",
    "output": "host -t PTR 8.8.8.8"
  },
  {
    "input": "Query the PTR record for 1.1.1.1",
    "output": "host -t PTR 1.1.1.1"
  },
  {
    "input": "Query the PTR record for 208.67.222.222",
    "output": "host -t PTR 208.67.222.222"
  },
  {
    "input": "Query the PTR record for 4.2.2.2",
    "output": "host -t PTR 4.2.2.2"
  },
  {
    "input": "Query the SRV record for _sip._tcp.google.com",
    "output": "host -t SRV _sip._tcp.google.com"
  },
  {
    "input": "Query the SRV record for _xmpp-server._tcp.gmail.com",
    "output": "host -t SRV _xmpp-server._tcp.gmail.com"
  },
  {
    "input": "Query the SRV record for _sip._tcp.example.com",
    "output": "host -t SRV _sip._tcp.example.com"
  },
  {
    "input": "Query the SRV record for _xmpp-server._tcp.yahoo.com",
    "output": "host -t SRV _xmpp-server._tcp.yahoo.com"
  },
  {
    "input": "Query the ANY record for google.com",
    "output": "host -t ANY google.com"
  },
  {
    "input": "Query the ANY record for example.com",
    "output": "host -t ANY example.com"
  },
  {
    "input": "Query the ANY record for yahoo.com",
    "output": "host -t ANY yahoo.com"
  },
  {
    "input": "Query the ANY record for github.com",
    "output": "host -t ANY github.com"
  },
  {
    "input": "Query the SPF record for google.com",
    "output": "host -t SPF google.com"
  },
  {
    "input": "Query the SPF record for example.com",
    "output": "host -t SPF example.com"
  },
  {
    "input": "Query the SPF record for yahoo.com",
    "output": "host -t SPF yahoo.com"
  },
  {
    "input": "Query the SPF record for github.com",
    "output": "host -t SPF github.com"
  },
  {
    "input": "Query the DNSKEY record for google.com",
    "output": "host -t DNSKEY google.com"
  },
  {
    "input": "Query the DNSKEY record for example.com",
    "output": "host -t DNSKEY example.com"
  },
  {
    "input": "Query the DNSKEY record for yahoo.com",
    "output": "host -t DNSKEY yahoo.com"
  },
  {
    "input": "Query the DNSKEY record for github.com",
    "output": "host -t DNSKEY github.com"
  },
  {
    "input": "Query the DS record for google.com",
    "output": "host -t DS google.com"
  },
  {
    "input": "Query the DS record for example.com",
    "output": "host -t DS example.com"
  },
  {
    "input": "Query the DS record for yahoo.com",
    "output": "host -t DS yahoo.com"
  },
  {
    "input": "Query the DS record for github.com",
    "output": "host -t DS github.com"
  },
  {
    "input": "Query the NAPTR record for google.com",
    "output": "host -t NAPTR google.com"
  },
  {
    "input": "Query the NAPTR record for example.com",
    "output": "host -t NAPTR example.com"
  },
  {
    "input": "Query the NAPTR record for yahoo.com",
    "output": "host -t NAPTR yahoo.com"
  },
  {
    "input": "Query the NAPTR record for github.com",
    "output": "host -t NAPTR github.com"
  },
  {
    "input": "Query the CAA record for google.com",
    "output": "host -t CAA google.com"
  },
  {
    "input": "Query the CAA record for example.com",
    "output": "host -t CAA example.com"
  },
  {
    "input": "Query the CAA record for yahoo.com",
    "output": "host -t CAA yahoo.com"
  },
  {
    "input": "Query the CAA record for github.com",
    "output": "host -t CAA github.com"
  },
  {
    "input": "Query the TLSA record for google.com",
    "output": "host -t TLSA google.com"
  },
  {
    "input": "Query the TLSA record for example.com",
    "output": "host -t TLSA example.com"
  },
  {
    "input": "Query the TLSA record for yahoo.com",
    "output": "host -t TLSA yahoo.com"
  },
  {
    "input": "Query the TLSA record for github.com",
    "output": "host -t TLSA github.com"
  },
  {
    "input": "Query the A record for google.com using DNS server 1.1.1.1",
    "output": "host google.com 1.1.1.1"
  },
  {
    "input": "Query the A record for example.com using DNS server 8.8.8.8",
    "output": "host example.com 8.8.8.8"
  },
  {
    "input": "Query the A record for yahoo.com using DNS server 9.9.9.9",
    "output": "host yahoo.com 9.9.9.9"
  },
  {
    "input": "Query the A record for github.com using DNS server 4.2.2.2",
    "output": "host github.com 4.2.2.2"
  },
  {
    "input": "Query the A record for facebook.com using DNS server 208.67.222.222",
    "output": "host facebook.com 208.67.222.222"
  },
  {
    "input": "Query the A record for google.com with verbose output",
    "output": "host -v google.com"
  },
  {
    "input": "Query the MX record for example.com with verbose output",
    "output": "host -v -t MX example.com"
  },
  {
    "input": "Query the NS record for yahoo.com with verbose output",
    "output": "host -v -t NS yahoo.com"
  },
  {
    "input": "Query the TXT record for github.com with verbose output",
    "output": "host -v -t TXT github.com"
  },
  {
    "input": "Query the CNAME record for www.google.com with verbose output",
    "output": "host -v -t CNAME www.google.com"
  },
  {
    "input": "Query the PTR record for 8.8.8.8 with verbose output",
    "output": "host -v -t PTR 8.8.8.8"
  },
  {
    "input": "Query the ANY record for google.com with verbose output",
    "output": "host -v -t ANY google.com"
  },
  {
    "input": "Query the A record for google.com and display only the IP address",
    "output": "host -t A google.com | awk '/has address/ {print $4}'"
  },
  {
    "input": "Query the MX record for example.com and display only mail servers",
    "output": "host -t MX example.com | awk '{print $7}'"
  },
  {
    "input": "Query the NS record for yahoo.com and display only nameservers",
    "output": "host -t NS yahoo.com | awk '{print $4}'"
  },
  {
    "input": "Query the TXT record for github.com and display only TXT data",
    "output": "host -t TXT github.com | awk -F'\"' '{print $2}'"
  },
  {
    "input": "Query the A record for google.com and display output in uppercase",
    "output": "host google.com | tr '[:lower:]' '[:upper:]'"
  },
  {
    "input": "Query the A record for example.com and display output in lowercase",
    "output": "host example.com | tr '[:upper:]' '[:lower:]'"
  },
  {
    "input": "Query the A record for yahoo.com and save output to file",
    "output": "host yahoo.com > yahoo_dns.txt"
  },
  {
    "input": "Query the A record for github.com and append output to file",
    "output": "host github.com >> github_dns.txt"
  },
  {
    "input": "Query the MX record for google.com and grep for google",
    "output": "host -t MX google.com | grep google"
  },
  {
    "input": "Query the NS record for example.com and grep for ns",
    "output": "host -t NS example.com | grep ns"
  },
  {
    "input": "Query the TXT record for yahoo.com and grep for v=spf1",
    "output": "host -t TXT yahoo.com | grep 'v=spf1'"
  },
  {
    "input": "Query the CNAME record for www.github.com and grep for github",
    "output": "host -t CNAME www.github.com | grep github"
  },
  {
    "input": "Query the PTR record for 8.8.8.8 and grep for google",
    "output": "host -t PTR 8.8.8.8 | grep google"
  },
  {
    "input": "Query the A record for google.com and display the command used",
    "output": "echo 'host google.com'; host google.com"
  },
  {
    "input": "Query the A record for example.com and display the command used",
    "output": "echo 'host example.com'; host example.com"
  },
  {
    "input": "Query the A record for yahoo.com and display the command used",
    "output": "echo 'host yahoo.com'; host yahoo.com"
  },
  {
    "input": "Query the A record for github.com and display the command used",
    "output": "echo 'host github.com'; host github.com"
  },
  {
    "input": "Query the A record for facebook.com and display the command used",
    "output": "echo 'host facebook.com'; host facebook.com"
  },
  {
    "input": "Query the A record for google.com using DNS server 8.8.4.4",
    "output": "host google.com 8.8.4.4"
  },
  {
    "input": "Query the A record for example.com using DNS server 1.0.0.1",
    "output": "host example.com 1.0.0.1"
  },
  {
    "input": "Query the A record for yahoo.com using DNS server 8.26.56.26",
    "output": "host yahoo.com 8.26.56.26"
  },
  {
    "input": "Query the A record for github.com using DNS server 8.20.247.20",
    "output": "host github.com 8.20.247.20"
  },
  {
    "input": "Query the A record for facebook.com using DNS server 208.67.220.220",
    "output": "host facebook.com 208.67.220.220"
  },
  {
    "input": "Query the A record for google.com and use short output",
    "output": "host google.com | awk '/has address/ {print $4}'"
  },
  {
    "input": "Query the MX record for example.com and use short output",
    "output": "host -t MX example.com | awk '{print $7}'"
  },
  {
    "input": "Query the NS record for yahoo.com and use short output",
    "output": "host -t NS yahoo.com | awk '{print $4}'"
  },
  {
    "input": "Query the TXT record for github.com and use short output",
    "output": "host -t TXT github.com | awk -F'\"' '{print $2}'"
  },
  {
    "input": "Query the A record for google.com and display output with line numbers",
    "output": "host google.com | nl"
  },
  {
    "input": "Query the A record for example.com and display output with line numbers",
    "output": "host example.com | nl"
  },
  {
    "input": "Query the A record for yahoo.com and display output with line numbers",
    "output": "host yahoo.com | nl"
  },
  {
    "input": "Query the A record for github.com and display output with line numbers",
    "output": "host github.com | nl"
  },
  {
    "input": "Query the A record for facebook.com and display output with line numbers",
    "output": "host facebook.com | nl"
  },
  {
    "input": "Query the A record for google.com and display output in color",
    "output": "host google.com | lolcat"
  },
  {
    "input": "Query the A record for example.com and display output in color",
    "output": "host example.com | lolcat"
  },
  {
    "input": "Query the A record for yahoo.com and display output in color",
    "output": "host yahoo.com | lolcat"
  },
  {
    "input": "Query the A record for github.com and display output in color",
    "output": "host github.com | lolcat"
  },
  {
    "input": "Query the A record for facebook.com and display output in color",
    "output": "host facebook.com | lolcat"
  },
  {
    "input": "Query the A record for google.com and display output in uppercase and color",
    "output": "host google.com | tr '[:lower:]' '[:upper:]' | lolcat"
  },
  {
    "input": "Query the A record for example.com and display output in uppercase and color",
    "output": "host example.com | tr '[:lower:]' '[:upper:]' | lolcat"
  },
  {
    "input": "Query the A record for yahoo.com and display output in uppercase and color",
    "output": "host yahoo.com | tr '[:lower:]' '[:upper:]' | lolcat"
  },
  {
    "input": "Query the A record for github.com and display output in uppercase and color",
    "output": "host github.com | tr '[:lower:]' '[:upper:]' | lolcat"
  },
  {
    "input": "Query the A record for facebook.com and display output in uppercase and color",
    "output": "host facebook.com | tr '[:lower:]' '[:upper:]' | lolcat"
  },
  {
    "input": "Query the A record for google.com and display output in lowercase and color",
    "output": "host google.com | tr '[:upper:]' '[:lower:]' | lolcat"
  },
  {
    "input": "Query the A record for example.com and display output in lowercase and color",
    "output": "host example.com | tr '[:upper:]' '[:lower:]' | lolcat"
  },
  {
    "input": "Query the A record for yahoo.com and display output in lowercase and color",
    "output": "host yahoo.com | tr '[:upper:]' '[:lower:]' | lolcat"
  },
  {
    "input": "Query the A record for github.com and display output in lowercase and color",
    "output": "host github.com | tr '[:upper:]' '[:lower:]' | lolcat"
  },
  {
    "input": "Query the A record for facebook.com and display output in lowercase and color",
    "output": "host facebook.com | tr '[:upper:]' '[:lower:]' | lolcat"
  },
  {
    "input": "Query the A record for google.com and display output with timestamp",
    "output": "date; host google.com"
  },
  {
    "input": "Query the A record for example.com and display output with timestamp",
    "output": "date; host example.com"
  },
  {
    "input": "Query the A record for yahoo.com and display output with timestamp",
    "output": "date; host yahoo.com"
  },
  {
    "input": "Query the A record for github.com and display output with timestamp",
    "output": "date; host github.com"
  },
  {
    "input": "Query the A record for facebook.com and display output with timestamp",
    "output": "date; host facebook.com"
  },
  {
    "input": "Query the A record for google.com and display output with both timestamp and color",
    "output": "date; host google.com | lolcat"
  },
  {
    "input": "Query the A record for example.com and display output with both timestamp and color",
    "output": "date; host example.com | lolcat"
  },
  {
    "input": "Query the A record for yahoo.com and display output with both timestamp and color",
    "output": "date; host yahoo.com | lolcat"
  },
  {
    "input": "Query the A record for github.com and display output with both timestamp and color",
    "output": "date; host github.com | lolcat"
  },
  {
    "input": "Query the A record for facebook.com and display output with both timestamp and color",
    "output": "date; host facebook.com | lolcat"
  },
  {
    "input": "Show configuration for all active network interfaces",
    "output": "ifconfig"
  },
  {
    "input": "Show configuration for all interfaces, including inactive",
    "output": "ifconfig -a"
  },
  {
    "input": "Show a concise summary of all interfaces",
    "output": "ifconfig -s"
  },
  {
    "input": "Show verbose configuration for all interfaces",
    "output": "ifconfig -v"
  },
  {
    "input": "Show configuration for a specific interface (e.g., eth0)",
    "output": "ifconfig eth0"
  },
  {
    "input": "Show configuration for the loopback interface",
    "output": "ifconfig lo"
  },
  {
    "input": "List all available network interfaces",
    "output": "ifconfig -a"
  },
  {
    "input": "List only interfaces that are up",
    "output": "ifconfig -u"
  },
  {
    "input": "List only interfaces that are down",
    "output": "ifconfig -d"
  },
  {
    "input": "Display only the names of all interfaces",
    "output": "ifconfig -l"
  },
  {
    "input": "Activate a network interface (e.g., eth0)",
    "output": "sudo ifconfig eth0 up"
  },
  {
    "input": "Deactivate a network interface (e.g., eth0)",
    "output": "sudo ifconfig eth0 down"
  },
  {
    "input": "Assign an IP address to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100"
  },
  {
    "input": "Assign an IP address and netmask to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0"
  },
  {
    "input": "Assign an IP address, netmask, and broadcast to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 broadcast 192.168.1.255"
  },
  {
    "input": "Set the netmask for an interface",
    "output": "sudo ifconfig eth0 netmask 255.255.255.0"
  },
  {
    "input": "Set the broadcast address for an interface",
    "output": "sudo ifconfig eth0 broadcast 192.168.1.255"
  },
  {
    "input": "Set the MTU for an interface",
    "output": "sudo ifconfig eth0 mtu 1400"
  },
  {
    "input": "Enable promiscuous mode on an interface",
    "output": "sudo ifconfig eth0 promisc"
  },
  {
    "input": "Disable promiscuous mode on an interface",
    "output": "sudo ifconfig eth0 -promisc"
  },
  {
    "input": "Enable ARP on an interface",
    "output": "sudo ifconfig eth0 arp"
  },
  {
    "input": "Disable ARP on an interface",
    "output": "sudo ifconfig eth0 -arp"
  },
  {
    "input": "Enable all-multicast mode on an interface",
    "output": "sudo ifconfig eth0 allmulti"
  },
  {
    "input": "Disable all-multicast mode on an interface",
    "output": "sudo ifconfig eth0 -allmulti"
  },
  {
    "input": "Show only interfaces with IPv6 addresses",
    "output": "ifconfig | grep inet6"
  },
  {
    "input": "Show only interfaces with IPv4 addresses",
    "output": "ifconfig | grep inet"
  },
  {
    "input": "Show only MAC addresses of interfaces",
    "output": "ifconfig | grep ether"
  },
  {
    "input": "Show broadcast addresses of interfaces",
    "output": "ifconfig | grep broadcast"
  },
  {
    "input": "Show network interfaces with their RX and TX packet statistics",
    "output": "ifconfig | grep 'RX packets\\|TX packets'"
  },
  {
    "input": "Show errors on network interfaces",
    "output": "ifconfig | grep errors"
  },
  {
    "input": "Show dropped packets on network interfaces",
    "output": "ifconfig | grep dropped"
  },
  {
    "input": "Show collisions on network interfaces",
    "output": "ifconfig | grep collisions"
  },
  {
    "input": "Show the status of a serial line IP interface (e.g., sl1)",
    "output": "ifconfig sl1"
  },
  {
    "input": "Show the configuration of a wireless interface (e.g., wlan0)",
    "output": "ifconfig wlan0"
  },
  {
    "input": "Assign an IPv6 address to an interface",
    "output": "sudo ifconfig eth0 inet6 add 2001:db8::1/64"
  },
  {
    "input": "Remove an IPv6 address from an interface",
    "output": "sudo ifconfig eth0 inet6 del 2001:db8::1/64"
  },
  {
    "input": "Configure the local loopback interface",
    "output": "sudo ifconfig lo 127.0.0.1 up"
  },
  {
    "input": "Configure a point-to-point interface",
    "output": "sudo ifconfig ppp0 192.168.1.1 pointopoint 192.168.1.2 up"
  },
  {
    "input": "Assign a secondary IP to an interface (alias)",
    "output": "sudo ifconfig eth0:1 192.168.1.101 up"
  },
  {
    "input": "Remove a secondary IP from an interface (alias)",
    "output": "sudo ifconfig eth0:1 down"
  },
  {
    "input": "Show multicast group memberships",
    "output": "ifconfig | grep MULTICAST"
  },
  {
    "input": "Show all network interfaces with their flags",
    "output": "ifconfig -a"
  },
  {
    "input": "Show interfaces that are up",
    "output": "ifconfig -u"
  },
  {
    "input": "Show interfaces that are down",
    "output": "ifconfig -d"
  },
  {
    "input": "Show all interfaces with protocol family inet",
    "output": "ifconfig -a inet"
  },
  {
    "input": "Show all interfaces with protocol family inet6",
    "output": "ifconfig -a inet6"
  },
  {
    "input": "Show all interfaces with protocol family ns",
    "output": "ifconfig -a ns"
  },
  {
    "input": "Show all interfaces with protocol family tcp",
    "output": "ifconfig -a tcp"
  },
  {
    "input": "Show all interfaces with protocol family udp",
    "output": "ifconfig -a udp"
  },
  {
    "input": "Show all interfaces with protocol family icmp",
    "output": "ifconfig -a icmp"
  },
  {
    "input": "Show all interfaces with protocol family icmp6",
    "output": "ifconfig -a icmp6"
  },
  {
    "input": "Show the configuration for interface enp0s3",
    "output": "ifconfig enp0s3"
  },
  {
    "input": "Bring up interface enp0s3",
    "output": "sudo ifconfig enp0s3 up"
  },
  {
    "input": "Bring down interface enp0s3",
    "output": "sudo ifconfig enp0s3 down"
  },
  {
    "input": "Assign IP 10.0.2.15 to enp0s3",
    "output": "sudo ifconfig enp0s3 10.0.2.15"
  },
  {
    "input": "Assign netmask 255.255.255.0 to enp0s3",
    "output": "sudo ifconfig enp0s3 netmask 255.255.255.0"
  },
  {
    "input": "Assign broadcast 10.0.2.255 to enp0s3",
    "output": "sudo ifconfig enp0s3 broadcast 10.0.2.255"
  },
  {
    "input": "Assign MTU 1500 to enp0s3",
    "output": "sudo ifconfig enp0s3 mtu 1500"
  },
  {
    "input": "Enable promiscuous mode on enp0s3",
    "output": "sudo ifconfig enp0s3 promisc"
  },
  {
    "input": "Disable promiscuous mode on enp0s3",
    "output": "sudo ifconfig enp0s3 -promisc"
  },
  {
    "input": "Enable ARP on enp0s3",
    "output": "sudo ifconfig enp0s3 arp"
  },
  {
    "input": "Disable ARP on enp0s3",
    "output": "sudo ifconfig enp0s3 -arp"
  },
  {
    "input": "Enable allmulti on enp0s3",
    "output": "sudo ifconfig enp0s3 allmulti"
  },
  {
    "input": "Disable allmulti on enp0s3",
    "output": "sudo ifconfig enp0s3 -allmulti"
  },
  {
    "input": "Assign IP 192.168.0.10 and netmask 255.255.255.128 to eth1",
    "output": "sudo ifconfig eth1 192.168.0.10 netmask 255.255.255.128"
  },
  {
    "input": "Assign IP 10.10.10.1 and broadcast 10.10.10.255 to eth2",
    "output": "sudo ifconfig eth2 10.10.10.1 broadcast 10.10.10.255"
  },
  {
    "input": "Assign IP 172.16.0.1 and netmask 255.255.0.0 to eth3",
    "output": "sudo ifconfig eth3 172.16.0.1 netmask 255.255.0.0"
  },
  {
    "input": "Assign IP 192.168.1.20 and MTU 9000 to eth4",
    "output": "sudo ifconfig eth4 192.168.1.20 mtu 9000"
  },
  {
    "input": "Assign IP 10.0.0.2 and enable promiscuous mode on eth5",
    "output": "sudo ifconfig eth5 10.0.0.2 promisc"
  },
  {
    "input": "Assign IP 192.168.1.30 and disable ARP on eth6",
    "output": "sudo ifconfig eth6 192.168.1.30 -arp"
  },
  {
    "input": "Assign IP 192.168.1.40 and enable allmulti on eth7",
    "output": "sudo ifconfig eth7 192.168.1.40 allmulti"
  },
  {
    "input": "Assign IP 192.168.1.50 and disable allmulti on eth8",
    "output": "sudo ifconfig eth8 192.168.1.50 -allmulti"
  },
  {
    "input": "Show the configuration of interface ens33",
    "output": "ifconfig ens33"
  },
  {
    "input": "Bring up interface ens33",
    "output": "sudo ifconfig ens33 up"
  },
  {
    "input": "Bring down interface ens33",
    "output": "sudo ifconfig ens33 down"
  },
  {
    "input": "Assign IP 192.168.56.101 to ens33",
    "output": "sudo ifconfig ens33 192.168.56.101"
  },
  {
    "input": "Assign netmask 255.255.255.0 to ens33",
    "output": "sudo ifconfig ens33 netmask 255.255.255.0"
  },
  {
    "input": "Assign broadcast 192.168.56.255 to ens33",
    "output": "sudo ifconfig ens33 broadcast 192.168.56.255"
  },
  {
    "input": "Assign MTU 1400 to ens33",
    "output": "sudo ifconfig ens33 mtu 1400"
  },
  {
    "input": "Enable promiscuous mode on ens33",
    "output": "sudo ifconfig ens33 promisc"
  },
  {
    "input": "Disable promiscuous mode on ens33",
    "output": "sudo ifconfig ens33 -promisc"
  },
  {
    "input": "Enable ARP on ens33",
    "output": "sudo ifconfig ens33 arp"
  },
  {
    "input": "Disable ARP on ens33",
    "output": "sudo ifconfig ens33 -arp"
  },
  {
    "input": "Enable allmulti on ens33",
    "output": "sudo ifconfig ens33 allmulti"
  },
  {
    "input": "Disable allmulti on ens33",
    "output": "sudo ifconfig ens33 -allmulti"
  },
  {
    "input": "Show only the interface flags for eth0",
    "output": "ifconfig eth0 | grep flags"
  },
  {
    "input": "Show only the MAC address for eth0",
    "output": "ifconfig eth0 | grep ether"
  },
  {
    "input": "Show only the IP address for eth0",
    "output": "ifconfig eth0 | grep inet"
  },
  {
    "input": "Show only the IPv6 address for eth0",
    "output": "ifconfig eth0 | grep inet6"
  },
  {
    "input": "Show only the MTU for eth0",
    "output": "ifconfig eth0 | grep mtu"
  },
  {
    "input": "Show only the RX packets for eth0",
    "output": "ifconfig eth0 | grep 'RX packets'"
  },
  {
    "input": "Show only the TX packets for eth0",
    "output": "ifconfig eth0 | grep 'TX packets'"
  },
  {
    "input": "Show only the errors for eth0",
    "output": "ifconfig eth0 | grep errors"
  },
  {
    "input": "Show only the dropped packets for eth0",
    "output": "ifconfig eth0 | grep dropped"
  },
  {
    "input": "Show only the collisions for eth0",
    "output": "ifconfig eth0 | grep collisions"
  },
  {
    "input": "Show all interfaces with their hardware addresses",
    "output": "ifconfig -a | grep ether"
  },
  {
    "input": "Show all interfaces with their IPv4 addresses",
    "output": "ifconfig -a | grep inet"
  },
  {
    "input": "Show all interfaces with their IPv6 addresses",
    "output": "ifconfig -a | grep inet6"
  },
  {
    "input": "Show all interfaces with their MTU values",
    "output": "ifconfig -a | grep mtu"
  },
  {
    "input": "Show all interfaces with their RX and TX packet statistics",
    "output": "ifconfig -a | grep 'RX packets\\|TX packets'"
  },
  {
    "input": "Show all interfaces with their error statistics",
    "output": "ifconfig -a | grep errors"
  },
  {
    "input": "Show all interfaces with their dropped packet statistics",
    "output": "ifconfig -a | grep dropped"
  },
  {
    "input": "Show all interfaces with their collision statistics",
    "output": "ifconfig -a | grep collisions"
  },
  {
    "input": "Show all interfaces with their multicast group memberships",
    "output": "ifconfig -a | grep MULTICAST"
  },
  {
    "input": "Show all interfaces with their flags",
    "output": "ifconfig -a | grep flags"
  },
  {
    "input": "Show all interfaces with their status (UP/DOWN)",
    "output": "ifconfig -a | grep -E 'UP|DOWN'"
  },
  {
    "input": "Show all interfaces with their status (RUNNING)",
    "output": "ifconfig -a | grep RUNNING"
  },
  {
    "input": "Show all interfaces with their status (BROADCAST)",
    "output": "ifconfig -a | grep BROADCAST"
  },
  {
    "input": "Show all interfaces with their status (MULTICAST)",
    "output": "ifconfig -a | grep MULTICAST"
  },
  {
    "input": "Show all interfaces with their status (PROMISC)",
    "output": "ifconfig -a | grep PROMISC"
  },
  {
    "input": "Show all interfaces with their status (LOOPBACK)",
    "output": "ifconfig -a | grep LOOPBACK"
  },
  {
    "input": "Show all interfaces with their status (POINTTOPOINT)",
    "output": "ifconfig -a | grep POINTTOPOINT"
  },
  {
    "input": "Show all interfaces with their status (NOARP)",
    "output": "ifconfig -a | grep NOARP"
  },
  {
    "input": "Show all interfaces with their status (ALLMULTI)",
    "output": "ifconfig -a | grep ALLMULTI"
  },
  {
    "input": "Show configuration for all active network interfaces",
    "output": "ifconfig"
  },
  {
    "input": "Show configuration for all interfaces, including inactive",
    "output": "ifconfig -a"
  },
  {
    "input": "Show a concise summary of all interfaces",
    "output": "ifconfig -s"
  },
  {
    "input": "Show verbose configuration for all interfaces",
    "output": "ifconfig -v"
  },
  {
    "input": "Show configuration for a specific interface (e.g., eth0)",
    "output": "ifconfig eth0"
  },
  {
    "input": "Show configuration for the loopback interface",
    "output": "ifconfig lo"
  },
  {
    "input": "List all available network interfaces",
    "output": "ifconfig -a"
  },
  {
    "input": "List only interfaces that are up",
    "output": "ifconfig -u"
  },
  {
    "input": "List only interfaces that are down",
    "output": "ifconfig -d"
  },
  {
    "input": "Display only the names of all interfaces",
    "output": "ifconfig -l"
  },
  {
    "input": "Activate a network interface (e.g., eth0)",
    "output": "sudo ifconfig eth0 up"
  },
  {
    "input": "Deactivate a network interface (e.g., eth0)",
    "output": "sudo ifconfig eth0 down"
  },
  {
    "input": "Assign an IP address to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100"
  },
  {
    "input": "Assign an IP address and netmask to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0"
  },
  {
    "input": "Assign an IP address, netmask, and broadcast to an interface",
    "output": "sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 broadcast 192.168.1.255"
  },
  {
    "input": "Set the netmask for an interface",
    "output": "sudo ifconfig eth0 netmask 255.255.255.0"
  },
  {
    "input": "Set the broadcast address for an interface",
    "output": "sudo ifconfig eth0 broadcast 192.168.1.255"
  },
  {
    "input": "Set the MTU for an interface",
    "output": "sudo ifconfig eth0 mtu 1400"
  },
  {
    "input": "Enable promiscuous mode on an interface",
    "output": "sudo ifconfig eth0 promisc"
  },
  {
    "input": "Disable promiscuous mode on an interface",
    "output": "sudo ifconfig eth0 -promisc"
  },
  {
    "input": "Enable ARP on an interface",
    "output": "sudo ifconfig eth0 arp"
  },
  {
    "input": "Disable ARP on an interface",
    "output": "sudo ifconfig eth0 -arp"
  },
  {
    "input": "Enable all-multicast mode on an interface",
    "output": "sudo ifconfig eth0 allmulti"
  },
  {
    "input": "Disable all-multicast mode on an interface",
    "output": "sudo ifconfig eth0 -allmulti"
  },
  {
    "input": "Show only interfaces with IPv6 addresses",
    "output": "ifconfig | grep inet6"
  },
  {
    "input": "Show only interfaces with IPv4 addresses",
    "output": "ifconfig | grep inet"
  },
  {
    "input": "Show only MAC addresses of interfaces",
    "output": "ifconfig | grep ether"
  },
  {
    "input": "Show broadcast addresses of interfaces",
    "output": "ifconfig | grep broadcast"
  },
  {
    "input": "Show network interfaces with their RX and TX packet statistics",
    "output": "ifconfig | grep 'RX packets\\|TX packets'"
  },
  {
    "input": "Show errors on network interfaces",
    "output": "ifconfig | grep errors"
  },
  {
    "input": "Show dropped packets on network interfaces",
    "output": "ifconfig | grep dropped"
  },
  {
    "input": "Show collisions on network interfaces",
    "output": "ifconfig | grep collisions"
  },
  {
    "input": "Show the status of a serial line IP interface (e.g., sl1)",
    "output": "ifconfig sl1"
  },
  {
    "input": "Show the configuration of a wireless interface (e.g., wlan0)",
    "output": "ifconfig wlan0"
  },
  {
    "input": "Assign an IPv6 address to an interface",
    "output": "sudo ifconfig eth0 inet6 add 2001:db8::1/64"
  },
  {
    "input": "Remove an IPv6 address from an interface",
    "output": "sudo ifconfig eth0 inet6 del 2001:db8::1/64"
  },
  {
    "input": "Configure the local loopback interface",
    "output": "sudo ifconfig lo 127.0.0.1 up"
  },
  {
    "input": "Configure a point-to-point interface",
    "output": "sudo ifconfig ppp0 192.168.1.1 pointopoint 192.168.1.2 up"
  },
  {
    "input": "Assign a secondary IP to an interface (alias)",
    "output": "sudo ifconfig eth0:1 192.168.1.101 up"
  },
  {
    "input": "Remove a secondary IP from an interface (alias)",
    "output": "sudo ifconfig eth0:1 down"
  },
  {
    "input": "Show multicast group memberships",
    "output": "ifconfig | grep MULTICAST"
  },
  {
    "input": "Show all network interfaces with their flags",
    "output": "ifconfig -a"
  },
  {
    "input": "Show interfaces that are up",
    "output": "ifconfig -u"
  },
  {
    "input": "Show interfaces that are down",
    "output": "ifconfig -d"
  },
  {
    "input": "Show all interfaces with protocol family inet",
    "output": "ifconfig -a inet"
  },
  {
    "input": "Show all interfaces with protocol family inet6",
    "output": "ifconfig -a inet6"
  },
  {
    "input": "Show all interfaces with protocol family ns",
    "output": "ifconfig -a ns"
  },
  {
    "input": "Show all interfaces with protocol family tcp",
    "output": "ifconfig -a tcp"
  },
  {
    "input": "Show all interfaces with protocol family udp",
    "output": "ifconfig -a udp"
  },
  {
    "input": "Show all interfaces with protocol family icmp",
    "output": "ifconfig -a icmp"
  },
  {
    "input": "Show all interfaces with protocol family icmp6",
    "output": "ifconfig -a icmp6"
  },
  {
    "input": "Show the configuration for interface enp0s3",
    "output": "ifconfig enp0s3"
  },
  {
    "input": "Bring up interface enp0s3",
    "output": "sudo ifconfig enp0s3 up"
  },
  {
    "input": "Bring down interface enp0s3",
    "output": "sudo ifconfig enp0s3 down"
  },
  {
    "input": "Assign IP 10.0.2.15 to enp0s3",
    "output": "sudo ifconfig enp0s3 10.0.2.15"
  },
  {
    "input": "Assign netmask 255.255.255.0 to enp0s3",
    "output": "sudo ifconfig enp0s3 netmask 255.255.255.0"
  },
  {
    "input": "Assign broadcast 10.0.2.255 to enp0s3",
    "output": "sudo ifconfig enp0s3 broadcast 10.0.2.255"
  },
  {
    "input": "Assign MTU 1500 to enp0s3",
    "output": "sudo ifconfig enp0s3 mtu 1500"
  },
  {
    "input": "Enable promiscuous mode on enp0s3",
    "output": "sudo ifconfig enp0s3 promisc"
  },
  {
    "input": "Disable promiscuous mode on enp0s3",
    "output": "sudo ifconfig enp0s3 -promisc"
  },
  {
    "input": "Enable ARP on enp0s3",
    "output": "sudo ifconfig enp0s3 arp"
  },
  {
    "input": "Disable ARP on enp0s3",
    "output": "sudo ifconfig enp0s3 -arp"
  },
  {
    "input": "Enable allmulti on enp0s3",
    "output": "sudo ifconfig enp0s3 allmulti"
  },
  {
    "input": "Disable allmulti on enp0s3",
    "output": "sudo ifconfig enp0s3 -allmulti"
  },
  {
    "input": "Assign IP 192.168.0.10 and netmask 255.255.255.128 to eth1",
    "output": "sudo ifconfig eth1 192.168.0.10 netmask 255.255.255.128"
  },
  {
    "input": "Assign IP 10.10.10.1 and broadcast 10.10.10.255 to eth2",
    "output": "sudo ifconfig eth2 10.10.10.1 broadcast 10.10.10.255"
  },
  {
    "input": "Assign IP 172.16.0.1 and netmask 255.255.0.0 to eth3",
    "output": "sudo ifconfig eth3 172.16.0.1 netmask 255.255.0.0"
  },
  {
    "input": "Assign IP 192.168.1.20 and MTU 9000 to eth4",
    "output": "sudo ifconfig eth4 192.168.1.20 mtu 9000"
  },
  {
    "input": "Assign IP 10.0.0.2 and enable promiscuous mode on eth5",
    "output": "sudo ifconfig eth5 10.0.0.2 promisc"
  },
  {
    "input": "Assign IP 192.168.1.30 and disable ARP on eth6",
    "output": "sudo ifconfig eth6 192.168.1.30 -arp"
  },
  {
    "input": "Assign IP 192.168.1.40 and enable allmulti on eth7",
    "output": "sudo ifconfig eth7 192.168.1.40 allmulti"
  },
  {
    "input": "Assign IP 192.168.1.50 and disable allmulti on eth8",
    "output": "sudo ifconfig eth8 192.168.1.50 -allmulti"
  },
  {
    "input": "Show the configuration of interface ens33",
    "output": "ifconfig ens33"
  },
  {
    "input": "Bring up interface ens33",
    "output": "sudo ifconfig ens33 up"
  },
  {
    "input": "Bring down interface ens33",
    "output": "sudo ifconfig ens33 down"
  },
  {
    "input": "Assign IP 192.168.56.101 to ens33",
    "output": "sudo ifconfig ens33 192.168.56.101"
  },
  {
    "input": "Assign netmask 255.255.255.0 to ens33",
    "output": "sudo ifconfig ens33 netmask 255.255.255.0"
  },
  {
    "input": "Assign broadcast 192.168.56.255 to ens33",
    "output": "sudo ifconfig ens33 broadcast 192.168.56.255"
  },
  {
    "input": "Assign MTU 1400 to ens33",
    "output": "sudo ifconfig ens33 mtu 1400"
  },
  {
    "input": "Enable promiscuous mode on ens33",
    "output": "sudo ifconfig ens33 promisc"
  },
  {
    "input": "Disable promiscuous mode on ens33",
    "output": "sudo ifconfig ens33 -promisc"
  },
  {
    "input": "Enable ARP on ens33",
    "output": "sudo ifconfig ens33 arp"
  },
  {
    "input": "Disable ARP on ens33",
    "output": "sudo ifconfig ens33 -arp"
  },
  {
    "input": "Enable allmulti on ens33",
    "output": "sudo ifconfig ens33 allmulti"
  },
  {
    "input": "Disable allmulti on ens33",
    "output": "sudo ifconfig ens33 -allmulti"
  },
  {
    "input": "Show only the interface flags for eth0",
    "output": "ifconfig eth0 | grep flags"
  },
  {
    "input": "Show only the MAC address for eth0",
    "output": "ifconfig eth0 | grep ether"
  },
  {
    "input": "Show only the IP address for eth0",
    "output": "ifconfig eth0 | grep inet"
  },
  {
    "input": "Show only the IPv6 address for eth0",
    "output": "ifconfig eth0 | grep inet6"
  },
  {
    "input": "Show only the MTU for eth0",
    "output": "ifconfig eth0 | grep mtu"
  },
  {
    "input": "Show only the RX packets for eth0",
    "output": "ifconfig eth0 | grep 'RX packets'"
  },
  {
    "input": "Show only the TX packets for eth0",
    "output": "ifconfig eth0 | grep 'TX packets'"
  },
  {
    "input": "Show only the errors for eth0",
    "output": "ifconfig eth0 | grep errors"
  },
  {
    "input": "Show only the dropped packets for eth0",
    "output": "ifconfig eth0 | grep dropped"
  },
  {
    "input": "Show only the collisions for eth0",
    "output": "ifconfig eth0 | grep collisions"
  },
  {
    "input": "Show all interfaces with their hardware addresses",
    "output": "ifconfig -a | grep ether"
  },
  {
    "input": "Show all interfaces with their IPv4 addresses",
    "output": "ifconfig -a | grep inet"
  },
  {
    "input": "Show all interfaces with their IPv6 addresses",
    "output": "ifconfig -a | grep inet6"
  },
  {
    "input": "Show all interfaces with their MTU values",
    "output": "ifconfig -a | grep mtu"
  },
  {
    "input": "Show all interfaces with their RX and TX packet statistics",
    "output": "ifconfig -a | grep 'RX packets\\|TX packets'"
  },
  {
    "input": "Show all interfaces with their error statistics",
    "output": "ifconfig -a | grep errors"
  },
  {
    "input": "Show all interfaces with their dropped packet statistics",
    "output": "ifconfig -a | grep dropped"
  },
  {
    "input": "Show all interfaces with their collision statistics",
    "output": "ifconfig -a | grep collisions"
  },
  {
    "input": "Show all interfaces with their multicast group memberships",
    "output": "ifconfig -a | grep MULTICAST"
  },
  {
    "input": "Show all interfaces with their flags",
    "output": "ifconfig -a | grep flags"
  },
  {
    "input": "Show all interfaces with their status (UP/DOWN)",
    "output": "ifconfig -a | grep -E 'UP|DOWN'"
  },
  {
    "input": "Show all interfaces with their status (RUNNING)",
    "output": "ifconfig -a | grep RUNNING"
  },
  {
    "input": "Show all interfaces with their status (BROADCAST)",
    "output": "ifconfig -a | grep BROADCAST"
  },
  {
    "input": "Show all interfaces with their status (MULTICAST)",
    "output": "ifconfig -a | grep MULTICAST"
  },
  {
    "input": "Show all interfaces with their status (PROMISC)",
    "output": "ifconfig -a | grep PROMISC"
  },
  {
    "input": "Show all interfaces with their status (LOOPBACK)",
    "output": "ifconfig -a | grep LOOPBACK"
  },
  {
    "input": "Show all interfaces with their status (POINTTOPOINT)",
    "output": "ifconfig -a | grep POINTTOPOINT"
  },
  {
    "input": "Show all interfaces with their status (NOARP)",
    "output": "ifconfig -a | grep NOARP"
  },
  {
    "input": "Show all interfaces with their status (ALLMULTI)",
    "output": "ifconfig -a | grep ALLMULTI"
  },
  {
    "input": "Run mtr to google.com in interactive mode",
    "output": "mtr google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 in interactive mode",
    "output": "mtr 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com in report mode",
    "output": "mtr -r example.com"
  },
  {
    "input": "Run mtr to yahoo.com in report mode with 10 cycles",
    "output": "mtr -r -c 10 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and display numeric IP addresses only",
    "output": "mtr -n github.com"
  },
  {
    "input": "Run mtr to amazon.com and display both IP and hostnames",
    "output": "mtr -b amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and use IPv4 only",
    "output": "mtr -4 facebook.com"
  },
  {
    "input": "Run mtr to google.com and use IPv6 only",
    "output": "mtr -6 google.com"
  },
  {
    "input": "Run mtr to 1.1.1.1 and show maximum 15 hops",
    "output": "mtr -m 15 1.1.1.1"
  },
  {
    "input": "Run mtr to example.com and use a packet size of 100 bytes",
    "output": "mtr -s 100 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and use a packet size of 1400 bytes",
    "output": "mtr -s 1400 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set interval to 2 seconds",
    "output": "mtr -i 2 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set interval to 0.5 seconds",
    "output": "mtr -i 0.5 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set timeout per probe to 1 second",
    "output": "mtr --timeout 1 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set timeout per probe to 5 seconds",
    "output": "mtr --timeout 5 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set the number of pings per hop to 5",
    "output": "mtr -c 5 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set the number of pings per hop to 20",
    "output": "mtr -c 20 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and use TCP instead of ICMP",
    "output": "mtr --tcp yahoo.com"
  },
  {
    "input": "Run mtr to github.com and use UDP instead of ICMP",
    "output": "mtr --udp github.com"
  },
  {
    "input": "Run mtr to amazon.com and show both hostnames and IP addresses",
    "output": "mtr -b amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and show ASN information",
    "output": "mtr --aslookup facebook.com"
  },
  {
    "input": "Run mtr to google.com and show output in JSON format",
    "output": "mtr --json google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and show output in CSV format",
    "output": "mtr --csv 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and show output in XML format",
    "output": "mtr --xml example.com"
  },
  {
    "input": "Run mtr to yahoo.com and show output in raw format",
    "output": "mtr --raw yahoo.com"
  },
  {
    "input": "Run mtr to github.com and show output in report-wide format",
    "output": "mtr --report-wide github.com"
  },
  {
    "input": "Run mtr to amazon.com and show output in split format",
    "output": "mtr --split amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and show output in wide format",
    "output": "mtr --wide facebook.com"
  },
  {
    "input": "Run mtr to google.com and set maximum TTL to 30",
    "output": "mtr -m 30 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set maximum TTL to 64",
    "output": "mtr -m 64 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set maximum TTL to 10",
    "output": "mtr -m 10 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set maximum TTL to 5",
    "output": "mtr -m 5 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set maximum TTL to 50",
    "output": "mtr -m 50 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set maximum TTL to 100",
    "output": "mtr -m 100 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com with 100 cycles in report mode",
    "output": "mtr -r -c 100 facebook.com"
  },
  {
    "input": "Run mtr to google.com with 200 cycles in report mode",
    "output": "mtr -r -c 200 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with 50 cycles in report mode",
    "output": "mtr -r -c 50 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com with 25 cycles in report mode",
    "output": "mtr -r -c 25 example.com"
  },
  {
    "input": "Run mtr to yahoo.com with 75 cycles in report mode",
    "output": "mtr -r -c 75 yahoo.com"
  },
  {
    "input": "Run mtr to github.com with 150 cycles in report mode",
    "output": "mtr -r -c 150 github.com"
  },
  {
    "input": "Run mtr to amazon.com with 300 cycles in report mode",
    "output": "mtr -r -c 300 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and display only numeric IPs",
    "output": "mtr -n facebook.com"
  },
  {
    "input": "Run mtr to google.com and display both hostnames and IPs",
    "output": "mtr -b google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and display ASN info",
    "output": "mtr --aslookup 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and use TCP protocol",
    "output": "mtr --tcp example.com"
  },
  {
    "input": "Run mtr to yahoo.com and use UDP protocol",
    "output": "mtr --udp yahoo.com"
  },
  {
    "input": "Run mtr to github.com and use IPv4 only",
    "output": "mtr -4 github.com"
  },
  {
    "input": "Run mtr to amazon.com and use IPv6 only",
    "output": "mtr -6 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set interval to 1 second",
    "output": "mtr -i 1 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set interval to 0.1 second",
    "output": "mtr -i 0.1 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set interval to 5 seconds",
    "output": "mtr -i 5 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set interval to 10 seconds",
    "output": "mtr -i 10 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set interval to 0.25 seconds",
    "output": "mtr -i 0.25 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set interval to 0.75 seconds",
    "output": "mtr -i 0.75 github.com"
  },
  {
    "input": "Run mtr to amazon.com and use a packet size of 56 bytes",
    "output": "mtr -s 56 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and use a packet size of 512 bytes",
    "output": "mtr -s 512 facebook.com"
  },
  {
    "input": "Run mtr to google.com and use a packet size of 1500 bytes",
    "output": "mtr -s 1500 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and use a packet size of 2000 bytes",
    "output": "mtr -s 2000 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and use a packet size of 4096 bytes",
    "output": "mtr -s 4096 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and use a packet size of 8192 bytes",
    "output": "mtr -s 8192 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and use a packet size of 10000 bytes",
    "output": "mtr -s 10000 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set maximum TTL to 20",
    "output": "mtr -m 20 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set maximum TTL to 40",
    "output": "mtr -m 40 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set maximum TTL to 60",
    "output": "mtr -m 60 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set maximum TTL to 80",
    "output": "mtr -m 80 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set maximum TTL to 100",
    "output": "mtr -m 100 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set maximum TTL to 128",
    "output": "mtr -m 128 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set maximum TTL to 255",
    "output": "mtr -m 255 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set the number of pings per hop to 1",
    "output": "mtr -c 1 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set the number of pings per hop to 2",
    "output": "mtr -c 2 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set the number of pings per hop to 3",
    "output": "mtr -c 3 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set the number of pings per hop to 4",
    "output": "mtr -c 4 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set the number of pings per hop to 6",
    "output": "mtr -c 6 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set the number of pings per hop to 7",
    "output": "mtr -c 7 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set the number of pings per hop to 8",
    "output": "mtr -c 8 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set the number of pings per hop to 9",
    "output": "mtr -c 9 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set the number of pings per hop to 11",
    "output": "mtr -c 11 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set the number of pings per hop to 12",
    "output": "mtr -c 12 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set the number of pings per hop to 13",
    "output": "mtr -c 13 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set the number of pings per hop to 14",
    "output": "mtr -c 14 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set the number of pings per hop to 15",
    "output": "mtr -c 15 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set the number of pings per hop to 16",
    "output": "mtr -c 16 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set the number of pings per hop to 17",
    "output": "mtr -c 17 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set the number of pings per hop to 18",
    "output": "mtr -c 18 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set the number of pings per hop to 19",
    "output": "mtr -c 19 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set the number of pings per hop to 21",
    "output": "mtr -c 21 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set the number of pings per hop to 22",
    "output": "mtr -c 22 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set the number of pings per hop to 23",
    "output": "mtr -c 23 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set the number of pings per hop to 24",
    "output": "mtr -c 24 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set the number of pings per hop to 25",
    "output": "mtr -c 25 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set the number of pings per hop to 30",
    "output": "mtr -c 30 facebook.com"
  },
  {
    "input": "Run mtr to google.com and set the number of pings per hop to 40",
    "output": "mtr -c 40 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and set the number of pings per hop to 50",
    "output": "mtr -c 50 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and set the number of pings per hop to 60",
    "output": "mtr -c 60 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and set the number of pings per hop to 70",
    "output": "mtr -c 70 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and set the number of pings per hop to 80",
    "output": "mtr -c 80 github.com"
  },
  {
    "input": "Run mtr to amazon.com and set the number of pings per hop to 90",
    "output": "mtr -c 90 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and set the number of pings per hop to 100",
    "output": "mtr -c 100 facebook.com"
  },
  {
    "input": "Run mtr to google.com and show output in JSON format with 10 cycles",
    "output": "mtr --json -c 10 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 and show output in CSV format with 20 cycles",
    "output": "mtr --csv -c 20 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com and show output in XML format with 30 cycles",
    "output": "mtr --xml -c 30 example.com"
  },
  {
    "input": "Run mtr to yahoo.com and show output in raw format with 40 cycles",
    "output": "mtr --raw -c 40 yahoo.com"
  },
  {
    "input": "Run mtr to github.com and show output in report-wide format with 50 cycles",
    "output": "mtr --report-wide -c 50 github.com"
  },
  {
    "input": "Run mtr to amazon.com and show output in split format with 60 cycles",
    "output": "mtr --split -c 60 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com and show output in wide format with 70 cycles",
    "output": "mtr --wide -c 70 facebook.com"
  },
  {
    "input": "Run mtr to google.com with TCP, 100 cycles, and output in JSON format",
    "output": "mtr --tcp --json -c 100 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with UDP, 200 cycles, and output in CSV format",
    "output": "mtr --udp --csv -c 200 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com with IPv4, 50 cycles, and output in XML format",
    "output": "mtr -4 --xml -c 50 example.com"
  },
  {
    "input": "Run mtr to yahoo.com with IPv6, 75 cycles, and output in raw format",
    "output": "mtr -6 --raw -c 75 yahoo.com"
  },
  {
    "input": "Run mtr to github.com with ASN lookup, 150 cycles, and output in report-wide format",
    "output": "mtr --aslookup --report-wide -c 150 github.com"
  },
  {
    "input": "Run mtr to amazon.com with 300 cycles, interval 2s, and output in split format",
    "output": "mtr --split -c 300 -i 2 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com with 100 cycles, interval 0.5s, and output in wide format",
    "output": "mtr --wide -c 100 -i 0.5 facebook.com"
  },
  {
    "input": "Run mtr to google.com with TCP, 200 cycles, interval 1s, and output in JSON format",
    "output": "mtr --tcp --json -c 200 -i 1 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with UDP, 50 cycles, interval 5s, and output in CSV format",
    "output": "mtr --udp --csv -c 50 -i 5 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com with IPv4, 25 cycles, interval 10s, and output in XML format",
    "output": "mtr -4 --xml -c 25 -i 10 example.com"
  },
  {
    "input": "Run mtr to yahoo.com with IPv6, 75 cycles, interval 0.25s, and output in raw format",
    "output": "mtr -6 --raw -c 75 -i 0.25 yahoo.com"
  },
  {
    "input": "Run mtr to github.com with ASN lookup, 150 cycles, interval 0.75s, and output in report-wide format",
    "output": "mtr --aslookup --report-wide -c 150 -i 0.75 github.com"
  },
  {
    "input": "Run mtr to amazon.com with 300 cycles, interval 1s, and output in split format",
    "output": "mtr --split -c 300 -i 1 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com with 100 cycles, interval 2s, and output in wide format",
    "output": "mtr --wide -c 100 -i 2 facebook.com"
  },
  {
    "input": "Run mtr to google.com with TCP, 200 cycles, interval 0.1s, and output in JSON format",
    "output": "mtr --tcp --json -c 200 -i 0.1 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with UDP, 50 cycles, interval 0.5s, and output in CSV format",
    "output": "mtr --udp --csv -c 50 -i 0.5 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com with IPv4, 25 cycles, interval 2s, and output in XML format",
    "output": "mtr -4 --xml -c 25 -i 2 example.com"
  },
  {
    "input": "Run mtr to yahoo.com with IPv6, 75 cycles, interval 5s, and output in raw format",
    "output": "mtr -6 --raw -c 75 -i 5 yahoo.com"
  },
  {
    "input": "Run mtr to github.com with ASN lookup, 150 cycles, interval 10s, and output in report-wide format",
    "output": "mtr --aslookup --report-wide -c 150 -i 10 github.com"
  },
  {
    "input": "Run mtr to amazon.com with 300 cycles, interval 0.25s, and output in split format",
    "output": "mtr --split -c 300 -i 0.25 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com with 100 cycles, interval 0.75s, and output in wide format",
    "output": "mtr --wide -c 100 -i 0.75 facebook.com"
  },
  {
    "input": "Run mtr to google.com with TCP, 200 cycles, interval 0.25s, and output in JSON format",
    "output": "mtr --tcp --json -c 200 -i 0.25 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with UDP, 50 cycles, interval 0.75s, and output in CSV format",
    "output": "mtr --udp --csv -c 50 -i 0.75 8.8.8.8"
  },
  {
    "input": "Run mtr to example.com with IPv4, 25 cycles, interval 1s, and output in XML format",
    "output": "mtr -4 --xml -c 25 -i 1 example.com"
  },
  {
    "input": "Run mtr to yahoo.com with IPv6, 75 cycles, interval 2s, and output in raw format",
    "output": "mtr -6 --raw -c 75 -i 2 yahoo.com"
  },
  {
    "input": "Run mtr to github.com with ASN lookup, 150 cycles, interval 5s, and output in report-wide format",
    "output": "mtr --aslookup --report-wide -c 150 -i 5 github.com"
  },
  {
    "input": "Run mtr to amazon.com with 300 cycles, interval 10s, and output in split format",
    "output": "mtr --split -c 300 -i 10 amazon.com"
  },
  {
    "input": "Run mtr to facebook.com with 100 cycles, interval 0.1s, and output in wide format",
    "output": "mtr --wide -c 100 -i 0.1 facebook.com"
  },
  {
    "input": "Run mtr to google.com with TCP, 200 cycles, interval 0.5s, and output in JSON format",
    "output": "mtr --tcp --json -c 200 -i 0.5 google.com"
  },
  {
    "input": "Run mtr to 8.8.8.8 with UDP, 50 cycles, interval 1s, and output in CSV format",
    "output": "mtr --udp --csv -c 50 -i 1 8.8.8.8"
  },
  {
    "input": "Show all active network connections",
    "output": "netstat"
  },
  {
    "input": "Show all active TCP and UDP connections and listening ports",
    "output": "netstat -a"
  },
  {
    "input": "Show only TCP connections",
    "output": "netstat -t"
  },
  {
    "input": "Show only UDP connections",
    "output": "netstat -u"
  },
  {
    "input": "Show only sockets that are listening for incoming connections",
    "output": "netstat -l"
  },
  {
    "input": "Show only listening TCP ports",
    "output": "netstat -lt"
  },
  {
    "input": "Show only listening UDP ports",
    "output": "netstat -lu"
  },
  {
    "input": "Show only listening UNIX domain sockets",
    "output": "netstat -lx"
  },
  {
    "input": "Show all UNIX domain sockets",
    "output": "netstat -x"
  },
  {
    "input": "Show all connections with numeric addresses and ports",
    "output": "netstat -n"
  },
  {
    "input": "Show all TCP connections with numeric addresses",
    "output": "netstat -tn"
  },
  {
    "input": "Show all UDP connections with numeric addresses",
    "output": "netstat -un"
  },
  {
    "input": "Show only listening sockets with numeric addresses",
    "output": "netstat -ln"
  },
  {
    "input": "Show all connections with process ID and program name",
    "output": "sudo netstat -p"
  },
  {
    "input": "Show TCP connections with PID and program name",
    "output": "sudo netstat -tp"
  },
  {
    "input": "Show UDP connections with PID and program name",
    "output": "sudo netstat -up"
  },
  {
    "input": "Show only listening sockets with PID and program name",
    "output": "sudo netstat -lp"
  },
  {
    "input": "Show all connections with extended information",
    "output": "netstat -e"
  },
  {
    "input": "Show all connections with user IDs",
    "output": "netstat -e"
  },
  {
    "input": "Show all connections with timers",
    "output": "netstat -o"
  },
  {
    "input": "Show all connections with user and process information",
    "output": "sudo netstat -ep"
  },
  {
    "input": "Show all connections with extended information and numeric addresses",
    "output": "netstat -en"
  },
  {
    "input": "Show all connections with wide output (do not truncate addresses)",
    "output": "netstat -W"
  },
  {
    "input": "Show all connections and continuously update every second",
    "output": "netstat -c"
  },
  {
    "input": "Show TCP connections and continuously update every second",
    "output": "netstat -ct"
  },
  {
    "input": "Show UDP connections and continuously update every second",
    "output": "netstat -cu"
  },
  {
    "input": "Show only listening sockets and continuously update",
    "output": "netstat -lc"
  },
  {
    "input": "Show all connections and update every 2 seconds",
    "output": "watch -n 2 netstat"
  },
  {
    "input": "Show the kernel routing table",
    "output": "netstat -r"
  },
  {
    "input": "Show the routing table with numeric addresses",
    "output": "netstat -rn"
  },
  {
    "input": "Show interface statistics",
    "output": "netstat -i"
  },
  {
    "input": "Show interface statistics with extended information",
    "output": "netstat -ie"
  },
  {
    "input": "Show interface statistics continuously",
    "output": "netstat -ic"
  },
  {
    "input": "Show statistics for all protocols",
    "output": "netstat -s"
  },
  {
    "input": "Show statistics for TCP only",
    "output": "netstat -st"
  },
  {
    "input": "Show statistics for UDP only",
    "output": "netstat -su"
  },
  {
    "input": "Show statistics for ICMP only",
    "output": "netstat -s -p icmp"
  },
  {
    "input": "Show statistics for ICMPv6 only",
    "output": "netstat -s -p icmpv6"
  },
  {
    "input": "Show masqueraded connections (NAT)",
    "output": "netstat -M"
  },
  {
    "input": "Show multicast group memberships",
    "output": "netstat -g"
  },
  {
    "input": "Show all connections for IPv4",
    "output": "netstat -4"
  },
  {
    "input": "Show all connections for IPv6",
    "output": "netstat -6"
  },
  {
    "input": "Show all connections for a specific protocol (e.g., IP)",
    "output": "netstat -p IP"
  },
  {
    "input": "Show all connections for a specific protocol (e.g., tcp)",
    "output": "netstat -p tcp"
  },
  {
    "input": "Show all connections for a specific protocol (e.g., udp)",
    "output": "netstat -p udp"
  },
  {
    "input": "Show all connections for a specific protocol (e.g., unix)",
    "output": "netstat -p unix"
  },
  {
    "input": "Show all connections for a specific interface (e.g., eth0)",
    "output": "netstat -i eth0"
  },
  {
    "input": "Show all connections for a specific interface (e.g., wlp2s0)",
    "output": "netstat -I=wlp2s0"
  },
  {
    "input": "Show all connections for a specific address family (e.g., inet)",
    "output": "netstat -f inet"
  },
  {
    "input": "Show all connections for a specific address family (e.g., inet6)",
    "output": "netstat -f inet6"
  },
  {
    "input": "Show all connections for a specific address family (e.g., unix)",
    "output": "netstat -f unix"
  },
  {
    "input": "Show all connections with symbolic hardware names",
    "output": "netstat -N"
  },
  {
    "input": "Show all connections with numeric host addresses",
    "output": "netstat --numeric-hosts"
  },
  {
    "input": "Show all connections with numeric port numbers",
    "output": "netstat --numeric-ports"
  },
  {
    "input": "Show all connections with numeric user IDs",
    "output": "netstat --numeric-users"
  },
  {
    "input": "Show all connections with verbose output",
    "output": "netstat -v"
  },
  {
    "input": "Show all connections and filter for a specific port (e.g., 80)",
    "output": "netstat -an | grep ':80'"
  },
  {
    "input": "Show all connections and filter for a specific process (e.g., ssh)",
    "output": "netstat -ap | grep ssh"
  },
  {
    "input": "Show all listening programs",
    "output": "netstat -lp"
  },
  {
    "input": "Show all established connections",
    "output": "netstat | grep ESTABLISHED"
  },
  {
    "input": "Show all listening connections",
    "output": "netstat | grep LISTEN"
  },
  {
    "input": "Show all TIME_WAIT connections",
    "output": "netstat | grep TIME_WAIT"
  },
  {
    "input": "Show all CLOSE_WAIT connections",
    "output": "netstat | grep CLOSE_WAIT"
  },
  {
    "input": "Show all SYN_SENT connections",
    "output": "netstat | grep SYN_SENT"
  },
  {
    "input": "Show all SYN_RECV connections",
    "output": "netstat | grep SYN_RECV"
  },
  {
    "input": "Show all FIN_WAIT1 connections",
    "output": "netstat | grep FIN_WAIT1"
  },
  {
    "input": "Show all FIN_WAIT2 connections",
    "output": "netstat | grep FIN_WAIT2"
  },
  {
    "input": "Show all connections for a specific user",
    "output": "sudo netstat -ap | grep username"
  },
  {
    "input": "Show all connections for a specific PID",
    "output": "sudo netstat -ap | grep 1234"
  },
  {
    "input": "Show all connections for a specific program",
    "output": "sudo netstat -ap | grep firefox"
  },
  {
    "input": "Show all connections using IPv6",
    "output": "netstat -6"
  },
  {
    "input": "Show all connections using IPv4",
    "output": "netstat -4"
  },
  {
    "input": "Show all open ports",
    "output": "netstat -an | grep 'LISTEN'"
  },
  {
    "input": "Show all open TCP ports",
    "output": "netstat -tan | grep 'LISTEN'"
  },
  {
    "input": "Show all open UDP ports",
    "output": "netstat -uan | grep 'LISTEN'"
  },
  {
    "input": "Show all open UNIX sockets",
    "output": "netstat -xan | grep 'LISTEN'"
  },
  {
    "input": "Show all connections and filter for established",
    "output": "netstat -an | grep 'ESTABLISHED'"
  },
  {
    "input": "Show all connections and filter for foreign address",
    "output": "netstat -an | grep '192.168.1.100'"
  },
  {
    "input": "Show all connections and filter for local address",
    "output": "netstat -an | grep '127.0.0.1'"
  },
  {
    "input": "Show all connections and filter for a specific state",
    "output": "netstat -an | grep 'CLOSE_WAIT'"
  },
  {
    "input": "Show all connections and filter for a specific protocol",
    "output": "netstat -an | grep 'tcp'"
  },
  {
    "input": "Show all connections and filter for a specific port range",
    "output": "netstat -an | grep ':6000-7000'"
  },
  {
    "input": "Show all connections and sort by port number",
    "output": "netstat -an | sort -k4"
  },
  {
    "input": "Show all connections and sort by state",
    "output": "netstat -an | sort -k6"
  },
  {
    "input": "Show all connections and sort by local address",
    "output": "netstat -an | sort -k3"
  },
  {
    "input": "Show all connections and sort by foreign address",
    "output": "netstat -an | sort -k5"
  },
  {
    "input": "Show all connections and save output to a file",
    "output": "netstat -an > netstat_output.txt"
  },
  {
    "input": "Show all connections and append output to a file",
    "output": "netstat -an >> netstat_output.txt"
  },
  {
    "input": "Show all connections and display output in color",
    "output": "netstat -an | lolcat"
  },
  {
    "input": "Show all connections and display output with line numbers",
    "output": "netstat -an | nl"
  },
  {
    "input": "Show all connections and display output in uppercase",
    "output": "netstat -an | tr '[:lower:]' '[:upper:]'"
  },
  {
    "input": "Show all connections and display output in lowercase",
    "output": "netstat -an | tr '[:upper:]' '[:lower:]'"
  },
  {
    "input": "Show all connections and display output with timestamps",
    "output": "date; netstat -an"
  },
  {
    "input": "Show all connections and display output with both timestamps and color",
    "output": "date; netstat -an | lolcat"
  },
  {
    "input": "Show version information for netstat",
    "output": "netstat -V"
  },
  {
    "input": "Show help for netstat",
    "output": "netstat -h"
  },
  {
    "input": "Show NetworkManager status",
    "output": "nmcli general status"
  },
  {
    "input": "Show NetworkManager connectivity state",
    "output": "nmcli -t -f STATE general"
  },
  {
    "input": "Show NetworkManager running status",
    "output": "nmcli -t -f RUNNING general"
  },
  {
    "input": "Show NetworkManager logging configuration",
    "output": "nmcli general logging"
  },
  {
    "input": "Set NetworkManager logging to DEBUG level",
    "output": "nmcli general logging level DEBUG domains CORE,ETHER,IP"
  },
  {
    "input": "Reset NetworkManager logging to default",
    "output": "nmcli general logging level INFO domains DEFAULT"
  },
  {
    "input": "Show NetworkManager permissions",
    "output": "nmcli general permissions"
  },
  {
    "input": "Show NetworkManager hostname",
    "output": "nmcli general hostname"
  },
  {
    "input": "Set NetworkManager hostname",
    "output": "nmcli general hostname myserver.local"
  },
  {
    "input": "Enable NetworkManager networking",
    "output": "nmcli networking on"
  },
  {
    "input": "Disable NetworkManager networking",
    "output": "nmcli networking off"
  },
  {
    "input": "Show NetworkManager networking state",
    "output": "nmcli networking"
  },
  {
    "input": "Show all radio switches status",
    "output": "nmcli radio all"
  },
  {
    "input": "Enable WiFi radio",
    "output": "nmcli radio wifi on"
  },
  {
    "input": "Disable WiFi radio",
    "output": "nmcli radio wifi off"
  },
  {
    "input": "Enable WWAN radio",
    "output": "nmcli radio wwan on"
  },
  {
    "input": "Disable WWAN radio",
    "output": "nmcli radio wwan off"
  },
  {
    "input": "List all connections",
    "output": "nmcli connection show"
  },
  {
    "input": "List active connections",
    "output": "nmcli connection show --active"
  },
  {
    "input": "Show details of a specific connection",
    "output": "nmcli connection show \"My Connection\""
  },
  {
    "input": "Show specific fields of a connection",
    "output": "nmcli -f NAME,UUID,TYPE,DEVICE connection show"
  },
  {
    "input": "Activate a connection",
    "output": "nmcli connection up \"My Connection\""
  },
  {
    "input": "Deactivate a connection",
    "output": "nmcli connection down \"My Connection\""
  },
  {
    "input": "Add a new Ethernet connection",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0"
  },
  {
    "input": "Add a new Ethernet connection with static IP",
    "output": "nmcli connection add type ethernet con-name \"Static Ethernet\" ifname eth0 ip4 192.168.1.100/24 gw4 192.168.1.1"
  },
  {
    "input": "Add a new Ethernet connection with static IP and DNS",
    "output": "nmcli connection add type ethernet con-name \"Static Ethernet DNS\" ifname eth0 ip4 192.168.1.100/24 gw4 192.168.1.1 ipv4.dns \"8.8.8.8 8.8.4.4\""
  },
  {
    "input": "Add a new WiFi connection",
    "output": "nmcli connection add type wifi con-name \"My WiFi\" ifname wlan0 ssid MyNetwork"
  },
  {
    "input": "Add a new WiFi connection with password",
    "output": "nmcli connection add type wifi con-name \"Secure WiFi\" ifname wlan0 ssid MyNetwork wifi-sec.key-mgmt wpa-psk wifi-sec.psk \"mypassword\""
  },
  {
    "input": "Add a new WiFi connection with hidden SSID",
    "output": "nmcli connection add type wifi con-name \"Hidden WiFi\" ifname wlan0 ssid MyHiddenNetwork wifi.hidden yes"
  },
  {
    "input": "Modify a connection's IP address",
    "output": "nmcli connection modify \"My Connection\" ipv4.addresses 192.168.1.200/24"
  },
  {
    "input": "Modify a connection's gateway",
    "output": "nmcli connection modify \"My Connection\" ipv4.gateway 192.168.1.1"
  },
  {
    "input": "Modify a connection's DNS servers",
    "output": "nmcli connection modify \"My Connection\" ipv4.dns \"8.8.8.8 1.1.1.1\""
  },
  {
    "input": "Modify a connection to use DHCP",
    "output": "nmcli connection modify \"My Connection\" ipv4.method auto"
  },
  {
    "input": "Modify a connection to use static IP",
    "output": "nmcli connection modify \"My Connection\" ipv4.method manual"
  },
  {
    "input": "Modify a connection to disable IPv4",
    "output": "nmcli connection modify \"My Connection\" ipv4.method disabled"
  },
  {
    "input": "Modify a connection to disable IPv6",
    "output": "nmcli connection modify \"My Connection\" ipv6.method ignore"
  },
  {
    "input": "Modify a connection's MTU",
    "output": "nmcli connection modify \"My Connection\" ethernet.mtu 9000"
  },
  {
    "input": "Modify a connection's MAC address",
    "output": "nmcli connection modify \"My Connection\" ethernet.cloned-mac-address 00:11:22:33:44:55"
  },
  {
    "input": "Modify a connection to auto-connect",
    "output": "nmcli connection modify \"My Connection\" connection.autoconnect yes"
  },
  {
    "input": "Modify a connection to not auto-connect",
    "output": "nmcli connection modify \"My Connection\" connection.autoconnect no"
  },
  {
    "input": "Modify a connection's priority",
    "output": "nmcli connection modify \"My Connection\" connection.autoconnect-priority 10"
  },
  {
    "input": "Delete a connection",
    "output": "nmcli connection delete \"My Connection\""
  },
  {
    "input": "Reload all connection files",
    "output": "nmcli connection reload"
  },
  {
    "input": "Load a specific connection file",
    "output": "nmcli connection load /etc/NetworkManager/system-connections/my-connection.nmconnection"
  },
  {
    "input": "Show all network devices",
    "output": "nmcli device"
  },
  {
    "input": "Show network device status",
    "output": "nmcli device status"
  },
  {
    "input": "Show detailed information about all devices",
    "output": "nmcli device show"
  },
  {
    "input": "Show detailed information about a specific device",
    "output": "nmcli device show eth0"
  },
  {
    "input": "Connect a device using a specific connection",
    "output": "nmcli device connect eth0"
  },
  {
    "input": "Disconnect a device",
    "output": "nmcli device disconnect eth0"
  },
  {
    "input": "Set a device to managed mode",
    "output": "nmcli device set eth0 managed yes"
  },
  {
    "input": "Set a device to unmanaged mode",
    "output": "nmcli device set eth0 managed no"
  },
  {
    "input": "Enable device autoconnect",
    "output": "nmcli device set eth0 autoconnect yes"
  },
  {
    "input": "Disable device autoconnect",
    "output": "nmcli device set eth0 autoconnect no"
  },
  {
    "input": "Reapply device configuration",
    "output": "nmcli device reapply eth0"
  },
  {
    "input": "Modify device configuration",
    "output": "nmcli device modify eth0 ipv4.addresses 192.168.1.100/24"
  },
  {
    "input": "Scan for available WiFi networks",
    "output": "nmcli device wifi list"
  },
  {
    "input": "Scan for available WiFi networks with signal strength",
    "output": "nmcli -f SSID,SIGNAL,SECURITY device wifi list"
  },
  {
    "input": "Scan for available WiFi networks on a specific interface",
    "output": "nmcli device wifi list ifname wlan0"
  },
  {
    "input": "Rescan for available WiFi networks",
    "output": "nmcli device wifi rescan"
  },
  {
    "input": "Connect to a WiFi network",
    "output": "nmcli device wifi connect MyNetwork"
  },
  {
    "input": "Connect to a WiFi network with password",
    "output": "nmcli device wifi connect MyNetwork password \"mypassword\""
  },
  {
    "input": "Connect to a WiFi network with a specific interface",
    "output": "nmcli device wifi connect MyNetwork password \"mypassword\" ifname wlan0"
  },
  {
    "input": "Connect to a hidden WiFi network",
    "output": "nmcli device wifi connect MyHiddenNetwork password \"mypassword\" hidden yes"
  },
  {
    "input": "Create a WiFi hotspot",
    "output": "nmcli device wifi hotspot"
  },
  {
    "input": "Create a WiFi hotspot with custom SSID and password",
    "output": "nmcli device wifi hotspot ssid MyHotspot password \"mypassword\""
  },
  {
    "input": "Create a WiFi hotspot on a specific interface",
    "output": "nmcli device wifi hotspot ifname wlan0 ssid MyHotspot password \"mypassword\""
  },
  {
    "input": "Show WiFi hotspot password",
    "output": "nmcli device wifi show-password"
  },
  {
    "input": "Monitor NetworkManager activity",
    "output": "nmcli monitor"
  },
  {
    "input": "Add a bond connection",
    "output": "nmcli connection add type bond con-name MyBond ifname bond0 mode active-backup"
  },
  {
    "input": "Add a bond slave connection",
    "output": "nmcli connection add type ethernet con-name bond-slave-eth0 ifname eth0 master bond0"
  },
  {
    "input": "Add a bridge connection",
    "output": "nmcli connection add type bridge con-name MyBridge ifname br0"
  },
  {
    "input": "Add a bridge slave connection",
    "output": "nmcli connection add type ethernet con-name bridge-slave-eth0 ifname eth0 master br0"
  },
  {
    "input": "Add a team connection",
    "output": "nmcli connection add type team con-name MyTeam ifname team0 config '{\"runner\": {\"name\": \"activebackup\"}}'"
  },
  {
    "input": "Add a team slave connection",
    "output": "nmcli connection add type ethernet con-name team-slave-eth0 ifname eth0 master team0"
  },
  {
    "input": "Add a VLAN connection",
    "output": "nmcli connection add type vlan con-name MyVLAN dev eth0 id 100"
  },
  {
    "input": "Add a VPN connection (OpenVPN)",
    "output": "nmcli connection add type vpn con-name MyVPN vpn-type openvpn ifname eth0 vpn.data \"connection-type=password,username=myuser\""
  },
  {
    "input": "Add a VPN connection (L2TP)",
    "output": "nmcli connection add type vpn con-name MyL2TP vpn-type l2tp ifname eth0 vpn.data \"gateway=vpn.example.com,user=myuser\""
  },
  {
    "input": "Add a GSM connection",
    "output": "nmcli connection add type gsm con-name MyGSM ifname ttyUSB0 apn internet"
  },
  {
    "input": "Add a CDMA connection",
    "output": "nmcli connection add type cdma con-name MyCDMA ifname ttyUSB0"
  },
  {
    "input": "Add a Bluetooth connection",
    "output": "nmcli connection add type bluetooth con-name MyBluetooth ifname hci0"
  },
  {
    "input": "Add an InfiniBand connection",
    "output": "nmcli connection add type infiniband con-name MyIB ifname ib0"
  },
  {
    "input": "Add a WireGuard connection",
    "output": "nmcli connection add type wireguard con-name MyWireGuard ifname wg0 ipv4.method manual ipv4.addresses 10.0.0.2/24"
  },
  {
    "input": "Edit a connection in interactive mode",
    "output": "nmcli connection edit \"My Connection\""
  },
  {
    "input": "Clone a connection",
    "output": "nmcli connection clone \"My Connection\" \"My Connection Clone\""
  },
  {
    "input": "Import a VPN connection from file",
    "output": "nmcli connection import type openvpn file /path/to/config.ovpn"
  },
  {
    "input": "Export a connection to a file",
    "output": "nmcli connection export \"My Connection\" /path/to/export.conf"
  },
  {
    "input": "Show connection secrets",
    "output": "nmcli --show-secrets connection show \"My Connection\""
  },
  {
    "input": "Add a connection with a specific UUID",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 uuid 00000000-0000-0000-0000-000000000000"
  },
  {
    "input": "Add a connection with a specific interface name",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0"
  },
  {
    "input": "Add a connection with a specific MAC address",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ethernet.mac-address 00:11:22:33:44:55"
  },
  {
    "input": "Add a connection with a specific MTU",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ethernet.mtu 9000"
  },
  {
    "input": "Add a connection with a specific DNS search domain",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dns-search \"example.com\""
  },
  {
    "input": "Add a connection with a specific DNS priority",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dns-priority 100"
  },
  {
    "input": "Add a connection with a specific route metric",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.route-metric 100"
  },
  {
    "input": "Add a connection with a specific route",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.routes \"192.168.2.0/24 192.168.1.254\""
  },
  {
    "input": "Add a connection with multiple routes",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.routes \"192.168.2.0/24 192.168.1.254, 10.0.0.0/8 192.168.1.1\""
  },
  {
    "input": "Add a connection with a specific IPv6 address",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ip6 2001:db8::1/64"
  },
  {
    "input": "Add a connection with a specific IPv6 gateway",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ip6 2001:db8::1/64 gw6 2001:db8::ffff"
  },
  {
    "input": "Add a connection with specific IPv6 DNS servers",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv6.dns \"2001:4860:4860::8888 2001:4860:4860::8844\""
  },
  {
    "input": "Add a connection with a specific IPv6 method",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv6.method auto"
  },
  {
    "input": "Add a connection with a specific IPv6 privacy setting",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv6.ip6-privacy 2"
  },
  {
    "input": "Add a connection with a specific IPv6 address generation mode",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv6.addr-gen-mode eui64"
  },
  {
    "input": "Add a connection with a specific IPv6 DHCP client ID",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv6.dhcp-duid ll"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP client ID",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-client-id duid"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP timeout",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-timeout 30"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname myhost"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP vendor class identifier",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-vendor-class-identifier \"MyVendor\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP reject servers",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-reject-servers \"192.168.1.2 192.168.1.3\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP required options",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-required-options \"1 3 6 15\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname flags",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-flags \"fqdn\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP send hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-send-hostname yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP route metric",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-route-metric 100"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use routes",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-routes yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use domains",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-domains yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use NTP",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-ntp yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use MTU",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-mtu yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use default route",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-default-route yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use DNS",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-dns yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-hostname yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname priority",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-priority 100"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname source",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-source connection-id"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP iaid",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-iaid mac"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP wait timeout",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-wait-timeout 30"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname flags",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-flags \"fqdn\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname \"myhost\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP fqdn",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-fqdn \"myhost.example.com\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP vendor class identifier",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-vendor-class-identifier \"MyVendor\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP client ID",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-client-id \"MyClient\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP timeout",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-timeout 30"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP reject servers",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-reject-servers \"192.168.1.2 192.168.1.3\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP required options",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-required-options \"1 3 6 15\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname flags",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-flags \"fqdn\""
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP send hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-send-hostname yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP route metric",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-route-metric 100"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use routes",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-routes yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use domains",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-domains yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use NTP",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-ntp yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use MTU",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-mtu yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use default route",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-default-route yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use DNS",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-dns yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP use hostname",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-use-hostname yes"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname priority",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-priority 100"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP hostname source",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-hostname-source connection-id"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP iaid",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-iaid mac"
  },
  {
    "input": "Add a connection with a specific IPv4 DHCP wait timeout",
    "output": "nmcli connection add type ethernet con-name \"My Ethernet\" ifname eth0 ipv4.dhcp-wait-timeout 30"
  },
  {
    "input": "Query the A record for google.com",
    "output": "nslookup google.com"
  },
  {
    "input": "Query the A record for example.com",
    "output": "nslookup example.com"
  },
  {
    "input": "Query the A record for 8.8.8.8 (reverse lookup)",
    "output": "nslookup 8.8.8.8"
  },
  {
    "input": "Query the A record for yahoo.com",
    "output": "nslookup yahoo.com"
  },
  {
    "input": "Query the A record for github.com",
    "output": "nslookup github.com"
  },
  {
    "input": "Query the A record for facebook.com using DNS server 1.1.1.1",
    "output": "nslookup facebook.com 1.1.1.1"
  },
  {
    "input": "Query the A record for google.com using DNS server 8.8.8.8",
    "output": "nslookup google.com 8.8.8.8"
  },
  {
    "input": "Query the A record for example.com using DNS server 9.9.9.9",
    "output": "nslookup example.com 9.9.9.9"
  },
  {
    "input": "Query the A record for yahoo.com using DNS server 208.67.222.222",
    "output": "nslookup yahoo.com 208.67.222.222"
  },
  {
    "input": "Query the A record for github.com using DNS server 4.2.2.2",
    "output": "nslookup github.com 4.2.2.2"
  },
  {
    "input": "Query the AAAA (IPv6) record for google.com",
    "output": "nslookup -query=AAAA google.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for example.com",
    "output": "nslookup -query=AAAA example.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for yahoo.com",
    "output": "nslookup -query=AAAA yahoo.com"
  },
  {
    "input": "Query the AAAA (IPv6) record for github.com",
    "output": "nslookup -query=AAAA github.com"
  },
  {
    "input": "Query the MX record for google.com",
    "output": "nslookup -query=MX google.com"
  },
  {
    "input": "Query the MX record for example.com",
    "output": "nslookup -query=MX example.com"
  },
  {
    "input": "Query the MX record for yahoo.com",
    "output": "nslookup -query=MX yahoo.com"
  },
  {
    "input": "Query the MX record for github.com",
    "output": "nslookup -query=MX github.com"
  },
  {
    "input": "Query the NS record for google.com",
    "output": "nslookup -query=NS google.com"
  },
  {
    "input": "Query the NS record for example.com",
    "output": "nslookup -query=NS example.com"
  },
  {
    "input": "Query the NS record for yahoo.com",
    "output": "nslookup -query=NS yahoo.com"
  },
  {
    "input": "Query the NS record for github.com",
    "output": "nslookup -query=NS github.com"
  },
  {
    "input": "Query the SOA record for google.com",
    "output": "nslookup -query=SOA google.com"
  },
  {
    "input": "Query the SOA record for example.com",
    "output": "nslookup -query=SOA example.com"
  },
  {
    "input": "Query the SOA record for yahoo.com",
    "output": "nslookup -query=SOA yahoo.com"
  },
  {
    "input": "Query the SOA record for github.com",
    "output": "nslookup -query=SOA github.com"
  },
  {
    "input": "Query the TXT record for google.com",
    "output": "nslookup -query=TXT google.com"
  },
  {
    "input": "Query the TXT record for example.com",
    "output": "nslookup -query=TXT example.com"
  },
  {
    "input": "Query the TXT record for yahoo.com",
    "output": "nslookup -query=TXT yahoo.com"
  },
  {
    "input": "Query the TXT record for github.com",
    "output": "nslookup -query=TXT github.com"
  },
  {
    "input": "Query the CNAME record for www.google.com",
    "output": "nslookup -query=CNAME www.google.com"
  },
  {
    "input": "Query the CNAME record for www.example.com",
    "output": "nslookup -query=CNAME www.example.com"
  },
  {
    "input": "Query the CNAME record for www.yahoo.com",
    "output": "nslookup -query=CNAME www.yahoo.com"
  },
  {
    "input": "Query the CNAME record for www.github.com",
    "output": "nslookup -query=CNAME www.github.com"
  },
  {
    "input": "Query the PTR record for 8.8.8.8",
    "output": "nslookup -query=PTR 8.8.8.8"
  },
  {
    "input": "Query the PTR record for 1.1.1.1",
    "output": "nslookup -query=PTR 1.1.1.1"
  },
  {
    "input": "Query the PTR record for 208.67.222.222",
    "output": "nslookup -query=PTR 208.67.222.222"
  },
  {
    "input": "Query the PTR record for 4.2.2.2",
    "output": "nslookup -query=PTR 4.2.2.2"
  },
  {
    "input": "Query the SRV record for _sip._tcp.google.com",
    "output": "nslookup -query=SRV _sip._tcp.google.com"
  },
  {
    "input": "Query the SRV record for _xmpp-server._tcp.gmail.com",
    "output": "nslookup -query=SRV _xmpp-server._tcp.gmail.com"
  },
  {
    "input": "Query the SRV record for _sip._tcp.example.com",
    "output": "nslookup -query=SRV _sip._tcp.example.com"
  },
  {
    "input": "Query the SRV record for _xmpp-server._tcp.yahoo.com",
    "output": "nslookup -query=SRV _xmpp-server._tcp.yahoo.com"
  },
  {
    "input": "Query the ANY record for google.com",
    "output": "nslookup -query=ANY google.com"
  },
  {
    "input": "Query the ANY record for example.com",
    "output": "nslookup -query=ANY example.com"
  },
  {
    "input": "Query the ANY record for yahoo.com",
    "output": "nslookup -query=ANY yahoo.com"
  },
  {
    "input": "Query the ANY record for github.com",
    "output": "nslookup -query=ANY github.com"
  },
  {
    "input": "Query the SPF record for google.com",
    "output": "nslookup -type=SPF google.com"
  },
  {
    "input": "Query the SPF record for example.com",
    "output": "nslookup -type=SPF example.com"
  },
  {
    "input": "Query the SPF record for yahoo.com",
    "output": "nslookup -type=SPF yahoo.com"
  },
  {
    "input": "Query the SPF record for github.com",
    "output": "nslookup -type=SPF github.com"
  },
  {
    "input": "Query the DNSKEY record for google.com",
    "output": "nslookup -type=DNSKEY google.com"
  },
  {
    "input": "Query the DNSKEY record for example.com",
    "output": "nslookup -type=DNSKEY example.com"
  },
  {
    "input": "Query the DNSKEY record for yahoo.com",
    "output": "nslookup -type=DNSKEY yahoo.com"
  },
  {
    "input": "Query the DNSKEY record for github.com",
    "output": "nslookup -type=DNSKEY github.com"
  },
  {
    "input": "Query the DS record for google.com",
    "output": "nslookup -type=DS google.com"
  },
  {
    "input": "Query the DS record for example.com",
    "output": "nslookup -type=DS example.com"
  },
  {
    "input": "Query the DS record for yahoo.com",
    "output": "nslookup -type=DS yahoo.com"
  },
  {
    "input": "Query the DS record for github.com",
    "output": "nslookup -type=DS github.com"
  },
  {
    "input": "Query the NAPTR record for google.com",
    "output": "nslookup -type=NAPTR google.com"
  },
  {
    "input": "Query the NAPTR record for example.com",
    "output": "nslookup -type=NAPTR example.com"
  },
  {
    "input": "Query the NAPTR record for yahoo.com",
    "output": "nslookup -type=NAPTR yahoo.com"
  },
  {
    "input": "Query the NAPTR record for github.com",
    "output": "nslookup -type=NAPTR github.com"
  },
  {
    "input": "Query the CAA record for google.com",
    "output": "nslookup -type=CAA google.com"
  },
  {
    "input": "Query the CAA record for example.com",
    "output": "nslookup -type=CAA example.com"
  },
  {
    "input": "Query the CAA record for yahoo.com",
    "output": "nslookup -type=CAA yahoo.com"
  },
  {
    "input": "Query the CAA record for github.com",
    "output": "nslookup -type=CAA github.com"
  },
  {
    "input": "Query the TLSA record for google.com",
    "output": "nslookup -type=TLSA google.com"
  },
  {
    "input": "Query the TLSA record for example.com",
    "output": "nslookup -type=TLSA example.com"
  },
  {
    "input": "Query the TLSA record for yahoo.com",
    "output": "nslookup -type=TLSA yahoo.com"
  },
  {
    "input": "Query the TLSA record for github.com",
    "output": "nslookup -type=TLSA github.com"
  },
  {
    "input": "Query the A record for google.com with a timeout of 2 seconds",
    "output": "nslookup -timeout=2 google.com"
  },
  {
    "input": "Query the A record for example.com with a timeout of 5 seconds",
    "output": "nslookup -timeout=5 example.com"
  },
  {
    "input": "Query the A record for yahoo.com with a timeout of 10 seconds",
    "output": "nslookup -timeout=10 yahoo.com"
  },
  {
    "input": "Query the A record for github.com with a timeout of 15 seconds",
    "output": "nslookup -timeout=15 github.com"
  },
  {
    "input": "Query the A record for google.com with 3 retries",
    "output": "nslookup -retry=3 google.com"
  },
  {
    "input": "Query the A record for example.com with 5 retries",
    "output": "nslookup -retry=5 example.com"
  },
  {
    "input": "Query the A record for yahoo.com with 10 retries",
    "output": "nslookup -retry=10 yahoo.com"
  },
  {
    "input": "Query the A record for github.com with 1 retry",
    "output": "nslookup -retry=1 github.com"
  },
  {
    "input": "Query the A record for google.com with port 5353",
    "output": "nslookup -port=5353 google.com"
  },
  {
    "input": "Query the A record for example.com with port 5300",
    "output": "nslookup -port=5300 example.com"
  },
  {
    "input": "Query the A record for yahoo.com with port 53",
    "output": "nslookup -port=53 yahoo.com"
  },
  {
    "input": "Query the A record for github.com with port 1053",
    "output": "nslookup -port=1053 github.com"
  },
  {
    "input": "Query the A record for google.com with search domain example.net",
    "output": "nslookup google.com example.net"
  },
  {
    "input": "Query the A record for example.com with search domain example.org",
    "output": "nslookup example.com example.org"
  },
  {
    "input": "Query the A record for yahoo.com with search domain yahoo.net",
    "output": "nslookup yahoo.com yahoo.net"
  },
  {
    "input": "Query the A record for github.com with search domain github.net",
    "output": "nslookup github.com github.net"
  },
  {
    "input": "Query the A record for google.com and display debug information",
    "output": "nslookup -debug google.com"
  },
  {
    "input": "Query the A record for example.com and display debug information",
    "output": "nslookup -debug example.com"
  },
  {
    "input": "Query the A record for yahoo.com and display debug information",
    "output": "nslookup -debug yahoo.com"
  },
  {
    "input": "Query the A record for github.com and display debug information",
    "output": "nslookup -debug github.com"
  },
  {
    "input": "Query the A record for google.com and display statistics",
    "output": "nslookup -stats google.com"
  },
  {
    "input": "Query the A record for example.com and display statistics",
    "output": "nslookup -stats example.com"
  },
  {
    "input": "Query the A record for yahoo.com and display statistics",
    "output": "nslookup -stats yahoo.com"
  },
  {
    "input": "Query the A record for github.com and display statistics",
    "output": "nslookup -stats github.com"
  },
  {
    "input": "Query the A record for google.com and use TCP instead of UDP",
    "output": "nslookup -vc google.com"
  },
  {
    "input": "Query the A record for example.com and use TCP instead of UDP",
    "output": "nslookup -vc example.com"
  },
  {
    "input": "Query the A record for yahoo.com and use TCP instead of UDP",
    "output": "nslookup -vc yahoo.com"
  },
  {
    "input": "Query the A record for github.com and use TCP instead of UDP",
    "output": "nslookup -vc github.com"
  },
  {
    "input": "Query the A record for google.com and use IPv6",
    "output": "nslookup -query=AAAA google.com"
  },
  {
    "input": "Query the A record for example.com and use IPv6",
    "output": "nslookup -query=AAAA example.com"
  },
  {
    "input": "Query the A record for yahoo.com and use IPv6",
    "output": "nslookup -query=AAAA yahoo.com"
  },
  {
    "input": "Query the A record for github.com and use IPv6",
    "output": "nslookup -query=AAAA github.com"
  },
  {
    "input": "Query the A record for google.com and set search domain to .",
    "output": "nslookup google.com ."
  },
  {
    "input": "Query the A record for example.com and set search domain to .",
    "output": "nslookup example.com ."
  },
  {
    "input": "Query the A record for yahoo.com and set search domain to .",
    "output": "nslookup yahoo.com ."
  },
  {
    "input": "Query the A record for github.com and set search domain to .",
    "output": "nslookup github.com ."
  },
  {
    "input": "Query the A record for google.com and set search domain to local",
    "output": "nslookup google.com local"
  },
  {
    "input": "Query the A record for example.com and set search domain to local",
    "output": "nslookup example.com local"
  },
  {
    "input": "Query the A record for yahoo.com and set search domain to local",
    "output": "nslookup yahoo.com local"
  },
  {
    "input": "Query the A record for github.com and set search domain to local",
    "output": "nslookup github.com local"
  },
  {
    "input": "Interactive mode: start nslookup and set default server to 8.8.8.8",
    "output": "nslookup\nserver 8.8.8.8"
  },
  {
    "input": "Interactive mode: set query type to MX and look up google.com",
    "output": "nslookup\nset type=MX\ngoogle.com"
  },
  {
    "input": "Interactive mode: set query type to NS and look up example.com",
    "output": "nslookup\nset type=NS\nexample.com"
  },
  {
    "input": "Interactive mode: set query type to TXT and look up yahoo.com",
    "output": "nslookup\nset type=TXT\nyahoo.com"
  },
  {
    "input": "Interactive mode: set query type to AAAA and look up github.com",
    "output": "nslookup\nset type=AAAA\ngithub.com"
  },
  {
    "input": "Interactive mode: set debug mode and look up google.com",
    "output": "nslookup\nset debug\ngoogle.com"
  },
  {
    "input": "Interactive mode: set query type to ANY and look up example.com",
    "output": "nslookup\nset type=ANY\nexample.com"
  },
  {
    "input": "Interactive mode: set query type to SOA and look up yahoo.com",
    "output": "nslookup\nset type=SOA\nyahoo.com"
  },
  {
    "input": "Interactive mode: set query type to CNAME and look up www.github.com",
    "output": "nslookup\nset type=CNAME\nwww.github.com"
  },
  {
    "input": "Ping google.com with default settings",
    "output": "ping google.com"
  },
  {
    "input": "Ping 8.8.8.8 with default settings",
    "output": "ping 8.8.8.8"
  },
  {
    "input": "Ping example.com 5 times",
    "output": "ping -c 5 example.com"
  },
  {
    "input": "Ping yahoo.com 10 times",
    "output": "ping -c 10 yahoo.com"
  },
  {
    "input": "Ping facebook.com with interval of 2 seconds",
    "output": "ping -i 2 facebook.com"
  },
  {
    "input": "Ping github.com with interval of 0.2 seconds",
    "output": "ping -i 0.2 github.com"
  },
  {
    "input": "Ping amazon.com and stop after 3 seconds",
    "output": "ping -w 3 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 and stop after 10 seconds",
    "output": "ping -w 10 1.1.1.1"
  },
  {
    "input": "Ping google.com with a timeout of 1 second per packet",
    "output": "ping -W 1 google.com"
  },
  {
    "input": "Ping 8.8.4.4 with a timeout of 5 seconds per packet",
    "output": "ping -W 5 8.8.4.4"
  },
  {
    "input": "Ping example.com and set packet size to 100 bytes",
    "output": "ping -s 100 example.com"
  },
  {
    "input": "Ping yahoo.com and set packet size to 1400 bytes",
    "output": "ping -s 1400 yahoo.com"
  },
  {
    "input": "Ping google.com and flood ping (root required)",
    "output": "ping -f google.com"
  },
  {
    "input": "Ping 8.8.8.8 and flood ping (root required)",
    "output": "ping -f 8.8.8.8"
  },
  {
    "input": "Ping facebook.com and set TTL to 10",
    "output": "ping -t 10 facebook.com"
  },
  {
    "input": "Ping github.com and set TTL to 64",
    "output": "ping -t 64 github.com"
  },
  {
    "input": "Ping amazon.com and print numeric output only",
    "output": "ping -n amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 and print numeric output only",
    "output": "ping -n 1.1.1.1"
  },
  {
    "input": "Ping google.com and suppress output",
    "output": "ping -q google.com"
  },
  {
    "input": "Ping 8.8.8.8 and suppress output",
    "output": "ping -q 8.8.8.8"
  },
  {
    "input": "Ping example.com and show timestamp for each reply",
    "output": "ping -D example.com"
  },
  {
    "input": "Ping yahoo.com and show timestamp for each reply",
    "output": "ping -D yahoo.com"
  },
  {
    "input": "Ping facebook.com and set source IP address",
    "output": "ping -I eth0 facebook.com"
  },
  {
    "input": "Ping github.com and set source IP address",
    "output": "ping -I wlan0 github.com"
  },
  {
    "input": "Ping amazon.com and use IPv6",
    "output": "ping6 amazon.com"
  },
  {
    "input": "Ping google.com using IPv6",
    "output": "ping6 google.com"
  },
  {
    "input": "Ping 2001:4860:4860::8888 using IPv6",
    "output": "ping6 2001:4860:4860::8888"
  },
  {
    "input": "Ping example.com 20 times with 0.5 second interval",
    "output": "ping -c 20 -i 0.5 example.com"
  },
  {
    "input": "Ping yahoo.com 50 times with 1 second interval",
    "output": "ping -c 50 -i 1 yahoo.com"
  },
  {
    "input": "Ping 8.8.4.4 with a custom pattern",
    "output": "ping -p ff 8.8.4.4"
  },
  {
    "input": "Ping google.com with a pattern of abcd",
    "output": "ping -p abcd google.com"
  },
  {
    "input": "Ping with record route option (root required)",
    "output": "ping -R google.com"
  },
  {
    "input": "Ping 8.8.8.8 with record route option (root required)",
    "output": "ping -R 8.8.8.8"
  },
  {
    "input": "Ping facebook.com and set preload to 5",
    "output": "ping -l 5 facebook.com"
  },
  {
    "input": "Ping github.com and set preload to 10",
    "output": "ping -l 10 github.com"
  },
  {
    "input": "Ping amazon.com and set deadline to 15 seconds",
    "output": "ping -w 15 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 and set deadline to 30 seconds",
    "output": "ping -w 30 1.1.1.1"
  },
  {
    "input": "Ping google.com and set interval to 3 seconds",
    "output": "ping -i 3 google.com"
  },
  {
    "input": "Ping yahoo.com and set interval to 10 seconds",
    "output": "ping -i 10 yahoo.com"
  },
  {
    "input": "Ping facebook.com with a timeout of 2 seconds per packet",
    "output": "ping -W 2 facebook.com"
  },
  {
    "input": "Ping github.com with a timeout of 10 seconds per packet",
    "output": "ping -W 10 github.com"
  },
  {
    "input": "Ping amazon.com and set packet size to 56 bytes",
    "output": "ping -s 56 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 and set packet size to 512 bytes",
    "output": "ping -s 512 1.1.1.1"
  },
  {
    "input": "Ping google.com and set packet size to 1500 bytes",
    "output": "ping -s 1500 google.com"
  },
  {
    "input": "Ping yahoo.com and set packet size to 2000 bytes",
    "output": "ping -s 2000 yahoo.com"
  },
  {
    "input": "Ping facebook.com and set TTL to 128",
    "output": "ping -t 128 facebook.com"
  },
  {
    "input": "Ping github.com and set TTL to 255",
    "output": "ping -t 255 github.com"
  },
  {
    "input": "Ping amazon.com and print only summary statistics",
    "output": "ping -q -c 10 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 and print only summary statistics",
    "output": "ping -q -c 5 1.1.1.1"
  },
  {
    "input": "Ping google.com and set a custom source IP",
    "output": "ping -I 192.168.1.10 google.com"
  },
  {
    "input": "Ping yahoo.com and set a custom source IP",
    "output": "ping -I 10.0.0.2 yahoo.com"
  },
  {
    "input": "Ping facebook.com and use interface eth1",
    "output": "ping -I eth1 facebook.com"
  },
  {
    "input": "Ping github.com and use interface wlan1",
    "output": "ping -I wlan1 github.com"
  },
  {
    "input": "Ping amazon.com and use IPv4 only",
    "output": "ping -4 amazon.com"
  },
  {
    "input": "Ping google.com and use IPv6 only",
    "output": "ping -6 google.com"
  },
  {
    "input": "Ping 8.8.8.8 with verbose output",
    "output": "ping -v 8.8.8.8"
  },
  {
    "input": "Ping example.com with verbose output",
    "output": "ping -v example.com"
  },
  {
    "input": "Ping yahoo.com and flood ping with interval 0.1s (root required)",
    "output": "ping -f -i 0.1 yahoo.com"
  },
  {
    "input": "Ping facebook.com and set deadline to 5 seconds",
    "output": "ping -w 5 facebook.com"
  },
  {
    "input": "Ping github.com and set deadline to 20 seconds",
    "output": "ping -w 20 github.com"
  },
  {
    "input": "Ping amazon.com and set deadline to 60 seconds",
    "output": "ping -w 60 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 1 second interval and 10 packets",
    "output": "ping -i 1 -c 10 1.1.1.1"
  },
  {
    "input": "Ping google.com with 0.2 second interval and 20 packets",
    "output": "ping -i 0.2 -c 20 google.com"
  },
  {
    "input": "Ping yahoo.com with 2 second interval and 5 packets",
    "output": "ping -i 2 -c 5 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 0.5 second interval and 15 packets",
    "output": "ping -i 0.5 -c 15 facebook.com"
  },
  {
    "input": "Ping github.com with 5 second interval and 3 packets",
    "output": "ping -i 5 -c 3 github.com"
  },
  {
    "input": "Ping amazon.com with 10 second interval and 2 packets",
    "output": "ping -i 10 -c 2 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 100 byte packets and 5 times",
    "output": "ping -s 100 -c 5 1.1.1.1"
  },
  {
    "input": "Ping google.com with 512 byte packets and 10 times",
    "output": "ping -s 512 -c 10 google.com"
  },
  {
    "input": "Ping yahoo.com with 1400 byte packets and 20 times",
    "output": "ping -s 1400 -c 20 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 2000 byte packets and 3 times",
    "output": "ping -s 2000 -c 3 facebook.com"
  },
  {
    "input": "Ping github.com with 1500 byte packets and 7 times",
    "output": "ping -s 1500 -c 7 github.com"
  },
  {
    "input": "Ping amazon.com with 56 byte packets and 12 times",
    "output": "ping -s 56 -c 12 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 1000 byte packets and 8 times",
    "output": "ping -s 1000 -c 8 1.1.1.1"
  },
  {
    "input": "Ping google.com with 1024 byte packets and 6 times",
    "output": "ping -s 1024 -c 6 google.com"
  },
  {
    "input": "Ping yahoo.com with 2048 byte packets and 4 times",
    "output": "ping -s 2048 -c 4 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 4096 byte packets and 2 times",
    "output": "ping -s 4096 -c 2 facebook.com"
  },
  {
    "input": "Ping github.com with 8192 byte packets and 1 time",
    "output": "ping -s 8192 -c 1 github.com"
  },
  {
    "input": "Ping amazon.com with 128 byte packets and 9 times",
    "output": "ping -s 128 -c 9 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 256 byte packets and 11 times",
    "output": "ping -s 256 -c 11 1.1.1.1"
  },
  {
    "input": "Ping google.com with 512 byte packets and 13 times",
    "output": "ping -s 512 -c 13 google.com"
  },
  {
    "input": "Ping yahoo.com with 1024 byte packets and 15 times",
    "output": "ping -s 1024 -c 15 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 2048 byte packets and 17 times",
    "output": "ping -s 2048 -c 17 facebook.com"
  },
  {
    "input": "Ping github.com with 4096 byte packets and 19 times",
    "output": "ping -s 4096 -c 19 github.com"
  },
  {
    "input": "Ping amazon.com with 8192 byte packets and 21 times",
    "output": "ping -s 8192 -c 21 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 32 byte packets and 23 times",
    "output": "ping -s 32 -c 23 1.1.1.1"
  },
  {
    "input": "Ping google.com with 64 byte packets and 25 times",
    "output": "ping -s 64 -c 25 google.com"
  },
  {
    "input": "Ping yahoo.com with 128 byte packets and 27 times",
    "output": "ping -s 128 -c 27 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 256 byte packets and 29 times",
    "output": "ping -s 256 -c 29 facebook.com"
  },
  {
    "input": "Ping github.com with 512 byte packets and 31 times",
    "output": "ping -s 512 -c 31 github.com"
  },
  {
    "input": "Ping amazon.com with 1024 byte packets and 33 times",
    "output": "ping -s 1024 -c 33 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 2048 byte packets and 35 times",
    "output": "ping -s 2048 -c 35 1.1.1.1"
  },
  {
    "input": "Ping google.com with 4096 byte packets and 37 times",
    "output": "ping -s 4096 -c 37 google.com"
  },
  {
    "input": "Ping yahoo.com with 8192 byte packets and 39 times",
    "output": "ping -s 8192 -c 39 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 16384 byte packets and 41 times",
    "output": "ping -s 16384 -c 41 facebook.com"
  },
  {
    "input": "Ping github.com with 32768 byte packets and 43 times",
    "output": "ping -s 32768 -c 43 github.com"
  },
  {
    "input": "Ping amazon.com with 65507 byte packets and 45 times",
    "output": "ping -s 65507 -c 45 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 1 second timeout and 5 times",
    "output": "ping -W 1 -c 5 1.1.1.1"
  },
  {
    "input": "Ping google.com with 5 second timeout and 3 times",
    "output": "ping -W 5 -c 3 google.com"
  },
  {
    "input": "Ping yahoo.com with 10 second timeout and 10 times",
    "output": "ping -W 10 -c 10 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 2 second timeout and 7 times",
    "output": "ping -W 2 -c 7 facebook.com"
  },
  {
    "input": "Ping github.com with 3 second timeout and 9 times",
    "output": "ping -W 3 -c 9 github.com"
  },
  {
    "input": "Ping amazon.com with 4 second timeout and 11 times",
    "output": "ping -W 4 -c 11 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 6 second timeout and 13 times",
    "output": "ping -W 6 -c 13 1.1.1.1"
  },
  {
    "input": "Ping google.com with 7 second timeout and 15 times",
    "output": "ping -W 7 -c 15 google.com"
  },
  {
    "input": "Ping yahoo.com with 8 second timeout and 17 times",
    "output": "ping -W 8 -c 17 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 9 second timeout and 19 times",
    "output": "ping -W 9 -c 19 facebook.com"
  },
  {
    "input": "Ping github.com with 10 second timeout and 21 times",
    "output": "ping -W 10 -c 21 github.com"
  },
  {
    "input": "Ping amazon.com with 1 second timeout and 23 times",
    "output": "ping -W 1 -c 23 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 2 second timeout and 25 times",
    "output": "ping -W 2 -c 25 1.1.1.1"
  },
  {
    "input": "Ping google.com with 3 second timeout and 27 times",
    "output": "ping -W 3 -c 27 google.com"
  },
  {
    "input": "Ping yahoo.com with 4 second timeout and 29 times",
    "output": "ping -W 4 -c 29 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 5 second timeout and 31 times",
    "output": "ping -W 5 -c 31 facebook.com"
  },
  {
    "input": "Ping github.com with 6 second timeout and 33 times",
    "output": "ping -W 6 -c 33 github.com"
  },
  {
    "input": "Ping amazon.com with 7 second timeout and 35 times",
    "output": "ping -W 7 -c 35 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 8 second timeout and 37 times",
    "output": "ping -W 8 -c 37 1.1.1.1"
  },
  {
    "input": "Ping google.com with 9 second timeout and 39 times",
    "output": "ping -W 9 -c 39 google.com"
  },
  {
    "input": "Ping yahoo.com with 10 second timeout and 41 times",
    "output": "ping -W 10 -c 41 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 1 second timeout and 43 times",
    "output": "ping -W 1 -c 43 facebook.com"
  },
  {
    "input": "Ping github.com with 2 second timeout and 45 times",
    "output": "ping -W 2 -c 45 github.com"
  },
  {
    "input": "Ping amazon.com with 3 second timeout and 47 times",
    "output": "ping -W 3 -c 47 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 4 second timeout and 49 times",
    "output": "ping -W 4 -c 49 1.1.1.1"
  },
  {
    "input": "Ping google.com with 5 second timeout and 51 times",
    "output": "ping -W 5 -c 51 google.com"
  },
  {
    "input": "Ping yahoo.com with 6 second timeout and 53 times",
    "output": "ping -W 6 -c 53 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 7 second timeout and 55 times",
    "output": "ping -W 7 -c 55 facebook.com"
  },
  {
    "input": "Ping github.com with 8 second timeout and 57 times",
    "output": "ping -W 8 -c 57 github.com"
  },
  {
    "input": "Ping amazon.com with 9 second timeout and 59 times",
    "output": "ping -W 9 -c 59 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 10 second timeout and 61 times",
    "output": "ping -W 10 -c 61 1.1.1.1"
  },
  {
    "input": "Ping google.com with 1 second timeout and 63 times",
    "output": "ping -W 1 -c 63 google.com"
  },
  {
    "input": "Ping yahoo.com with 2 second timeout and 65 times",
    "output": "ping -W 2 -c 65 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 3 second timeout and 67 times",
    "output": "ping -W 3 -c 67 facebook.com"
  },
  {
    "input": "Ping github.com with 4 second timeout and 69 times",
    "output": "ping -W 4 -c 69 github.com"
  },
  {
    "input": "Ping amazon.com with 5 second timeout and 71 times",
    "output": "ping -W 5 -c 71 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 6 second timeout and 73 times",
    "output": "ping -W 6 -c 73 1.1.1.1"
  },
  {
    "input": "Ping google.com with 7 second timeout and 75 times",
    "output": "ping -W 7 -c 75 google.com"
  },
  {
    "input": "Ping yahoo.com with 8 second timeout and 77 times",
    "output": "ping -W 8 -c 77 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 9 second timeout and 79 times",
    "output": "ping -W 9 -c 79 facebook.com"
  },
  {
    "input": "Ping github.com with 10 second timeout and 81 times",
    "output": "ping -W 10 -c 81 github.com"
  },
  {
    "input": "Ping amazon.com with 1 second timeout and 83 times",
    "output": "ping -W 1 -c 83 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 2 second timeout and 85 times",
    "output": "ping -W 2 -c 85 1.1.1.1"
  },
  {
    "input": "Ping google.com with 3 second timeout and 87 times",
    "output": "ping -W 3 -c 87 google.com"
  },
  {
    "input": "Ping yahoo.com with 4 second timeout and 89 times",
    "output": "ping -W 4 -c 89 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 5 second timeout and 91 times",
    "output": "ping -W 5 -c 91 facebook.com"
  },
  {
    "input": "Ping github.com with 6 second timeout and 93 times",
    "output": "ping -W 6 -c 93 github.com"
  },
  {
    "input": "Ping amazon.com with 7 second timeout and 95 times",
    "output": "ping -W 7 -c 95 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 8 second timeout and 97 times",
    "output": "ping -W 8 -c 97 1.1.1.1"
  },
  {
    "input": "Ping google.com with 9 second timeout and 99 times",
    "output": "ping -W 9 -c 99 google.com"
  },
  {
    "input": "Ping yahoo.com with 10 second timeout and 101 times",
    "output": "ping -W 10 -c 101 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 1 second timeout and 103 times",
    "output": "ping -W 1 -c 103 facebook.com"
  },
  {
    "input": "Ping github.com with 2 second timeout and 105 times",
    "output": "ping -W 2 -c 105 github.com"
  },
  {
    "input": "Ping amazon.com with 3 second timeout and 107 times",
    "output": "ping -W 3 -c 107 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 4 second timeout and 109 times",
    "output": "ping -W 4 -c 109 1.1.1.1"
  },
  {
    "input": "Ping google.com with 5 second timeout and 111 times",
    "output": "ping -W 5 -c 111 google.com"
  },
  {
    "input": "Ping yahoo.com with 6 second timeout and 113 times",
    "output": "ping -W 6 -c 113 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 7 second timeout and 115 times",
    "output": "ping -W 7 -c 115 facebook.com"
  },
  {
    "input": "Ping github.com with 8 second timeout and 117 times",
    "output": "ping -W 8 -c 117 github.com"
  },
  {
    "input": "Ping amazon.com with 9 second timeout and 119 times",
    "output": "ping -W 9 -c 119 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 10 second timeout and 121 times",
    "output": "ping -W 10 -c 121 1.1.1.1"
  },
  {
    "input": "Ping google.com with 1 second timeout and 123 times",
    "output": "ping -W 1 -c 123 google.com"
  },
  {
    "input": "Ping yahoo.com with 2 second timeout and 125 times",
    "output": "ping -W 2 -c 125 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 3 second timeout and 127 times",
    "output": "ping -W 3 -c 127 facebook.com"
  },
  {
    "input": "Ping github.com with 4 second timeout and 129 times",
    "output": "ping -W 4 -c 129 github.com"
  },
  {
    "input": "Ping amazon.com with 5 second timeout and 131 times",
    "output": "ping -W 5 -c 131 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 6 second timeout and 133 times",
    "output": "ping -W 6 -c 133 1.1.1.1"
  },
  {
    "input": "Ping google.com with 7 second timeout and 135 times",
    "output": "ping -W 7 -c 135 google.com"
  },
  {
    "input": "Ping yahoo.com with 8 second timeout and 137 times",
    "output": "ping -W 8 -c 137 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 9 second timeout and 139 times",
    "output": "ping -W 9 -c 139 facebook.com"
  },
  {
    "input": "Ping github.com with 10 second timeout and 141 times",
    "output": "ping -W 10 -c 141 github.com"
  },
  {
    "input": "Ping amazon.com with 1 second timeout and 143 times",
    "output": "ping -W 1 -c 143 amazon.com"
  },
  {
    "input": "Ping 1.1.1.1 with 2 second timeout and 145 times",
    "output": "ping -W 2 -c 145 1.1.1.1"
  },
  {
    "input": "Ping google.com with 3 second timeout and 147 times",
    "output": "ping -W 3 -c 147 google.com"
  },
  {
    "input": "Ping yahoo.com with 4 second timeout and 149 times",
    "output": "ping -W 4 -c 149 yahoo.com"
  },
  {
    "input": "Ping facebook.com with 5 second timeout and 150 times",
    "output": "ping -W 5 -c 150 facebook.com"
  },
  {
    "input": "Sync files locally with verbose output",
    "output": "rsync -v source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with archive mode (preserves permissions, ownership, timestamps)",
    "output": "rsync -a source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with archive mode and verbose output",
    "output": "rsync -av source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with progress indicator",
    "output": "rsync -avP source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with human-readable sizes",
    "output": "rsync -avh source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with compression during transfer",
    "output": "rsync -avz source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with compression and progress",
    "output": "rsync -avzP source_dir/ destination_dir/"
  },
  {
    "input": "Sync files to a remote server",
    "output": "rsync -avz source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files from a remote server",
    "output": "rsync -avz user@remote_host:/source_dir/ destination_dir/"
  },
  {
    "input": "Sync files using a specific SSH port",
    "output": "rsync -avz -e 'ssh -p 2222' source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and delete extraneous files at destination",
    "output": "rsync -avz --delete source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and show what would be transferred without actually transferring",
    "output": "rsync -avzn source_dir/ destination_dir/"
  },
  {
    "input": "Sync files excluding specific patterns",
    "output": "rsync -avz --exclude='*.log' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files excluding multiple patterns",
    "output": "rsync -avz --exclude='*.log' --exclude='*.tmp' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files using an exclude file",
    "output": "rsync -avz --exclude-from=exclude.txt source_dir/ destination_dir/"
  },
  {
    "input": "Sync files including only specific patterns",
    "output": "rsync -avz --include='*.txt' --exclude='*' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with a size limit (max 1MB)",
    "output": "rsync -avz --max-size=1m source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with a minimum size (min 1KB)",
    "output": "rsync -avz --min-size=1k source_dir/ destination_dir/"
  },
  {
    "input": "Sync files modified after a specific date",
    "output": "rsync -avz --files-from=<(find source_dir/ -type f -newermt '2023-01-01') source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and create parent directories",
    "output": "rsync -avz --mkpath source_dir/ destination_dir/new_subdir/"
  },
  {
    "input": "Sync files and keep partially transferred files",
    "output": "rsync -avz --partial source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and keep partially transferred files for resuming later",
    "output": "rsync -avz --partial --progress source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with a bandwidth limit (1MB/s)",
    "output": "rsync -avz --bwlimit=1000 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and create backups of changed files",
    "output": "rsync -avz --backup source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and create backups with custom suffix",
    "output": "rsync -avz --backup --suffix=.bak source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and store backups in a separate directory",
    "output": "rsync -avz --backup --backup-dir=/path/to/backups source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and only update if destination is older",
    "output": "rsync -avzu source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and skip files that are newer on the receiver",
    "output": "rsync -avz --update source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and ignore existing files",
    "output": "rsync -avz --ignore-existing source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and remove source files after transfer",
    "output": "rsync -avz --remove-source-files source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and preserve hard links",
    "output": "rsync -avzH source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and preserve ACLs",
    "output": "rsync -avzA source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and preserve extended attributes",
    "output": "rsync -avzX source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and preserve all attributes (ACLs, xattrs, hard links)",
    "output": "rsync -avzHAX source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and show detailed information about the transfer",
    "output": "rsync -avzi source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and show checksum information",
    "output": "rsync -avzc source_dir/ destination_dir/"
  },
  {
    "input": "Sync files using checksum for file comparison instead of size+mtime",
    "output": "rsync -avzc --checksum source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and show overall progress",
    "output": "rsync -avz --info=progress2 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and show individual file progress",
    "output": "rsync -avz --info=progress2 --info=name0 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files with a specific timeout",
    "output": "rsync -avz --timeout=60 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't cross filesystem boundaries",
    "output": "rsync -avzx source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and copy symlinks as symlinks",
    "output": "rsync -avzl source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and transform symlinks to their referent files/dirs",
    "output": "rsync -avzL source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and copy symlinks as regular files",
    "output": "rsync -avzL --copy-links source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and copy unsafe symlinks as regular files",
    "output": "rsync -avz --copy-unsafe-links source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and ignore symlinks",
    "output": "rsync -avz --links --safe-links source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve group",
    "output": "rsync -avz --no-g source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve owner",
    "output": "rsync -avz --no-o source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve permissions",
    "output": "rsync -avz --no-p source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve timestamps",
    "output": "rsync -avz --no-t source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve device files",
    "output": "rsync -avz --no-D source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and don't preserve special files",
    "output": "rsync -avz --no-specials source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and modify file permissions",
    "output": "rsync -avz --chmod=u+rwx,g+rx,o+rx source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and set specific permissions",
    "output": "rsync -avz --chmod=644 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and filter using patterns from a file",
    "output": "rsync -avz --filter='merge filter_rules.txt' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and filter using multiple rules",
    "output": "rsync -avz --filter='- *.log' --filter='+ *.txt' --filter='- *' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and protect remote args from shell interpretation",
    "output": "rsync -avz -s source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and specify a custom SSH key",
    "output": "rsync -avz -e 'ssh -i /path/to/private_key' source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and specify a custom SSH config",
    "output": "rsync -avz -e 'ssh -F /path/to/ssh_config' source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and specify a custom rsync path on the remote machine",
    "output": "rsync -avz --rsync-path='sudo rsync' source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and specify a custom remote shell",
    "output": "rsync -avz -e 'ssh -o StrictHostKeyChecking=no' source_dir/ user@remote_host:/destination_dir/"
  },
  {
    "input": "Sync files and specify a custom compression level",
    "output": "rsync -avz --compress-level=9 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom block size",
    "output": "rsync -avz --block-size=1024 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom IO buffer size",
    "output": "rsync -avz --io-timeout=60 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom socket options",
    "output": "rsync -avz --sockopts=TCP_NODELAY source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom temp directory",
    "output": "rsync -avz --temp-dir=/tmp/rsync source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom log file",
    "output": "rsync -avz --log-file=/var/log/rsync.log source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom log file format",
    "output": "rsync -avz --log-file-format='%i %n%L' source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom outgoing port",
    "output": "rsync -avz --port=8730 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom address to bind to",
    "output": "rsync -avz --address=192.168.1.100 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom numeric IDs",
    "output": "rsync -avz --numeric-ids source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon access",
    "output": "rsync -avz rsync://user@host:port/module/path destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon config",
    "output": "rsync -avz --config=/etc/rsyncd.conf source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon port",
    "output": "rsync -avz --port=8730 rsync://user@host/module/path destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon password file",
    "output": "rsync -avz --password-file=/path/to/password.txt rsync://user@host/module/path destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon module",
    "output": "rsync -avz rsync://user@host/module/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon user",
    "output": "rsync -avz --daemon --uid=nobody source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon group",
    "output": "rsync -avz --daemon --gid=nogroup source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon chroot",
    "output": "rsync -avz --daemon --chroot source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon log file",
    "output": "rsync -avz --daemon --log-file=/var/log/rsyncd.log source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon pid file",
    "output": "rsync -avz --daemon --pid-file=/var/run/rsyncd.pid source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon socket",
    "output": "rsync -avz --daemon --socket=/var/run/rsyncd.sock source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon no detach",
    "output": "rsync -avz --daemon --no-detach source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon address",
    "output": "rsync -avz --daemon --address=192.168.1.100 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon port",
    "output": "rsync -avz --daemon --port=8730 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon config",
    "output": "rsync -avz --daemon --config=/etc/rsyncd.conf source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon max connections",
    "output": "rsync -avz --daemon --max-connections=10 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon timeout",
    "output": "rsync -avz --daemon --timeout=60 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon motd file",
    "output": "rsync -avz --daemon --motd-file=/etc/rsyncd.motd source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon secrets file",
    "output": "rsync -avz --daemon --secrets-file=/etc/rsyncd.secrets source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon auth users",
    "output": "rsync -avz --daemon --auth-users=user1,user2 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon hosts allow",
    "output": "rsync -avz --daemon --hosts-allow=192.168.1.0/24 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon hosts deny",
    "output": "rsync -avz --daemon --hosts-deny=10.0.0.0/8 source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon read only",
    "output": "rsync -avz --daemon --read-only source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon write only",
    "output": "rsync -avz --daemon --write-only source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon list",
    "output": "rsync -avz --daemon --list source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon refuse options",
    "output": "rsync -avz --daemon --refuse-options=delete source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon dont compress",
    "output": "rsync -avz --daemon --dont-compress=*.gz,*.zip source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon pre-xfer exec",
    "output": "rsync -avz --daemon --pre-xfer-exec=/path/to/script source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon post-xfer exec",
    "output": "rsync -avz --daemon --post-xfer-exec=/path/to/script source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon incoming chmod",
    "output": "rsync -avz --daemon --incoming-chmod=Du=rwx,go=rx,Fu=rw,go=r source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon outgoing chmod",
    "output": "rsync -avz --daemon --outgoing-chmod=Du=rwx,go=rx,Fu=rw,go=r source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon fake super",
    "output": "rsync -avz --daemon --fake-super source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon munge symlinks",
    "output": "rsync -avz --daemon --munge-symlinks source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon use chroot",
    "output": "rsync -avz --daemon --use-chroot source_dir/ destination_dir/"
  },
  {
    "input": "Sync files and specify a custom daemon strict modes",
    "output": "rsync -avz --daemon --strict-modes source_dir/ destination_dir/"
  },
  {
    "input": "List all open non-listening sockets with established connections",
    "output": "ss"
  },
  {
    "input": "List all listening and non-listening sockets",
    "output": "ss -a"
  },
  {
    "input": "List only listening sockets",
    "output": "ss -l"
  },
  {
    "input": "List all TCP sockets",
    "output": "ss -t"
  },
  {
    "input": "List all UDP sockets",
    "output": "ss -u"
  },
  {
    "input": "List all UNIX domain sockets",
    "output": "ss -x"
  },
  {
    "input": "List all raw sockets",
    "output": "ss -w"
  },
  {
    "input": "List all sockets with numeric addresses",
    "output": "ss -n"
  },
  {
    "input": "List all sockets with process IDs",
    "output": "ss -p"
  },
  {
    "input": "List all sockets with timer information",
    "output": "ss -o"
  },
  {
    "input": "List all sockets with extended information",
    "output": "ss -e"
  },
  {
    "input": "List all sockets with resolved hostnames",
    "output": "ss -r"
  },
  {
    "input": "List all sockets for IPv4",
    "output": "ss -4"
  },
  {
    "input": "List all sockets for IPv6",
    "output": "ss -6"
  },
  {
    "input": "List all listening TCP sockets",
    "output": "ss -lt"
  },
  {
    "input": "List all listening UDP sockets",
    "output": "ss -lu"
  },
  {
    "input": "List all listening UNIX sockets",
    "output": "ss -lx"
  },
  {
    "input": "List all TCP sockets, listening and non-listening",
    "output": "ss -at"
  },
  {
    "input": "List all UDP sockets, listening and non-listening",
    "output": "ss -au"
  },
  {
    "input": "List all UNIX sockets, listening and non-listening",
    "output": "ss -ax"
  },
  {
    "input": "List all TCP sockets in the ESTABLISHED state",
    "output": "ss -t state established"
  },
  {
    "input": "List all TCP sockets in the LISTEN state",
    "output": "ss -t state listen"
  },
  {
    "input": "List all TCP sockets in the SYN-RECV state",
    "output": "ss -t state syn-recv"
  },
  {
    "input": "List all TCP sockets in the CLOSE-WAIT state",
    "output": "ss -t state close-wait"
  },
  {
    "input": "List all TCP sockets in the TIME-WAIT state",
    "output": "ss -t state time-wait"
  },
  {
    "input": "List all TCP sockets in the FIN-WAIT-1 state",
    "output": "ss -t state fin-wait-1"
  },
  {
    "input": "List all TCP sockets in the FIN-WAIT-2 state",
    "output": "ss -t state fin-wait-2"
  },
  {
    "input": "List all TCP sockets in the SYN-SENT state",
    "output": "ss -t state syn-sent"
  },
  {
    "input": "List all TCP sockets in the CLOSING state",
    "output": "ss -t state closing"
  },
  {
    "input": "List all TCP sockets in the LAST-ACK state",
    "output": "ss -t state last-ack"
  },
  {
    "input": "List all TCP sockets in the CLOSED state",
    "output": "ss -t state closed"
  },
  {
    "input": "List all UDP sockets in the UNCONN state",
    "output": "ss -u state unconn"
  },
  {
    "input": "List all sockets with summary statistics",
    "output": "ss -s"
  },
  {
    "input": "List all sockets with SELinux security contexts",
    "output": "ss -Z"
  },
  {
    "input": "List all TCP sockets with SELinux security contexts",
    "output": "ss -t -a -Z"
  },
  {
    "input": "List all UDP sockets with SELinux security contexts",
    "output": "ss -u -a -Z"
  },
  {
    "input": "List all sockets with events (closed/destroyed)",
    "output": "ss --events"
  },
  {
    "input": "List all TCP sockets with process and timer info",
    "output": "ss -t -p -o"
  },
  {
    "input": "List all UDP sockets with process and timer info",
    "output": "ss -u -p -o"
  },
  {
    "input": "List all UNIX sockets with process info",
    "output": "ss -x -p"
  },
  {
    "input": "List all sockets with process, timer, and extended info",
    "output": "ss -p -o -e"
  },
  {
    "input": "List all sockets with wide output",
    "output": "ss -W"
  },
  {
    "input": "List all sockets for a specific destination IP",
    "output": "ss dst 8.8.8.8"
  },
  {
    "input": "List all sockets for a specific source IP",
    "output": "ss src 192.168.1.10"
  },
  {
    "input": "List all sockets for a specific destination port (e.g., 80)",
    "output": "ss dst :80"
  },
  {
    "input": "List all sockets for a specific source port (e.g., 22)",
    "output": "ss src :22"
  },
  {
    "input": "List all sockets for destination port 443 or 80",
    "output": "ss -nt '( sport = :443 or sport = :80 )'"
  },
  {
    "input": "List all sockets for destination IP range 192.168.0.0/16",
    "output": "ss dst 192.168.0.0/16"
  },
  {
    "input": "List all sockets for source IP range 10.0.0.0/8",
    "output": "ss src 10.0.0.0/8"
  },
  {
    "input": "List all TCP sockets for ssh (port 22)",
    "output": "ss -at '( dport = :22 or sport = :22 )'"
  },
  {
    "input": "List all established ssh connections",
    "output": "ss -o state established '( dport = :ssh or sport = :ssh )'"
  },
  {
    "input": "List all sockets for a specific user (e.g., UID 1000)",
    "output": "ss -p | grep uid=1000"
  },
  {
    "input": "List all sockets for a specific process (e.g., PID 1234)",
    "output": "ss -p | grep 'pid=1234,'"
  },
  {
    "input": "List all sockets for a specific program (e.g., ssh)",
    "output": "ss -p | grep ssh"
  },
  {
    "input": "List all local processes connected to X server",
    "output": "ss -x src /tmp/.X11-unix/*"
  },
  {
    "input": "List all TCP sockets in FIN-WAIT-1 state for Apache to network 193.233.7/24",
    "output": "ss -o state fin-wait-1 '( sport = :http or sport = :https )' dst 193.233.7/24"
  },
  {
    "input": "List all sockets except TCP",
    "output": "ss -a -A 'all,!tcp'"
  },
  {
    "input": "List all TCP sockets using IPv4",
    "output": "ss -4 -t"
  },
  {
    "input": "List all TCP sockets using IPv6",
    "output": "ss -6 -t"
  },
  {
    "input": "List all UDP sockets using IPv4",
    "output": "ss -4 -u"
  },
  {
    "input": "List all UDP sockets using IPv6",
    "output": "ss -6 -u"
  },
  {
    "input": "List all listening TCP and UDP sockets",
    "output": "ss -tuln"
  },
  {
    "input": "List all sockets and filter for ESTABLISHED state",
    "output": "ss state established"
  },
  {
    "input": "List all sockets and filter for LISTEN state",
    "output": "ss state listen"
  },
  {
    "input": "List all sockets and filter for CLOSE-WAIT state",
    "output": "ss state close-wait"
  },
  {
    "input": "List all sockets and filter for TIME-WAIT state",
    "output": "ss state time-wait"
  },
  {
    "input": "List all sockets and filter for SYN-RECV state",
    "output": "ss state syn-recv"
  },
  {
    "input": "List all sockets and filter for SYN-SENT state",
    "output": "ss state syn-sent"
  },
  {
    "input": "List all sockets and filter for FIN-WAIT-1 state",
    "output": "ss state fin-wait-1"
  },
  {
    "input": "List all sockets and filter for FIN-WAIT-2 state",
    "output": "ss state fin-wait-2"
  },
  {
    "input": "List all sockets and filter for CLOSING state",
    "output": "ss state closing"
  },
  {
    "input": "List all sockets and filter for LAST-ACK state",
    "output": "ss state last-ack"
  },
  {
    "input": "List all sockets and filter for CLOSED state",
    "output": "ss state closed"
  },
  {
    "input": "List all sockets and filter for UNCONN state",
    "output": "ss state unconn"
  },
  {
    "input": "List all TCP sockets for port 443",
    "output": "ss -nt sport = :443"
  },
  {
    "input": "List all TCP sockets for port 80",
    "output": "ss -nt sport = :80"
  },
  {
    "input": "List all TCP sockets for source port 443 or 80",
    "output": "ss -nt '( src :443 or src :80 )'"
  },
  {
    "input": "List all sockets for destination IP 104.21.3.132",
    "output": "ss dst 104.21.3.132"
  },
  {
    "input": "List all sockets for source IP 192.168.100.2",
    "output": "ss src 192.168.100.2"
  },
  {
    "input": "List all sockets for destination port 5228",
    "output": "ss dst :5228"
  },
  {
    "input": "List all sockets for source port mysql",
    "output": "ss src :mysql"
  },
  {
    "input": "List all sockets for destination port 5228 or source port mysql",
    "output": "ss -a dst :5228 or src :mysql"
  },
  {
    "input": "List all sockets and close a connection to 192.168.1.123:80",
    "output": "sudo ss --kill dst 192.168.1.123 dport = 80"
  },
  {
    "input": "Show help for ss command",
    "output": "ss -h"
  },
  {
    "input": "Show the man page for ss command",
    "output": "man ss"
  },
  {
    "input": "Connect to a remote server using SSH",
    "output": "ssh user@hostname"
  },
  {
    "input": "Connect to SSH using a specific port",
    "output": "ssh -p 2222 user@hostname"
  },
  {
    "input": "Connect using a specific private key",
    "output": "ssh -i ~/.ssh/private_key user@hostname"
  },
  {
    "input": "Connect with verbose output for debugging",
    "output": "ssh -v user@hostname"
  },
  {
    "input": "Connect with extra verbose output",
    "output": "ssh -vv user@hostname"
  },
  {
    "input": "Connect with maximum verbose output",
    "output": "ssh -vvv user@hostname"
  },
  {
    "input": "Connect and execute a single command",
    "output": "ssh user@hostname 'ls -la'"
  },
  {
    "input": "Connect and execute multiple commands",
    "output": "ssh user@hostname 'cd /tmp && ls && pwd'"
  },
  {
    "input": "Connect without executing a command (force pseudo-terminal)",
    "output": "ssh -t user@hostname"
  },
  {
    "input": "Connect without pseudo-terminal allocation",
    "output": "ssh -T user@hostname"
  },
  {
    "input": "Connect with X11 forwarding enabled",
    "output": "ssh -X user@hostname"
  },
  {
    "input": "Connect with trusted X11 forwarding",
    "output": "ssh -Y user@hostname"
  },
  {
    "input": "Connect with compression enabled",
    "output": "ssh -C user@hostname"
  },
  {
    "input": "Connect and disable strict host key checking",
    "output": "ssh -o StrictHostKeyChecking=no user@hostname"
  },
  {
    "input": "Connect with password authentication disabled",
    "output": "ssh -o PasswordAuthentication=no user@hostname"
  },
  {
    "input": "Connect with specific SSH protocol version",
    "output": "ssh -o Protocol=2 user@hostname"
  },
  {
    "input": "Connect using IPv4 only",
    "output": "ssh -4 user@hostname"
  },
  {
    "input": "Connect using IPv6 only",
    "output": "ssh -6 user@hostname"
  },
  {
    "input": "Connect with local port forwarding",
    "output": "ssh -L 8080:localhost:80 user@hostname"
  },
  {
    "input": "Connect with remote port forwarding",
    "output": "ssh -R 8080:localhost:80 user@hostname"
  },
  {
    "input": "Connect with dynamic SOCKS proxy",
    "output": "ssh -D 1080 user@hostname"
  },
  {
    "input": "Connect and run in background",
    "output": "ssh -f user@hostname 'command'"
  },
  {
    "input": "Connect without executing remote command",
    "output": "ssh -N user@hostname"
  },
  {
    "input": "Connect with connection timeout",
    "output": "ssh -o ConnectTimeout=10 user@hostname"
  },
  {
    "input": "Connect with specific cipher",
    "output": "ssh -c aes256-ctr user@hostname"
  },
  {
    "input": "Connect with specific MAC algorithm",
    "output": "ssh -m hmac-sha2-256 user@hostname"
  },
  {
    "input": "Connect using agent forwarding",
    "output": "ssh -A user@hostname"
  },
  {
    "input": "Connect without agent forwarding",
    "output": "ssh -a user@hostname"
  },
  {
    "input": "Connect through a jump host",
    "output": "ssh -J jumphost user@targethost"
  },
  {
    "input": "Connect through multiple jump hosts",
    "output": "ssh -J jumphost1,jumphost2 user@targethost"
  },
  {
    "input": "Generate SSH key pair (RSA)",
    "output": "ssh-keygen -t rsa -b 4096"
  },
  {
    "input": "Generate SSH key pair (ED25519)",
    "output": "ssh-keygen -t ed25519"
  },
  {
    "input": "Generate SSH key pair with specific filename",
    "output": "ssh-keygen -t rsa -f ~/.ssh/mykey"
  },
  {
    "input": "Generate SSH key pair with comment",
    "output": "ssh-keygen -t rsa -C 'user@email.com'"
  },
  {
    "input": "Generate SSH key pair without passphrase",
    "output": "ssh-keygen -t rsa -N ''"
  },
  {
    "input": "Copy public key to remote server",
    "output": "ssh-copy-id user@hostname"
  },
  {
    "input": "Copy specific key to remote server",
    "output": "ssh-copy-id -i ~/.ssh/mykey.pub user@hostname"
  },
  {
    "input": "Copy key using specific port",
    "output": "ssh-copy-id -p 2222 user@hostname"
  },
  {
    "input": "Start SSH agent",
    "output": "ssh-agent bash"
  },
  {
    "input": "Add key to SSH agent",
    "output": "ssh-add ~/.ssh/private_key"
  },
  {
    "input": "List keys in SSH agent",
    "output": "ssh-add -l"
  },
  {
    "input": "Remove all keys from SSH agent",
    "output": "ssh-add -D"
  },
  {
    "input": "Remove specific key from SSH agent",
    "output": "ssh-add -d ~/.ssh/private_key"
  },
  {
    "input": "Connect with quiet mode",
    "output": "ssh -q user@hostname"
  },
  {
    "input": "Connect with batch mode (no prompts)",
    "output": "ssh -B user@hostname"
  },
  {
    "input": "Connect with escape character disabled",
    "output": "ssh -e none user@hostname"
  },
  {
    "input": "Connect with custom escape character",
    "output": "ssh -e '^B' user@hostname"
  },
  {
    "input": "Connect using configuration file",
    "output": "ssh -F /path/to/config user@hostname"
  },
  {
    "input": "Connect with login name override",
    "output": "ssh -l username hostname"
  },
  {
    "input": "Connect with specific bind address",
    "output": "ssh -b 192.168.1.10 user@hostname"
  },
  {
    "input": "Connect with gateway ports enabled",
    "output": "ssh -g user@hostname"
  },
  {
    "input": "Connect and allocate tty",
    "output": "ssh -t user@hostname 'top'"
  },
  {
    "input": "Transfer file using SCP",
    "output": "scp file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP with specific port",
    "output": "scp -P 2222 file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP with compression",
    "output": "scp -C file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP recursively",
    "output": "scp -r /local/dir user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP with verbose output",
    "output": "scp -v file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP with progress meter",
    "output": "scp -p file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer file using SCP preserving attributes",
    "output": "scp -p file.txt user@hostname:/remote/path/"
  },
  {
    "input": "Transfer from remote to local using SCP",
    "output": "scp user@hostname:/remote/file.txt /local/path/"
  },
  {
    "input": "Transfer between two remote hosts using SCP",
    "output": "scp user1@host1:/path/file.txt user2@host2:/path/"
  },
  {
    "input": "Start SFTP session",
    "output": "sftp user@hostname"
  },
  {
    "input": "Start SFTP with specific port",
    "output": "sftp -P 2222 user@hostname"
  },
  {
    "input": "Start SFTP with batch file",
    "output": "sftp -b commands.txt user@hostname"
  },
  {
    "input": "Start SFTP with compression",
    "output": "sftp -C user@hostname"
  },
  {
    "input": "Connect with keep-alive messages",
    "output": "ssh -o ServerAliveInterval=60 user@hostname"
  },
  {
    "input": "Connect with maximum keep-alive count",
    "output": "ssh -o ServerAliveCountMax=3 user@hostname"
  },
  {
    "input": "Connect with connection sharing",
    "output": "ssh -o ControlMaster=auto -o ControlPath=~/.ssh/master-%r@%h:%p user@hostname"
  },
  {
    "input": "Connect using existing master connection",
    "output": "ssh -o ControlMaster=no user@hostname"
  },
  {
    "input": "Connect with connection persistence",
    "output": "ssh -o ControlPersist=600 user@hostname"
  },
  {
    "input": "Check SSH connection to host",
    "output": "ssh -O check user@hostname"
  },
  {
    "input": "Stop master connection",
    "output": "ssh -O stop user@hostname"
  },
  {
    "input": "Exit master connection",
    "output": "ssh -O exit user@hostname"
  },
  {
    "input": "Connect with specific host key algorithms",
    "output": "ssh -o HostKeyAlgorithms=ssh-rsa user@hostname"
  },
  {
    "input": "Connect with specific key exchange algorithms",
    "output": "ssh -o KexAlgorithms=diffie-hellman-group14-sha256 user@hostname"
  },
  {
    "input": "Connect with preferred authentications",
    "output": "ssh -o PreferredAuthentications=publickey user@hostname"
  },
  {
    "input": "Connect with public key authentication only",
    "output": "ssh -o PubkeyAuthentication=yes -o PasswordAuthentication=no user@hostname"
  },
  {
    "input": "Connect with keyboard-interactive authentication",
    "output": "ssh -o KbdInteractiveAuthentication=yes user@hostname"
  },
  {
    "input": "Connect with challenge-response authentication",
    "output": "ssh -o ChallengeResponseAuthentication=yes user@hostname"
  },
  {
    "input": "Connect with GSSAPI authentication",
    "output": "ssh -o GSSAPIAuthentication=yes user@hostname"
  },
  {
    "input": "Connect with host-based authentication",
    "output": "ssh -o HostbasedAuthentication=yes user@hostname"
  },
  {
    "input": "Connect and verify host key fingerprint",
    "output": "ssh -o FingerprintHash=sha256 user@hostname"
  },
  {
    "input": "Connect with specific log level",
    "output": "ssh -o LogLevel=DEBUG user@hostname"
  },
  {
    "input": "Connect with user known hosts file",
    "output": "ssh -o UserKnownHostsFile=~/.ssh/known_hosts2 user@hostname"
  },
  {
    "input": "Connect with global known hosts file",
    "output": "ssh -o GlobalKnownHostsFile=/etc/ssh/ssh_known_hosts user@hostname"
  },
  {
    "input": "Connect and ignore user known hosts",
    "output": "ssh -o UserKnownHostsFile=/dev/null user@hostname"
  },
  {
    "input": "Connect with identity files only",
    "output": "ssh -o IdentitiesOnly=yes user@hostname"
  },
  {
    "input": "Connect with multiple identity files",
    "output": "ssh -i ~/.ssh/key1 -i ~/.ssh/key2 user@hostname"
  },
  {
    "input": "Connect with no host authentication",
    "output": "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null user@hostname"
  },
  {
    "input": "Connect through HTTP proxy",
    "output": "ssh -o ProxyCommand='nc -X connect -x proxy:8080 %h %p' user@hostname"
  },
  {
    "input": "Connect through SOCKS proxy",
    "output": "ssh -o ProxyCommand='nc -X 5 -x proxy:1080 %h %p' user@hostname"
  },
  {
    "input": "Connect with tunnel device",
    "output": "ssh -w 0:0 user@hostname"
  },
  {
    "input": "Connect with VPN tunnel",
    "output": "ssh -o Tunnel=yes user@hostname"
  },
  {
    "input": "Connect with request TTY",
    "output": "ssh -o RequestTTY=yes user@hostname"
  },
  {
    "input": "Connect without request TTY",
    "output": "ssh -o RequestTTY=no user@hostname"
  },
  {
    "input": "Connect with exit on forward failure",
    "output": "ssh -o ExitOnForwardFailure=yes user@hostname"
  },
  {
    "input": "Connect with local forward for multiple ports",
    "output": "ssh -L 8080:localhost:80 -L 8443:localhost:443 user@hostname"
  },
  {
    "input": "Connect with remote forward for multiple ports",
    "output": "ssh -R 8080:localhost:80 -R 8443:localhost:443 user@hostname"
  },
  {
    "input": "Connect with dynamic forward on specific interface",
    "output": "ssh -D 127.0.0.1:1080 user@hostname"
  },
  {
    "input": "Establish reverse SSH tunnel",
    "output": "ssh -R 2222:localhost:22 user@remotehost"
  },
  {
    "input": "Create persistent reverse tunnel",
    "output": "ssh -fNR 2222:localhost:22 user@remotehost"
  },
  {
    "input": "Mount remote filesystem using SSHFS",
    "output": "sshfs user@hostname:/remote/path /local/mountpoint"
  },
  {
    "input": "Mount SSHFS with specific port",
    "output": "sshfs -p 2222 user@hostname:/remote/path /local/mountpoint"
  },
  {
    "input": "Mount SSHFS with compression",
    "output": "sshfs -o compression=yes user@hostname:/remote/path /local/mountpoint"
  },
  {
    "input": "Unmount SSHFS",
    "output": "fusermount -u /local/mountpoint"
  },
  {
    "input": "Connect with custom SSH directory",
    "output": "ssh -o ControlPath=~/.ssh/custom/master-%r@%h:%p user@hostname"
  },
  {
    "input": "Connect with hash known hosts",
    "output": "ssh -o HashKnownHosts=yes user@hostname"
  },
  {
    "input": "Connect with visual host key",
    "output": "ssh -o VisualHostKey=yes user@hostname"
  },
  {
    "input": "Connect with update host keys",
    "output": "ssh -o UpdateHostKeys=yes user@hostname"
  },
  {
    "input": "Generate host key fingerprint",
    "output": "ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub"
  },
  {
    "input": "Scan host keys",
    "output": "ssh-keyscan hostname"
  },
  {
    "input": "Scan host keys on specific port",
    "output": "ssh-keyscan -p 2222 hostname"
  },
  {
    "input": "Remove host key from known_hosts",
    "output": "ssh-keygen -R hostname"
  },
  {
    "input": "Test SSH configuration",
    "output": "ssh -T git@github.com"
  },
  {
    "input": "Traceroute to google.com",
    "output": "traceroute google.com"
  },
  {
    "input": "Traceroute to example.com",
    "output": "traceroute example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8",
    "output": "traceroute 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com",
    "output": "traceroute yahoo.com"
  },
  {
    "input": "Traceroute to github.com",
    "output": "traceroute github.com"
  },
  {
    "input": "Traceroute to google.com with debugging enabled",
    "output": "traceroute -d google.com"
  },
  {
    "input": "Traceroute to example.com with debugging enabled",
    "output": "traceroute -d example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with debugging enabled",
    "output": "traceroute -d 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with debugging enabled",
    "output": "traceroute -d yahoo.com"
  },
  {
    "input": "Traceroute to github.com with debugging enabled",
    "output": "traceroute -d github.com"
  },
  {
    "input": "Traceroute to google.com forbidding fragmentation",
    "output": "traceroute -F google.com"
  },
  {
    "input": "Traceroute to example.com forbidding fragmentation",
    "output": "traceroute -F example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 forbidding fragmentation",
    "output": "traceroute -F 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com forbidding fragmentation",
    "output": "traceroute -F yahoo.com"
  },
  {
    "input": "Traceroute to github.com forbidding fragmentation",
    "output": "traceroute -F github.com"
  },
  {
    "input": "Traceroute to google.com starting with TTL 5",
    "output": "traceroute -f 5 google.com"
  },
  {
    "input": "Traceroute to example.com starting with TTL 5",
    "output": "traceroute -f 5 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 starting with TTL 5",
    "output": "traceroute -f 5 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com starting with TTL 5",
    "output": "traceroute -f 5 yahoo.com"
  },
  {
    "input": "Traceroute to github.com starting with TTL 5",
    "output": "traceroute -f 5 github.com"
  },
  {
    "input": "Traceroute to google.com using a loose source route gateway",
    "output": "traceroute -g 192.168.1.1 google.com"
  },
  {
    "input": "Traceroute to example.com using a loose source route gateway",
    "output": "traceroute -g 192.168.1.1 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using a loose source route gateway",
    "output": "traceroute -g 192.168.1.1 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using a loose source route gateway",
    "output": "traceroute -g 192.168.1.1 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using a loose source route gateway",
    "output": "traceroute -g 192.168.1.1 github.com"
  },
  {
    "input": "Traceroute to google.com using interface eth0",
    "output": "traceroute -i eth0 google.com"
  },
  {
    "input": "Traceroute to example.com using interface eth0",
    "output": "traceroute -i eth0 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using interface eth0",
    "output": "traceroute -i eth0 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using interface eth0",
    "output": "traceroute -i eth0 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using interface eth0",
    "output": "traceroute -i eth0 github.com"
  },
  {
    "input": "Traceroute to google.com with max TTL 10",
    "output": "traceroute -m 10 google.com"
  },
  {
    "input": "Traceroute to example.com with max TTL 10",
    "output": "traceroute -m 10 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with max TTL 10",
    "output": "traceroute -m 10 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with max TTL 10",
    "output": "traceroute -m 10 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with max TTL 10",
    "output": "traceroute -m 10 github.com"
  },
  {
    "input": "Traceroute to google.com sending 5 probes per hop",
    "output": "traceroute -q 5 google.com"
  },
  {
    "input": "Traceroute to example.com sending 5 probes per hop",
    "output": "traceroute -q 5 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 sending 5 probes per hop",
    "output": "traceroute -q 5 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com sending 5 probes per hop",
    "output": "traceroute -q 5 yahoo.com"
  },
  {
    "input": "Traceroute to github.com sending 5 probes per hop",
    "output": "traceroute -q 5 github.com"
  },
  {
    "input": "Traceroute to google.com without resolving IP addresses to hostnames",
    "output": "traceroute -n google.com"
  },
  {
    "input": "Traceroute to example.com without resolving IP addresses to hostnames",
    "output": "traceroute -n example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 without resolving IP addresses to hostnames",
    "output": "traceroute -n 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com without resolving IP addresses to hostnames",
    "output": "traceroute -n yahoo.com"
  },
  {
    "input": "Traceroute to github.com without resolving IP addresses to hostnames",
    "output": "traceroute -n github.com"
  },
  {
    "input": "Traceroute to google.com specifying destination port 33434",
    "output": "traceroute -p 33434 google.com"
  },
  {
    "input": "Traceroute to example.com specifying destination port 33434",
    "output": "traceroute -p 33434 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 specifying destination port 33434",
    "output": "traceroute -p 33434 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com specifying destination port 33434",
    "output": "traceroute -p 33434 yahoo.com"
  },
  {
    "input": "Traceroute to github.com specifying destination port 33434",
    "output": "traceroute -p 33434 github.com"
  },
  {
    "input": "Traceroute to google.com setting type of service 16",
    "output": "traceroute -t 16 google.com"
  },
  {
    "input": "Traceroute to example.com setting type of service 16",
    "output": "traceroute -t 16 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 setting type of service 16",
    "output": "traceroute -t 16 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com setting type of service 16",
    "output": "traceroute -t 16 yahoo.com"
  },
  {
    "input": "Traceroute to github.com setting type of service 16",
    "output": "traceroute -t 16 github.com"
  },
  {
    "input": "Traceroute to google.com with wait time 2 seconds",
    "output": "traceroute -w 2 google.com"
  },
  {
    "input": "Traceroute to example.com with wait time 2 seconds",
    "output": "traceroute -w 2 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with wait time 2 seconds",
    "output": "traceroute -w 2 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with wait time 2 seconds",
    "output": "traceroute -w 2 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with wait time 2 seconds",
    "output": "traceroute -w 2 github.com"
  },
  {
    "input": "Traceroute to google.com bypassing routing tables",
    "output": "traceroute -r google.com"
  },
  {
    "input": "Traceroute to example.com bypassing routing tables",
    "output": "traceroute -r example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 bypassing routing tables",
    "output": "traceroute -r 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com bypassing routing tables",
    "output": "traceroute -r yahoo.com"
  },
  {
    "input": "Traceroute to github.com bypassing routing tables",
    "output": "traceroute -r github.com"
  },
  {
    "input": "Traceroute to google.com with IPv6 source address",
    "output": "traceroute -S 2001:db8::1 google.com"
  },
  {
    "input": "Traceroute to example.com with IPv6 source address",
    "output": "traceroute -S 2001:db8::1 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with IPv6 source address",
    "output": "traceroute -S 2001:db8::1 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with IPv6 source address",
    "output": "traceroute -S 2001:db8::1 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with IPv6 source address",
    "output": "traceroute -S 2001:db8::1 github.com"
  },
  {
    "input": "Traceroute to google.com showing ICMP extensions",
    "output": "traceroute -e google.com"
  },
  {
    "input": "Traceroute to example.com showing ICMP extensions",
    "output": "traceroute -e example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 showing ICMP extensions",
    "output": "traceroute -e 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com showing ICMP extensions",
    "output": "traceroute -e yahoo.com"
  },
  {
    "input": "Traceroute to github.com showing ICMP extensions",
    "output": "traceroute -e github.com"
  },
  {
    "input": "Traceroute to google.com with AS lookups enabled",
    "output": "traceroute -A google.com"
  },
  {
    "input": "Traceroute to example.com with AS lookups enabled",
    "output": "traceroute -A example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with AS lookups enabled",
    "output": "traceroute -A 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with AS lookups enabled",
    "output": "traceroute -A yahoo.com"
  },
  {
    "input": "Traceroute to github.com with AS lookups enabled",
    "output": "traceroute -A github.com"
  },
  {
    "input": "Traceroute to google.com showing version info",
    "output": "traceroute -V google.com"
  },
  {
    "input": "Traceroute to example.com showing version info",
    "output": "traceroute -V example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 showing version info",
    "output": "traceroute -V 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com showing version info",
    "output": "traceroute -V yahoo.com"
  },
  {
    "input": "Traceroute to github.com showing version info",
    "output": "traceroute -V github.com"
  },
  {
    "input": "Traceroute to google.com using UDP port 53",
    "output": "traceroute -U google.com"
  },
  {
    "input": "Traceroute to example.com using UDP port 53",
    "output": "traceroute -U example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using UDP port 53",
    "output": "traceroute -U 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using UDP port 53",
    "output": "traceroute -U yahoo.com"
  },
  {
    "input": "Traceroute to github.com using UDP port 53",
    "output": "traceroute -U github.com"
  },
  {
    "input": "Traceroute to google.com using UDPLITE protocol",
    "output": "traceroute -UL google.com"
  },
  {
    "input": "Traceroute to example.com using UDPLITE protocol",
    "output": "traceroute -UL example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using UDPLITE protocol",
    "output": "traceroute -UL 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using UDPLITE protocol",
    "output": "traceroute -UL yahoo.com"
  },
  {
    "input": "Traceroute to github.com using UDPLITE protocol",
    "output": "traceroute -UL github.com"
  },
  {
    "input": "Traceroute to google.com sending packets with ICMP protocol",
    "output": "traceroute -P icmp google.com"
  },
  {
    "input": "Traceroute to example.com sending packets with ICMP protocol",
    "output": "traceroute -P icmp example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 sending packets with ICMP protocol",
    "output": "traceroute -P icmp 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com sending packets with ICMP protocol",
    "output": "traceroute -P icmp yahoo.com"
  },
  {
    "input": "Traceroute to github.com sending packets with ICMP protocol",
    "output": "traceroute -P icmp github.com"
  },
  {
    "input": "Traceroute to google.com using ICMP echo requests",
    "output": "traceroute -I google.com"
  },
  {
    "input": "Traceroute to example.com using ICMP echo requests",
    "output": "traceroute -I example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using ICMP echo requests",
    "output": "traceroute -I 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using ICMP echo requests",
    "output": "traceroute -I yahoo.com"
  },
  {
    "input": "Traceroute to github.com using ICMP echo requests",
    "output": "traceroute -I github.com"
  },
  {
    "input": "Traceroute to google.com using TCP SYN packets",
    "output": "traceroute -T google.com"
  },
  {
    "input": "Traceroute to example.com using TCP SYN packets",
    "output": "traceroute -T example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using TCP SYN packets",
    "output": "traceroute -T 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using TCP SYN packets",
    "output": "traceroute -T yahoo.com"
  },
  {
    "input": "Traceroute to github.com using TCP SYN packets",
    "output": "traceroute -T github.com"
  },
  {
    "input": "Traceroute to google.com using only IPv4 addresses",
    "output": "traceroute -4 google.com"
  },
  {
    "input": "Traceroute to example.com using only IPv4 addresses",
    "output": "traceroute -4 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using only IPv4 addresses",
    "output": "traceroute -4 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using only IPv4 addresses",
    "output": "traceroute -4 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using only IPv4 addresses",
    "output": "traceroute -4 github.com"
  },
  {
    "input": "Traceroute to google.com using only IPv6 addresses",
    "output": "traceroute -6 google.com"
  },
  {
    "input": "Traceroute to example.com using only IPv6 addresses",
    "output": "traceroute -6 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using only IPv6 addresses",
    "output": "traceroute -6 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using only IPv6 addresses",
    "output": "traceroute -6 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using only IPv6 addresses",
    "output": "traceroute -6 github.com"
  },
  {
    "input": "Traceroute to google.com with max TTL 30 and 10 probes per hop",
    "output": "traceroute -m 30 -q 10 google.com"
  },
  {
    "input": "Traceroute to example.com with max TTL 20 and 6 probes per hop",
    "output": "traceroute -m 20 -q 6 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with max TTL 40 and 2 probes per hop",
    "output": "traceroute -m 40 -q 2 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with max TTL 15 and 5 probes per hop",
    "output": "traceroute -m 15 -q 5 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with max TTL 25 and 7 probes per hop",
    "output": "traceroute -m 25 -q 7 github.com"
  },
  {
    "input": "Traceroute to google.com with destination port 80 and 3 probes per hop",
    "output": "traceroute -p 80 -q 3 google.com"
  },
  {
    "input": "Traceroute to example.com with destination port 443 and 4 probes per hop",
    "output": "traceroute -p 443 -q 4 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with destination port 8080 and 2 probes per hop",
    "output": "traceroute -p 8080 -q 2 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with destination port 53 and 5 probes per hop",
    "output": "traceroute -p 53 -q 5 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with destination port 22 and 6 probes per hop",
    "output": "traceroute -p 22 -q 6 github.com"
  },
  {
    "input": "Traceroute to google.com using interface wlan0 and max TTL 20",
    "output": "traceroute -i wlan0 -m 20 google.com"
  },
  {
    "input": "Traceroute to example.com using interface wlan0 and max TTL 15",
    "output": "traceroute -i wlan0 -m 15 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using interface wlan0 and max TTL 10",
    "output": "traceroute -i wlan0 -m 10 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using interface wlan0 and max TTL 25",
    "output": "traceroute -i wlan0 -m 25 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using interface wlan0 and max TTL 30",
    "output": "traceroute -i wlan0 -m 30 github.com"
  },
  {
    "input": "Traceroute to google.com with wait time 5 seconds and 4 probes per hop",
    "output": "traceroute -w 5 -q 4 google.com"
  },
  {
    "input": "Traceroute to example.com with wait time 3 seconds and 2 probes per hop",
    "output": "traceroute -w 3 -q 2 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with wait time 10 seconds and 5 probes per hop",
    "output": "traceroute -w 10 -q 5 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with wait time 7 seconds and 3 probes per hop",
    "output": "traceroute -w 7 -q 3 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with wait time 2 seconds and 6 probes per hop",
    "output": "traceroute -w 2 -q 6 github.com"
  },
  {
    "input": "Traceroute to google.com with no hostname resolution and max TTL 15",
    "output": "traceroute -n -m 15 google.com"
  },
  {
    "input": "Traceroute to example.com with no hostname resolution and max TTL 20",
    "output": "traceroute -n -m 20 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 with no hostname resolution and max TTL 25",
    "output": "traceroute -n -m 25 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com with no hostname resolution and max TTL 30",
    "output": "traceroute -n -m 30 yahoo.com"
  },
  {
    "input": "Traceroute to github.com with no hostname resolution and max TTL 35",
    "output": "traceroute -n -m 35 github.com"
  },
  {
    "input": "Traceroute to google.com using ICMP echo requests and max TTL 20",
    "output": "traceroute -I -m 20 google.com"
  },
  {
    "input": "Traceroute to example.com using ICMP echo requests and max TTL 25",
    "output": "traceroute -I -m 25 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using ICMP echo requests and max TTL 30",
    "output": "traceroute -I -m 30 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using ICMP echo requests and max TTL 35",
    "output": "traceroute -I -m 35 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using ICMP echo requests and max TTL 40",
    "output": "traceroute -I -m 40 github.com"
  },
  {
    "input": "Traceroute to google.com using TCP SYN packets and destination port 80",
    "output": "traceroute -T -p 80 google.com"
  },
  {
    "input": "Traceroute to example.com using TCP SYN packets and destination port 443",
    "output": "traceroute -T -p 443 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using TCP SYN packets and destination port 8080",
    "output": "traceroute -T -p 8080 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using TCP SYN packets and destination port 53",
    "output": "traceroute -T -p 53 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using TCP SYN packets and destination port 22",
    "output": "traceroute -T -p 22 github.com"
  },
  {
    "input": "Traceroute to google.com using only IPv4 and max TTL 20",
    "output": "traceroute -4 -m 20 google.com"
  },
  {
    "input": "Traceroute to example.com using only IPv4 and max TTL 25",
    "output": "traceroute -4 -m 25 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using only IPv4 and max TTL 30",
    "output": "traceroute -4 -m 30 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using only IPv4 and max TTL 35",
    "output": "traceroute -4 -m 35 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using only IPv4 and max TTL 40",
    "output": "traceroute -4 -m 40 github.com"
  },
  {
    "input": "Traceroute to google.com using only IPv6 and max TTL 20",
    "output": "traceroute -6 -m 20 google.com"
  },
  {
    "input": "Traceroute to example.com using only IPv6 and max TTL 25",
    "output": "traceroute -6 -m 25 example.com"
  },
  {
    "input": "Traceroute to 8.8.8.8 using only IPv6 and max TTL 30",
    "output": "traceroute -6 -m 30 8.8.8.8"
  },
  {
    "input": "Traceroute to yahoo.com using only IPv6 and max TTL 35",
    "output": "traceroute -6 -m 35 yahoo.com"
  },
  {
    "input": "Traceroute to github.com using only IPv6 and max TTL 40",
    "output": "traceroute -6 -m 40 github.com"
  },
  {
    "input": "Download a file from a URL",
    "output": "wget http://example.com/file.zip"
  },
  {
    "input": "Download a file and save with a different name",
    "output": "wget -O newname.zip http://example.com/file.zip"
  },
  {
    "input": "Download a file to a specific directory",
    "output": "wget -P /tmp http://example.com/file.zip"
  },
  {
    "input": "Download multiple files listed in a text file",
    "output": "wget -i files.txt"
  },
  {
    "input": "Download a file in the background",
    "output": "wget -b http://example.com/file.zip"
  },
  {
    "input": "Download a file and continue if interrupted",
    "output": "wget -c http://example.com/file.zip"
  },
  {
    "input": "Download a file quietly (no output)",
    "output": "wget -q http://example.com/file.zip"
  },
  {
    "input": "Download a file and show progress bar",
    "output": "wget --show-progress http://example.com/file.zip"
  },
  {
    "input": "Download a file with a specific user agent",
    "output": "wget --user-agent=\"Mozilla/5.0\" http://example.com/file.zip"
  },
  {
    "input": "Download a file with HTTP authentication",
    "output": "wget --user=USERNAME --password=PASSWORD http://example.com/file.zip"
  },
  {
    "input": "Download a file with FTP authentication",
    "output": "wget --ftp-user=USERNAME --ftp-password=PASSWORD ftp://example.com/file.zip"
  },
  {
    "input": "Download a file over HTTPS",
    "output": "wget https://example.com/file.zip"
  },
  {
    "input": "Download all files from a website recursively",
    "output": "wget -r http://example.com/"
  },
  {
    "input": "Download all files from a website recursively and convert links for offline viewing",
    "output": "wget -r -k http://example.com/"
  },
  {
    "input": "Download all files from a website up to 2 levels deep",
    "output": "wget -r -l2 http://example.com/"
  },
  {
    "input": "Download all images from a website",
    "output": "wget -r -A jpg,jpeg,png,gif http://example.com/"
  },
  {
    "input": "Download all PDF files from a website",
    "output": "wget -r -A pdf http://example.com/"
  },
  {
    "input": "Download only files larger than 1MB",
    "output": "wget --quota=1m -r http://example.com/"
  },
  {
    "input": "Download only files matching a pattern",
    "output": "wget -r -A '*.mp3' http://example.com/music/"
  },
  {
    "input": "Download a file with a specific referer",
    "output": "wget --referer=http://google.com http://example.com/file.zip"
  },
  {
    "input": "Download a file with cookies from a file",
    "output": "wget --load-cookies cookies.txt http://example.com/file.zip"
  },
  {
    "input": "Save cookies to a file while downloading",
    "output": "wget --save-cookies cookies.txt http://example.com/file.zip"
  },
  {
    "input": "Download a file with a timeout of 10 seconds",
    "output": "wget --timeout=10 http://example.com/file.zip"
  },
  {
    "input": "Limit download speed to 100kB/s",
    "output": "wget --limit-rate=100k http://example.com/file.zip"
  },
  {
    "input": "Download a file and retry up to 5 times",
    "output": "wget --tries=5 http://example.com/file.zip"
  },
  {
    "input": "Download a file and wait 10 seconds between retries",
    "output": "wget --wait=10 http://example.com/file.zip"
  },
  {
    "input": "Download a file and ignore certificate errors",
    "output": "wget --no-check-certificate https://example.com/file.zip"
  },
  {
    "input": "Download a file using IPv4 only",
    "output": "wget -4 http://example.com/file.zip"
  },
  {
    "input": "Download a file using IPv6 only",
    "output": "wget -6 http://example.com/file.zip"
  },
  {
    "input": "Download a file using passive FTP",
    "output": "wget --ftp-pasv ftp://example.com/file.zip"
  },
  {
    "input": "Download a file using active FTP",
    "output": "wget --no-ftp-pasv ftp://example.com/file.zip"
  },
  {
    "input": "Download a file and append to a log file",
    "output": "wget -o download.log http://example.com/file.zip"
  },
  {
    "input": "Download a file and append to a log file (append mode)",
    "output": "wget -a download.log http://example.com/file.zip"
  },
  {
    "input": "Download a file and print server response",
    "output": "wget -S http://example.com/file.zip"
  },
  {
    "input": "Download a file and print headers only",
    "output": "wget --server-response --spider http://example.com/file.zip"
  },
  {
    "input": "Download a file and skip certificate check",
    "output": "wget --no-check-certificate https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify the DNS server",
    "output": "wget --dns-servers=8.8.8.8 http://example.com/file.zip"
  },
  {
    "input": "Download a file with a custom header",
    "output": "wget --header=\"X-Test: 123\" http://example.com/file.zip"
  },
  {
    "input": "Download a file and skip SSL verification",
    "output": "wget --no-check-certificate https://example.com/file.zip"
  },
  {
    "input": "Download a file and skip existing files",
    "output": "wget -nc http://example.com/file.zip"
  },
  {
    "input": "Download a file and timestamping (only download if newer)",
    "output": "wget -N http://example.com/file.zip"
  },
  {
    "input": "Download a file and force download even if file exists",
    "output": "wget -nd http://example.com/file.zip"
  },
  {
    "input": "Download a file and delete after download",
    "output": "wget --delete-after http://example.com/file.zip"
  },
  {
    "input": "Download a file and set download directory structure",
    "output": "wget -x http://example.com/file.zip"
  },
  {
    "input": "Download a file and flatten directory structure",
    "output": "wget -nH http://example.com/file.zip"
  },
  {
    "input": "Download a file and use no directories",
    "output": "wget -nd http://example.com/file.zip"
  },
  {
    "input": "Download a file and set maximum recursion depth to 3",
    "output": "wget -r -l3 http://example.com/"
  },
  {
    "input": "Download a file and span hosts",
    "output": "wget -H -r http://example.com/"
  },
  {
    "input": "Download a file and reject certain file types",
    "output": "wget -R gif,jpg http://example.com/"
  },
  {
    "input": "Download a file and accept only certain file types",
    "output": "wget -A pdf,docx http://example.com/"
  },
  {
    "input": "Download a file and set number of connections per server",
    "output": "wget --limit-rate=200k --wait=2 http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a proxy",
    "output": "wget -e use_proxy=yes -e http_proxy=proxy.example.com:8080 http://example.com/file.zip"
  },
  {
    "input": "Download a file and bypass proxy",
    "output": "wget -e use_proxy=no http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a proxy username and password",
    "output": "wget --proxy-user=USER --proxy-password=PASS http://example.com/file.zip"
  },
  {
    "input": "Download a file and use a different output document",
    "output": "wget -O myfile.txt http://example.com/file.txt"
  },
  {
    "input": "Download a file and set user agent to Chrome",
    "output": "wget --user-agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/58.0.3029.110\" http://example.com/file.zip"
  },
  {
    "input": "Download a file and set referer to another site",
    "output": "wget --referer=http://referrer.com http://example.com/file.zip"
  },
  {
    "input": "Download a file and set HTTP header",
    "output": "wget --header=\"Accept: text/html\" http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a certificate",
    "output": "wget --certificate=client.pem --private-key=key.pem --ca-certificate=ca.pem https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a certificate directory",
    "output": "wget --ca-directory=/etc/ssl/certs https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a certificate file",
    "output": "wget --ca-certificate=ca.pem https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a client certificate",
    "output": "wget --certificate=client.pem https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a client private key",
    "output": "wget --private-key=key.pem https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a certificate password",
    "output": "wget --certificate-type=PEM --private-key=key.pem --ca-certificate=ca.pem --ask-password https://example.com/file.zip"
  },
  {
    "input": "Download a file and specify an HSTS database",
    "output": "wget --hsts-file=hsts.txt https://example.com/file.zip"
  },
  {
    "input": "Download a file and ignore HSTS",
    "output": "wget --no-hsts https://example.com/file.zip"
  },
  {
    "input": "Download a file and use FTP passive mode",
    "output": "wget --ftp-pasv ftp://example.com/file.zip"
  },
  {
    "input": "Download a file and use FTP active mode",
    "output": "wget --no-ftp-pasv ftp://example.com/file.zip"
  },
  {
    "input": "Download all files from a directory on FTP server",
    "output": "wget -r ftp://example.com/dir/"
  },
  {
    "input": "Download a file with FTP username and password",
    "output": "wget --ftp-user=USER --ftp-password=PASS ftp://example.com/file.zip"
  },
  {
    "input": "Download using HTTP POST",
    "output": "wget --post-data='name=value' http://example.com/form"
  },
  {
    "input": "Download using HTTP POST from a file",
    "output": "wget --post-file=data.txt http://example.com/form"
  },
  {
    "input": "Download a file and specify a timeout for DNS lookup",
    "output": "wget --dns-timeout=10 http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a timeout for connect",
    "output": "wget --connect-timeout=10 http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a timeout for read",
    "output": "wget --read-timeout=10 http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a timeout for all operations",
    "output": "wget --timeout=10 http://example.com/file.zip"
  },
  {
    "input": "Download a file and specify a maximum number of redirects",
    "output": "wget --max-redirect=5 http://example.com/file.zip"
  },
  {
    "input": "Download a file and disable following redirects",
    "output": "wget --max-redirect=0 http://example.com/file.zip"
  },
  {
    "input": "Download a file and enable following FTP links from HTML",
    "output": "wget --follow-ftp http://example.com/"
  },
  {
    "input": "Download a file and disable following FTP links from HTML",
    "output": "wget --no-follow-ftp http://example.com/"
  },
  {
    "input": "Download a file and enable following robots.txt",
    "output": "wget --robots=on http://example.com/"
  },
  {
    "input": "Download a file and disable following robots.txt",
    "output": "wget --robots=off http://example.com/"
  },
  {
    "input": "Download a file and set wait between downloads to 1 second",
    "output": "wget --wait=1 -r http://example.com/"
  },
  {
    "input": "Download a file and set random wait between downloads",
    "output": "wget --random-wait -r http://example.com/"
  },
  {
    "input": "Download a file and mirror a website",
    "output": "wget --mirror http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with timestamping",
    "output": "wget --mirror --timestamping http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with compression",
    "output": "wget --mirror --compression=auto http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no parent directories",
    "output": "wget --mirror --no-parent http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with backup",
    "output": "wget --mirror --backup-converted http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no cache",
    "output": "wget --mirror --no-cache http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no cookies",
    "output": "wget --mirror --no-cookies http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no check certificate",
    "output": "wget --mirror --no-check-certificate http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no robots",
    "output": "wget --mirror --no-robots http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with no verbose",
    "output": "wget --mirror --no-verbose http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with verbose",
    "output": "wget --mirror --verbose http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with debug",
    "output": "wget --mirror --debug http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with quiet",
    "output": "wget --mirror --quiet http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with append output",
    "output": "wget --mirror --append-output=log.txt http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file",
    "output": "wget --mirror --output-file=log.txt http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output document",
    "output": "wget --mirror --output-document=output.html http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output directory",
    "output": "wget --mirror --directory-prefix=/tmp http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file and directory",
    "output": "wget --mirror --output-file=log.txt --directory-prefix=/tmp http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file and document",
    "output": "wget --mirror --output-file=log.txt --output-document=output.html http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file, document, and directory",
    "output": "wget --mirror --output-file=log.txt --output-document=output.html --directory-prefix=/tmp http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file, document, directory, and quiet",
    "output": "wget --mirror --output-file=log.txt --output-document=output.html --directory-prefix=/tmp --quiet http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file, document, directory, quiet, and debug",
    "output": "wget --mirror --output-file=log.txt --output-document=output.html --directory-prefix=/tmp --quiet --debug http://example.com/"
  },
  {
    "input": "Download a file and mirror a website with output file, document, directory, quiet, debug, and verbose",
    "output": "wget --mirror --output-file=log.txt --output-document=output.html --directory-prefix=/tmp --quiet --debug --verbose http://example.com/"
  },
  {
    "input": "Display wget help",
    "output": "wget --help"
  },
  {
    "input": "Display wget version",
    "output": "wget --version"
  },
  {
    "input": "Refresh package index",
    "output": "sudo apt update"
  },
  {
    "input": "Update and show upgradable",
    "output": "sudo apt update && apt list --upgradable"
  },
  {
    "input": "Update without prompts",
    "output": "sudo apt update -y"
  },
  {
    "input": "Fix missing packages",
    "output": "sudo apt update --fix-missing"
  },
  {
    "input": "Allow unauthenticated repos",
    "output": "sudo apt update --allow-unauthenticated"
  },
  {
    "input": "Only download package lists",
    "output": "sudo apt update --download-only"
  },
  {
    "input": "Verbose debug output",
    "output": "sudo apt update -o Debug::pkgProblemResolver=yes"
  },
  {
    "input": "Use noninteractive frontend",
    "output": "DEBIAN_FRONTEND=noninteractive sudo apt update"
  },
  {
    "input": "Allow downgrades",
    "output": "sudo apt update --allow-downgrades"
  },
  {
    "input": "Prevent list cleanup",
    "output": "sudo apt update --no-list-cleanup"
  },
  {
    "input": "Auto-remove unused packages",
    "output": "sudo apt autoremove"
  },
  {
    "input": "Auto-remove without prompts",
    "output": "sudo apt autoremove -y"
  },
  {
    "input": "Purge configs",
    "output": "sudo apt autoremove --purge"
  },
  {
    "input": "Simulate auto-remove",
    "output": "sudo apt autoremove --simulate"
  },
  {
    "input": "Verbose auto-remove",
    "output": "sudo apt autoremove --verbose-versions"
  },
  {
    "input": "Dry run auto-remove",
    "output": "sudo apt autoremove --dry-run"
  },
  {
    "input": "Allow-held changes",
    "output": "sudo apt autoremove --allow-change-held-packages"
  },
  {
    "input": "Show progress",
    "output": "sudo apt autoremove --show-progress"
  },
  {
    "input": "Download only",
    "output": "sudo apt autoremove --download-only"
  },
  {
    "input": "Ignore missing",
    "output": "sudo apt autoremove --fix-missing"
  },
  {
    "input": "Install nginx",
    "output": "sudo apt install nginx"
  },
  {
    "input": "Install without prompts",
    "output": "sudo apt install -y nginx"
  },
  {
    "input": "Reinstall package",
    "output": "sudo apt install --reinstall nginx"
  },
  {
    "input": "Install build tools",
    "output": "sudo apt install build-essential"
  },
  {
    "input": "Install multiple packages",
    "output": "sudo apt install git curl vim"
  },
  {
    "input": "Install specific version",
    "output": "sudo apt install nginx=1.18.0-0ubuntu1"
  },
  {
    "input": "Install .deb file",
    "output": "sudo apt install ./package.deb"
  },
  {
    "input": "Allow unauthenticated",
    "output": "sudo apt install --allow-unauthenticated nginx"
  },
  {
    "input": "Download only",
    "output": "sudo apt install --download-only nginx"
  },
  {
    "input": "Show install progress",
    "output": "sudo apt install --show-progress nginx"
  },
  {
    "input": "Purge nginx",
    "output": "sudo apt purge nginx"
  },
  {
    "input": "Purge configs only",
    "output": "sudo apt purge --purge nginx"
  },
  {
    "input": "Purge and auto-remove",
    "output": "sudo apt purge --auto-remove nginx"
  },
  {
    "input": "Simulate purge",
    "output": "sudo apt purge --simulate nginx"
  },
  {
    "input": "Purge multiple packages",
    "output": "sudo apt purge git curl vim"
  },
  {
    "input": "No prompts",
    "output": "sudo apt purge -y nginx"
  },
  {
    "input": "Verbose purge",
    "output": "sudo apt purge --verbose-versions nginx"
  },
  {
    "input": "Dry run",
    "output": "sudo apt purge --dry-run nginx"
  },
  {
    "input": "Allow-unauthenticated",
    "output": "sudo apt purge --allow-unauthenticated nginx"
  },
  {
    "input": "Download-only",
    "output": "sudo apt purge --download-only nginx"
  },
  {
    "input": "Remove nginx",
    "output": "sudo apt remove nginx"
  },
  {
    "input": "Remove without prompts",
    "output": "sudo apt remove -y nginx"
  },
  {
    "input": "Remove and purge config",
    "output": "sudo apt remove --purge nginx"
  },
  {
    "input": "Remove unused dependencies",
    "output": "sudo apt remove --auto-remove nginx"
  },
  {
    "input": "Simulate removal",
    "output": "sudo apt remove --simulate nginx"
  },
  {
    "input": "Remove multiple packages",
    "output": "sudo apt remove git curl vim"
  },
  {
    "input": "Allow removal of essential",
    "output": "sudo apt remove --allow-remove-essential nginx"
  },
  {
    "input": "Dry run",
    "output": "sudo apt remove --dry-run nginx"
  },
  {
    "input": "Verbose output",
    "output": "sudo apt remove --verbose-versions nginx"
  },
  {
    "input": "Prevent auto-remove",
    "output": "sudo apt remove --no-auto-remove nginx"
  },
  {
    "input": "Install local .deb",
    "output": "sudo dpkg -i package.deb"
  },
  {
    "input": "Install multiple .debs",
    "output": "sudo dpkg -i pkg1.deb pkg2.deb"
  },
  {
    "input": "Force dependencies",
    "output": "sudo dpkg -i --force-depends package.deb"
  },
  {
    "input": "Force all options",
    "output": "sudo dpkg -i --force-all package.deb"
  },
  {
    "input": "Force old conffile",
    "output": "sudo dpkg -i --force-confold package.deb"
  },
  {
    "input": "Force new conffile",
    "output": "sudo dpkg -i --force-confnew package.deb"
  },
  {
    "input": "Simulate install",
    "output": "sudo dpkg -i --dry-run package.deb"
  },
  {
    "input": "Install in custom root",
    "output": "sudo dpkg -i --root=/mnt package.deb"
  },
  {
    "input": "Install skipping triggers",
    "output": "sudo dpkg -i --skip-same-depends package.deb"
  },
  {
    "input": "Show help",
    "output": "dpkg -i --help"
  },
  {
    "input": "Remove package",
    "output": "sudo dpkg -r package-name"
  },
  {
    "input": "Force remove",
    "output": "sudo dpkg -r --force-all package-name"
  },
  {
    "input": "Force depends",
    "output": "sudo dpkg -r --force-depends package-name"
  },
  {
    "input": "Simulate remove",
    "output": "sudo dpkg -r --dry-run package-name"
  },
  {
    "input": "Show help",
    "output": "dpkg -r --help"
  },
  {
    "input": "Remove multiple packages",
    "output": "sudo dpkg -r pkg1 pkg2"
  },
  {
    "input": "Remove config only",
    "output": "sudo dpkg --purge package-name"
  },
  {
    "input": "Remove ignoring errors",
    "output": "sudo dpkg -r --ignore-depends=libc6 package-name"
  },
  {
    "input": "Remove and fix install",
    "output": "sudo dpkg -r package-name; sudo apt-get -f install"
  },
  {
    "input": "Remove using wildcard",
    "output": "sudo dpkg -r 'mysql*'"
  },
  {
    "input": "Terminate process with PID 1234",
    "output": "kill 1234"
  },
  {
    "input": "Forcefully terminate PID 1234",
    "output": "kill -9 1234"
  },
  {
    "input": "Send SIGTERM to PID 5678",
    "output": "kill -15 5678"
  },
  {
    "input": "Send SIGINT to PID 91011",
    "output": "kill -2 91011"
  },
  {
    "input": "Send SIGHUP to PID 1213",
    "output": "kill -1 1213"
  },
  {
    "input": "Send SIGQUIT to PID 1415",
    "output": "kill -3 1415"
  },
  {
    "input": "Send SIGUSR1 to PID 1617",
    "output": "kill -USR1 1617"
  },
  {
    "input": "Send SIGUSR2 to PID 1819",
    "output": "kill -USR2 1819"
  },
  {
    "input": "Send SIGALRM to PID 2021",
    "output": "kill -ALRM 2021"
  },
  {
    "input": "Send SIGCHLD to PID 2223",
    "output": "kill -CHLD 2223"
  },
  {
    "input": "Send SIGCONT to a stopped PID 2425",
    "output": "kill -CONT 2425"
  },
  {
    "input": "Send SIGSTOP to PID 2627",
    "output": "kill -STOP 2627"
  },
  {
    "input": "Send SIGTSTP to PID 2829",
    "output": "kill -TSTP 2829"
  },
  {
    "input": "Send SIGTTIN to PID 3031",
    "output": "kill -TTIN 3031"
  },
  {
    "input": "Send SIGTTOU to PID 3233",
    "output": "kill -TTOU 3233"
  },
  {
    "input": "Send SIGPIPE to PID 3435",
    "output": "kill -PIPE 3435"
  },
  {
    "input": "Send SIGXCPU to PID 3637",
    "output": "kill -XCPU 3637"
  },
  {
    "input": "Send SIGXFSZ to PID 3839",
    "output": "kill -XFSZ 3839"
  },
  {
    "input": "Send SIGVTALRM to PID 4041",
    "output": "kill -VTALRM 4041"
  },
  {
    "input": "Send SIGPROF to PID 4243",
    "output": "kill -PROF 4243"
  },
  {
    "input": "Send SIGWINCH to PID 4445",
    "output": "kill -WINCH 4445"
  },
  {
    "input": "Send SIGPOLL to PID 4647",
    "output": "kill -POLL 4647"
  },
  {
    "input": "Send SIGSYS to PID 4849",
    "output": "kill -SYS 4849"
  },
  {
    "input": "Send SIGURG to PID 5051",
    "output": "kill -URG 5051"
  },
  {
    "input": "Send SIGABRT to PID 5253",
    "output": "kill -ABRT 5253"
  },
  {
    "input": "Send SIGBUS to PID 5455",
    "output": "kill -BUS 5455"
  },
  {
    "input": "Send SIGFPE to PID 5657",
    "output": "kill -FPE 5657"
  },
  {
    "input": "Send SIGILL to PID 5859",
    "output": "kill -ILL 5859"
  },
  {
    "input": "Send SIGKILL to PID 6061",
    "output": "kill -KILL 6061"
  },
  {
    "input": "Send SIGSEGV to PID 6263",
    "output": "kill -SEGV 6263"
  },
  {
    "input": "Send SIGTRAP to PID 6465",
    "output": "kill -TRAP 6465"
  },
  {
    "input": "Send SIGUSR1 to multiple PIDs",
    "output": "kill -USR1 1234 5678 91011"
  },
  {
    "input": "Send SIGTERM to process group 100",
    "output": "kill -TERM -100"
  },
  {
    "input": "Terminate child processes of PID 1213",
    "output": "pkill -P 1213"
  },
  {
    "input": "Send SIGKILL to child processes of PID 1415",
    "output": "pkill -9 -P 1415"
  },
  {
    "input": "Send SIGSTOP to PID range 2000–2005",
    "output": "for pid in {2000..2005}; do kill -STOP $pid; done"
  },
  {
    "input": "Send SIGTERM to jobs in current shell",
    "output": "kill -TERM %1 %2"
  },
  {
    "input": "Send SIGCONT to jobs in current shell",
    "output": "kill -CONT %1 %2"
  },
  {
    "input": "Ignore SIGTERM in PID 7071",
    "output": "trap '' TERM; kill 7071"
  },
  {
    "input": "Send SIGTERM after delay",
    "output": "sleep 5 && kill 8081"
  },
  {
    "input": "Sequentially kill multiple PIDs",
    "output": "kill 9091 && kill 10111"
  },
  {
    "input": "Parallel kill multiple PIDs",
    "output": "kill -9 11131 & kill -9 12141 & wait"
  },
  {
    "input": "Send SIGTERM via kill PGID",
    "output": "kill -TERM -$$"
  },
  {
    "input": "Send SIGTERM to all child processes of current shell",
    "output": "kill -TERM -- -$$"
  },
  {
    "input": "Kill all processes named firefox",
    "output": "killall firefox"
  },
  {
    "input": "Force kill all sshd processes",
    "output": "killall -9 sshd"
  },
  {
    "input": "Send SIGHUP to all apache2 processes",
    "output": "killall -HUP apache2"
  },
  {
    "input": "Kill all java processes by exact name",
    "output": "killall -e java"
  },
  {
    "input": "Kill all processes matching pattern 'python'",
    "output": "killall -r 'python.*'"
  },
  {
    "input": "Kill all processes owned by user alice",
    "output": "killall -u alice firefox"
  },
  {
    "input": "Kill all processes as superuser",
    "output": "sudo killall nginx"
  },
  {
    "input": "Kill all instances of mousepad",
    "output": "killall mousepad"
  },
  {
    "input": "Kill all instances of gnome-terminal",
    "output": "killall gnome-terminal"
  },
  {
    "input": "Kill process by PID file name",
    "output": "killall --pidfile /var/run/myapp.pid"
  },
  {
    "input": "Kill all processes except sshd",
    "output": "killall -o sshd"
  },
  {
    "input": "Kill processes named cat ignoring case",
    "output": "killall -i cat"
  },
  {
    "input": "Kill all processes older than 10 minutes named sleep",
    "output": "killall -o sleep"
  },
  {
    "input": "Kill all processes younger than 5 seconds named myapp",
    "output": "killall -n 5 myapp"
  },
  {
    "input": "Kill by signal name SIGUSR1",
    "output": "killall -USR1 mydaemon"
  },
  {
    "input": "Kill all instances of node.js",
    "output": "killall node"
  },
  {
    "input": "Kill GUI apps matching case-insensitive 'Chrome'",
    "output": "killall -i chrome"
  },
  {
    "input": "Force kill by exact match name",
    "output": "killall -9 -e myapp"
  },
  {
    "input": "Kill all processes matching regex 'httpd[0-9]+'",
    "output": "killall -r 'httpd[0-9]+'"
  },
  {
    "input": "Kill all screen sessions",
    "output": "killall screen"
  },
  {
    "input": "Kill all tmux sessions",
    "output": "killall tmux"
  },
  {
    "input": "Kill all vlc processes",
    "output": "killall vlc"
  },
  {
    "input": "Kill all mplayer instances",
    "output": "killall mplayer"
  },
  {
    "input": "Kill all ffmpeg processes",
    "output": "killall ffmpeg"
  },
  {
    "input": "Kill all Chromium processes",
    "output": "killall chromium"
  },
  {
    "input": "Kill all Xorg processes",
    "output": "killall Xorg"
  },
  {
    "input": "Kill user processes named bash",
    "output": "killall -u bob bash"
  },
  {
    "input": "Kill user processes named vim",
    "output": "killall -u carol vim"
  },
  {
    "input": "Kill root processes named apache2",
    "output": "sudo killall -u root apache2"
  },
  {
    "input": "Kill processes using older than given age",
    "output": "killall -o nginx"
  },
  {
    "input": "Kill processes using younger than given age",
    "output": "killall -n 10 nginx"
  },
  {
    "input": "Kill multiple names in one command",
    "output": "killall httpd mysqld"
  },
  {
    "input": "Kill processes by full path name",
    "output": "killall /usr/bin/python3"
  },
  {
    "input": "Kill named process with verbose output",
    "output": "killall -v myserver"
  },
  {
    "input": "Kill all child processes named worker",
    "output": "killall --children worker"
  },
  {
    "input": "Dry run to list processes that would be killed",
    "output": "killall -v -s TERM --dry-run myapp"
  },
  {
    "input": "Kill group of processes by group name",
    "output": "killall -g mygroup"
  },
  {
    "input": "Kill by signal number 15 to process name",
    "output": "killall -15 mysqld"
  },
  {
    "input": "Kill by signal number 2 (SIGINT)",
    "output": "killall -2 mysqld"
  },
  {
    "input": "Send SIGTERM by name ignoring errors",
    "output": "killall -q -TERM myapp"
  },
  {
    "input": "Force kill all by name quietly",
    "output": "killall -9 -q myapp"
  },
  {
    "input": "Kill by name matching wildcard",
    "output": "killall 'python*'"
  },
  {
    "input": "Kill by name matching wildcard ignoring case",
    "output": "killall -i 'Python*'"
  },
  {
    "input": "Kill by name using regex anchor",
    "output": "killall -r '^daemon$'"
  },
  {
    "input": "Kill legacy service by name",
    "output": "killall inetd"
  },
  {
    "input": "Kill all processes in the current login session",
    "output": "killall -u $(whoami)"
  },
  {
    "input": "Kill all processes except sshd in current session",
    "output": "killall -u $(whoami) --ignore-case -o sshd"
  },
  {
    "input": "Kill by name on remote host via SSH",
    "output": "ssh user@host 'killall mydaemon'"
  },
  {
    "input": "Kill by name with limited privilege escalation",
    "output": "sudo killall mydaemon"
  },
  {
    "input": "Kill by name using sudo in a script",
    "output": "sudo bash -c 'killall nginx'"
  },
  {
    "input": "Run a command with default niceness (+10)",
    "output": "nice -n 10 mycommand"
  },
  {
    "input": "Run with lower priority (+19)",
    "output": "nice -n 19 backup.sh"
  },
  {
    "input": "Run with higher priority (-5)",
    "output": "sudo nice -n -5 build.sh"
  },
  {
    "input": "Run interactively with niceness +5",
    "output": "nice -n 5 top"
  },
  {
    "input": "Run CPU-intensive task with niceness +15",
    "output": "nice -n 15 gzip largefile"
  },
  {
    "input": "Run IO-intensive task with niceness +12",
    "output": "nice -n 12 dd if=/dev/zero of=/tmp/test.img"
  },
  {
    "input": "Run memory-intensive task with niceness +8",
    "output": "nice -n 8 tar -cf archive.tar large_dir"
  },
  {
    "input": "Run script with niceness +0 (default)",
    "output": "nice -n 0 runscript.sh"
  },
  {
    "input": "Run compile job with niceness +1",
    "output": "nice -n 1 make -j8"
  },
  {
    "input": "Run rsync with niceness +3",
    "output": "nice -n 3 rsync -av src/ dest/"
  },
  {
    "input": "Run backup job with niceness +16",
    "output": "nice -n 16 ./backup.sh"
  },
  {
    "input": "Run video encoding with niceness +18",
    "output": "nice -n 18 ffmpeg -i in.mp4 out.mkv"
  },
  {
    "input": "Run audio conversion with niceness +14",
    "output": "nice -n 14 lame in.wav out.mp3"
  },
  {
    "input": "Run data analysis with niceness +7",
    "output": "nice -n 7 python3 analysis.py"
  },
  {
    "input": "Run database dump with niceness +11",
    "output": "nice -n 11 pg_dump mydb > dump.sql"
  },
  {
    "input": "Run network scan with niceness +13",
    "output": "nice -n 13 nmap -A target"
  },
  {
    "input": "Run intensive script with niceness -1",
    "output": "sudo nice -n -1 ./intensive.sh"
  },
  {
    "input": "Run process via sudo and nice",
    "output": "sudo nice -n 5 apt update"
  },
  {
    "input": "Run find command with niceness +10",
    "output": "nice -n 10 find / -type f"
  },
  {
    "input": "Run grep recursively with niceness +6",
    "output": "nice -n 6 grep -R 'TODO' ."
  },
  {
    "input": "Run backup with profiling",
    "output": "nice -n 8 time rsync -a /source /dest"
  },
  {
    "input": "Run sync in background with niceness +9",
    "output": "nice -n 9 rsync -a /src /dst &"
  },
  {
    "input": "Run CPU hog with minimal impact",
    "output": "nice -n 19 sha256sum *"
  },
  {
    "input": "Run job with highest niceness",
    "output": "nice -n 20 script.sh"
  },
  {
    "input": "Run job with minimal nice (highest priority)",
    "output": "sudo nice -n -20 critical.sh"
  },
  {
    "input": "Run Python script with niceness +2",
    "output": "nice -n 2 python3 script.py"
  },
  {
    "input": "Run backup with niceness +17 quietly",
    "output": "nice -n 17 -q ./backup.sh"
  },
  {
    "input": "Run data sync with niceness +4",
    "output": "nice -n 4 rsync -az src dest"
  },
  {
    "input": "Run tar with niceness +12",
    "output": "nice -n 12 tar -xzf archive.tar.gz"
  },
  {
    "input": "Run dd with niceness +13",
    "output": "nice -n 13 dd if=/dev/sda of=/backup.img"
  },
  {
    "input": "Run make install with niceness +2",
    "output": "nice -n 2 sudo make install"
  },
  {
    "input": "Run Docker build with niceness +3",
    "output": "nice -n 3 docker build ."
  },
  {
    "input": "Run Kubernetes apply with niceness +5",
    "output": "nice -n 5 kubectl apply -f deploy.yml"
  },
  {
    "input": "Run Ansible playbook with niceness +7",
    "output": "nice -n 7 ansible-playbook site.yml"
  },
  {
    "input": "Run AWS CLI with niceness +4",
    "output": "nice -n 4 aws s3 sync . s3://bucket"
  },
  {
    "input": "Run Google Cloud CLI with niceness +4",
    "output": "nice -n 4 gcloud compute instances list"
  },
  {
    "input": "Run Azure CLI with niceness +4",
    "output": "nice -n 4 az vm list"
  },
  {
    "input": "Run Jenkins CLI with niceness +8",
    "output": "nice -n 8 java -jar jenkins-cli.jar -s http://localhost:8080 build job"
  },
  {
    "input": "Run Maven build with niceness +6",
    "output": "nice -n 6 mvn clean install"
  },
  {
    "input": "Run Gradle build with niceness +6",
    "output": "nice -n 6 gradle build"
  },
  {
    "input": "Run Node.js server with niceness +10",
    "output": "nice -n 10 node server.js"
  },
  {
    "input": "Run npm install with niceness +8",
    "output": "nice -n 8 npm install"
  },
  {
    "input": "Run yarn install with niceness +8",
    "output": "nice -n 8 yarn install"
  },
  {
    "input": "Run pip install with niceness +8",
    "output": "nice -n 8 pip install -r requirements.txt"
  },
  {
    "input": "Run gem install with niceness +8",
    "output": "nice -n 8 gem install rails"
  },
  {
    "input": "Run apt upgrade with niceness +5",
    "output": "sudo nice -n 5 apt upgrade"
  },
  {
    "input": "Run yum update with niceness +5",
    "output": "sudo nice -n 5 yum update"
  },
  {
    "input": "Run dnf upgrade with niceness +5",
    "output": "sudo nice -n 5 dnf upgrade"
  },
  {
    "input": "Run pacman update with niceness +5",
    "output": "sudo nice -n 5 pacman -Syu"
  },
  {
    "input": "Run zypper update with niceness +5",
    "output": "sudo nice -n 5 zypper update"
  },
  {
    "input": "Run emerge update with niceness +5",
    "output": "sudo nice -n 5 emerge --update world"
  },
  {
    "input": "Run cargo build with niceness +3",
    "output": "nice -n 3 cargo build --release"
  },
  {
    "input": "Run go build with niceness +3",
    "output": "nice -n 3 go build ./..."
  },
  {
    "input": "Run dotnet build with niceness +3",
    "output": "nice -n 3 dotnet build"
  },
  {
    "input": "Run rustfmt with niceness +3",
    "output": "nice -n 3 rustfmt src/*.rs"
  },
  {
    "input": "Run clippy with niceness +3",
    "output": "nice -n 3 cargo clippy"
  },
  {
    "input": "Run eslint with niceness +3",
    "output": "nice -n 3 eslint . --ext .js,.jsx"
  },
  {
    "input": "Run prettier with niceness +3",
    "output": "nice -n 3 prettier --write 'src/**/*.{js,jsx,ts,tsx}'"
  },
  {
    "input": "Run flake8 with niceness +3",
    "output": "nice -n 3 flake8 ."
  },
  {
    "input": "Run black with niceness +3",
    "output": "nice -n 3 black ."
  },
  {
    "input": "Run eslint --fix with niceness +3",
    "output": "nice -n 3 eslint --fix . --ext .js,.jsx"
  },
  {
    "input": "Send SIGTERM to all sshd processes",
    "output": "pkill sshd"
  },
  {
    "input": "Force kill all sshd processes",
    "output": "pkill -9 sshd"
  },
  {
    "input": "Send SIGHUP to all httpd processes",
    "output": "pkill -HUP httpd"
  },
  {
    "input": "Send SIGINT to all vim processes",
    "output": "pkill -INT vim"
  },
  {
    "input": "Send SIGQUIT to all top processes",
    "output": "pkill -QUIT top"
  },
  {
    "input": "Send SIGUSR1 to all java processes",
    "output": "pkill -USR1 java"
  },
  {
    "input": "Send SIGUSR2 to all java processes",
    "output": "pkill -USR2 java"
  },
  {
    "input": "Send SIGSTOP to all sleep processes",
    "output": "pkill -STOP sleep"
  },
  {
    "input": "Send SIGCONT to all sleep processes",
    "output": "pkill -CONT sleep"
  },
  {
    "input": "Send SIGALRM to all cron processes",
    "output": "pkill -ALRM cron"
  },
  {
    "input": "Case-insensitive match of process name 'Python'",
    "output": "pkill -i python"
  },
  {
    "input": "Use full command match",
    "output": "pkill -f 'python script.py'"
  },
  {
    "input": "Match processes by user",
    "output": "pkill -u alice myapp"
  },
  {
    "input": "Exclude processes owned by root",
    "output": "pkill -U alice myapp"
  },
  {
    "input": "Match processes older than 10 minutes",
    "output": "pkill -o sleep"
  },
  {
    "input": "Match processes younger than 5 seconds",
    "output": "pkill -n sleep"
  },
  {
    "input": "Match by group name",
    "output": "pkill -G admin myapp"
  },
  {
    "input": "Match by parent PID",
    "output": "pkill -P 1234"
  },
  {
    "input": "Match by terminal",
    "output": "pkill -t pts/0"
  },
  {
    "input": "Dry run to list targets only",
    "output": "pkill -l sshd"
  },
  {
    "input": "Verbose output",
    "output": "pkill -v sshd"
  },
  {
    "input": "Quiet mode",
    "output": "pkill -q sshd"
  },
  {
    "input": "Timeout before force kill",
    "output": "pkill -15 -i 5 sshd"
  },
  {
    "input": "Match exact name",
    "output": "pkill -x bash"
  },
  {
    "input": "Signal by number",
    "output": "pkill -2 bash"
  },
  {
    "input": "Match by session ID",
    "output": "pkill -s 1234 myapp"
  },
  {
    "input": "Match by UID range",
    "output": "pkill -U 1000-1005 myapp"
  },
  {
    "input": "Match by GID range",
    "output": "pkill -G 100-200 myapp"
  },
  {
    "input": "Match only processes with TTY",
    "output": "pkill -t pts/1 bash"
  },
  {
    "input": "Send SIGTERM to scripts invoked by cron",
    "output": "pkill -f cronjob.sh"
  },
  {
    "input": "Kill Java processes started by user",
    "output": "pkill -u bob java"
  },
  {
    "input": "Kill Python scripts in virtualenv",
    "output": "pkill -f '/venv/bin/python'"
  },
  {
    "input": "Kill processes matching regex",
    "output": "pkill -r 'node.*server'"
  },
  {
    "input": "Kill processes by command basename",
    "output": "pkill -x tmux"
  },
  {
    "input": "Kill processes preserving other instances",
    "output": "pkill -o nginx"
  },
  {
    "input": "Kill only newest process",
    "output": "pkill -n sshd"
  },
  {
    "input": "Kill by memory usage (approx via sorting)",
    "output": "ps aux | sort -rk 4 | head -n 5 | awk '{print $2}'| xargs kill"
  },
  {
    "input": "Kill by CPU usage",
    "output": "ps aux | sort -rk 3 | head -n 5 | awk '{print $2}'| xargs kill"
  },
  {
    "input": "Kill by elapsed time >1h",
    "output": "ps -eo pid,etimes,comm | awk '$2>3600{print $1}'| xargs kill"
  },
  {
    "input": "Kill by elapsed time <60s",
    "output": "ps -eo pid,etimes,comm | awk '$2<60{print $1}'| xargs kill"
  },
  {
    "input": "Kill by process group",
    "output": "pkill -g 1000"
  },
  {
    "input": "Kill by resource limit",
    "output": "ps aux --sort=-rss | head -n 3 | awk '{print $2}'| xargs kill"
  },
  {
    "input": "Kill zombie processes",
    "output": "pkill -HUP -P 1"
  },
  {
    "input": "Kill by session leader",
    "output": "pkill -s 2000"
  },
  {
    "input": "Change niceness of PID 1234 to +10",
    "output": "sudo renice +10 1234"
  },
  {
    "input": "Change niceness of PID 1234 to -5",
    "output": "sudo renice -5 1234"
  },
  {
    "input": "Change niceness of multiple PIDs",
    "output": "sudo renice +5 1234 5678 91011"
  },
  {
    "input": "Change niceness of all processes by user alice to +10",
    "output": "sudo renice +10 -u alice"
  },
  {
    "input": "Change niceness of all processes by user bob to -5",
    "output": "sudo renice -5 -u bob"
  },
  {
    "input": "Change niceness of all root processes to +15",
    "output": "sudo renice +15 -u root"
  },
  {
    "input": "Change niceness of process group 200 to +3",
    "output": "sudo renice +3 -g 200"
  },
  {
    "input": "Change niceness of current shell to +2",
    "output": "renice +2 $$"
  },
  {
    "input": "Change niceness of a running script by job number",
    "output": "renice +4 %1"
  },
  {
    "input": "Change niceness of sshd process to -10",
    "output": "sudo renice -10 -p $(pgrep sshd)"
  },
  {
    "input": "Change niceness of java processes by name",
    "output": "sudo renice +5 -n $(pgrep java)"
  },
  {
    "input": "Change niceness of processes in a session",
    "output": "sudo renice +7 -s 1234"
  },
  {
    "input": "Change niceness of all processes in group wheel",
    "output": "sudo renice +8 -G wheel"
  },
  {
    "input": "Change niceness of processes older than 1 hour",
    "output": "for pid in $(ps -eo pid,etimes | awk '$2>3600{print $1}'); do sudo renice +12 $pid; done"
  },
  {
    "input": "Change niceness of processes younger than 1 minute",
    "output": "for pid in $(ps -eo pid,etimes | awk '$2<60{print $1}'); do sudo renice +12 $pid; done"
  },
  {
    "input": "Change niceness of highest CPU processes",
    "output": "for pid in $(ps aux --sort=-%cpu | head -n 5 | awk '{print $2}'); do sudo renice +5 $pid; done"
  },
  {
    "input": "Change niceness of highest memory processes",
    "output": "for pid in $(ps aux --sort=-%mem | head -n 5 | awk '{print $2}'); do sudo renice +5 $pid; done"
  },
  {
    "input": "Change niceness of processes using specific TTY",
    "output": "sudo renice +6 -t pts/1"
  },
  {
    "input": "Change niceness of processes matching regex",
    "output": "sudo renice +9 -p $(pgrep -f 'python.*server')"
  },
  {
    "input": "Change niceness of processes with specific cgroup",
    "output": "sudo renice +4 -p $(cat /sys/fs/cgroup/mygroup/cgroup.procs)"
  },
  {
    "input": "Change niceness of Docker container processes",
    "output": "sudo renice +5 -p $(docker inspect -f '{{.State.Pid}}' mycontainer)"
  },
  {
    "input": "Change niceness of Kubernetes pod processes",
    "output": "sudo renice +5 -p $(kubectl exec mypod -- pgrep myprocess)"
  },
  {
    "input": "Change niceness of system service processes",
    "output": "sudo renice +3 -p $(systemctl show -p MainPID --value sshd.service)"
  },
  {
    "input": "Change niceness of all cron jobs",
    "output": "sudo renice +10 -u root --whooping cpulimit"
  },
  {
    "input": "Change niceness of all systemd user services",
    "output": "for pid in $(systemctl show --property=MainPID --value --user); do sudo renice +10 $pid; done"
  },
  {
    "input": "Change niceness of all snap processes",
    "output": "sudo renice +8 -p $(ps -eo pid,cmd | grep /snap/ | awk '{print $1}')"
  },
  {
    "input": "Change niceness of all Flatpak processes",
    "output": "sudo renice +8 -p $(ps -eo pid,cmd | grep /var/lib/flatpak/ | awk '{print $1}')"
  },
  {
    "input": "Change niceness of specific socket listener",
    "output": "sudo renice +5 -p $(lsof -i:80 -t)"
  },
  {
    "input": "Change niceness of specific child processes",
    "output": "sudo renice +5 -p $(pgrep -P $(pgrep mydaemon))"
  },
  {
    "input": "Change niceness of processes using network on port 22",
    "output": "sudo renice +5 -p $(lsof -i:22 -t)"
  },
  {
    "input": "Change niceness of all Chrome processes",
    "output": "sudo renice +5 -p $(pgrep chrome)"
  },
  {
    "input": "Change niceness of all Firefox processes",
    "output": "sudo renice +5 -p $(pgrep firefox)"
  },
  {
    "input": "Change niceness of Xorg process",
    "output": "sudo renice +5 -p $(pgrep Xorg)"
  },
  {
    "input": "Change niceness of pulseaudio",
    "output": "sudo renice +10 -p $(pgrep pulseaudio)"
  },
  {
    "input": "Change niceness of docker daemon",
    "output": "sudo renice +5 -p $(pgrep dockerd)"
  },
  {
    "input": "Change niceness of systemd-journald",
    "output": "sudo renice +5 -p $(pgrep systemd-journald)"
  },
  {
    "input": "Change niceness of kernel threads",
    "output": "for pid in $(ps -eo pid,cmd | grep '\\[.*\\]' | awk '{print $1}'); do sudo renice +15 $pid; done"
  },
  {
    "input": "Change niceness of network manager processes",
    "output": "sudo renice +5 -p $(pgrep NetworkManager)"
  },
  {
    "input": "Change niceness of ssh-agent",
    "output": "sudo renice +10 -p $(pgrep ssh-agent)"
  },
  {
    "input": "Change niceness of cron daemon",
    "output": "sudo renice +8 -p $(pgrep cron)"
  },
  {
    "input": "Change niceness of syslog daemon",
    "output": "sudo renice +8 -p $(pgrep rsyslogd)"
  },
  {
    "input": "Change niceness of journald daemon",
    "output": "sudo renice +8 -p $(pgrep systemd-journal)"
  },
  {
    "input": "Change niceness of dbus daemon",
    "output": "sudo renice +8 -p $(pgrep dbus-daemon)"
  },
  {
    "input": "Change niceness of avahi daemon",
    "output": "sudo renice +8 -p $(pgrep avahi-daemon)"
  },
  {
    "input": "Change niceness of bluetooth daemon",
    "output": "sudo renice +8 -p $(pgrep bluetoothd)"
  },
  {
    "input": "Change niceness of cupsd daemon",
    "output": "sudo renice +8 -p $(pgrep cupsd)"
  },
  {
    "input": "Change niceness of upower daemon",
    "output": "sudo renice +8 -p $(pgrep upowerd)"
  },
  {
    "input": "Change niceness of gvfs daemon",
    "output": "sudo renice +8 -p $(pgrep gvfsd)"
  },
  {
    "input": "Change niceness of user session processes",
    "output": "sudo renice +5 -u $USER"
  },
  {
    "input": "Change niceness of root session processes",
    "output": "sudo renice +5 -u root"
  },
  {
    "input": "Change niceness of all processes in cgroup /user.slice",
    "output": "for pid in $(cat /sys/fs/cgroup/user.slice/*.tasks); do sudo renice +5 $pid; done"
  },
  {
    "input": "Change niceness of all processes in cgroup /system.slice",
    "output": "for pid in $(cat /sys/fs/cgroup/system.slice/*.tasks); do sudo renice +5 $pid; done"
  },
  {
    "input": "Change niceness of init process",
    "output": "sudo renice +0 -p 1"
  },
  {
    "input": "Change niceness of all ssh connections from this host",
    "output": "sudo renice +5 -p $(ss -tnp | grep ESTAB | awk '{print $6}' | cut -d',' -f2)"
  },
  {
    "input": "Change niceness of mail services",
    "output": "sudo renice +5 -p $(pgrep postfix) $(pgrep smbd)"
  },
  {
    "input": "Change niceness of virtualization processes",
    "output": "sudo renice +5 -p $(pgrep qemu)"
  },
  {
    "input": "Change niceness of database processes",
    "output": "sudo renice +5 -p $(pgrep mysqld)"
  },
  {
    "input": "Change niceness of web server processes",
    "output": "sudo renice +5 -p $(pgrep nginx)"
  },
  {
    "input": "Change niceness of caching server processes",
    "output": "sudo renice +5 -p $(pgrep memcached)"
  },
  {
    "input": "Change niceness of search engine processes",
    "output": "sudo renice +5 -p $(pgrep elasticsearch)"
  },
  {
    "input": "Change niceness of container runtime processes",
    "output": "sudo renice +5 -p $(pgrep containerd)"
  },
  {
    "input": "Change niceness of orchestration agent",
    "output": "sudo renice +5 -p $(pgrep kubelet)"
  },
  {
    "input": "Change niceness of telemetry agent",
    "output": "sudo renice +5 -p $(pgrep telegraf)"
  },
  {
    "input": "Change niceness of logging agent",
    "output": "sudo renice +5 -p $(pgrep fluentd)"
  },
  {
    "input": "Change niceness of monitoring agent",
    "output": "sudo renice +5 -p $(pgrep prometheus)"
  },
  {
    "input": "Change niceness of alerting agent",
    "output": "sudo renice +5 -p $(pgrep alertmanager)"
  },
  {
    "input": "Print the first column of the file data.txt",
    "output": "awk '{print $1}' data.txt"
  },
  {
    "input": "Display the second column of file.csv",
    "output": "awk -F',' '{print $2}' file.csv"
  },
  {
    "input": "Print all lines where the third column is greater than 100",
    "output": "awk '$3 > 100' data.txt"
  },
  {
    "input": "Print only the lines containing the word 'error'",
    "output": "awk '/error/' log.txt"
  },
  {
    "input": "Print the line number and the line",
    "output": "awk '{print NR, $0}' file.txt"
  },
  {
    "input": "Print the last column of each line",
    "output": "awk '{print $NF}' data.txt"
  },
  {
    "input": "Print lines where the second field is 'admin'",
    "output": "awk '$2 == \"admin\"' users.txt"
  },
  {
    "input": "Sum values in the second column",
    "output": "awk '{sum += $2} END {print sum}' data.txt"
  },
  {
    "input": "Print line if it contains more than 5 fields",
    "output": "awk 'NF > 5' file.txt"
  },
  {
    "input": "Count the number of lines in file.txt",
    "output": "awk 'END {print NR}' file.txt"
  },
  {
    "input": "Print the first and third fields separated by a dash",
    "output": "awk '{print $1 \"-\" $3}' file.txt"
  },
  {
    "input": "Print every even numbered line",
    "output": "awk 'NR % 2 == 0' file.txt"
  },
  {
    "input": "Print the lines from line 5 to line 10",
    "output": "awk 'NR>=5 && NR<=10' file.txt"
  },
  {
    "input": "Print total of the third column",
    "output": "awk '{sum+=$3} END {print sum}' data.txt"
  },
  {
    "input": "Skip the header and print second column",
    "output": "awk 'NR > 1 {print $2}' file.csv"
  },
  {
    "input": "Replace all spaces with dashes",
    "output": "awk '{gsub(/ /,\"-\"); print}' file.txt"
  },
  {
    "input": "Print only unique values from the first column",
    "output": "awk '!seen[$1]++' data.txt"
  },
  {
    "input": "Print the number of fields in each line",
    "output": "awk '{print NF}' file.txt"
  },
  {
    "input": "Print lines where the length is greater than 20",
    "output": "awk 'length($0) > 20' file.txt"
  },
  {
    "input": "Print lines that begin with 'ERROR'",
    "output": "awk '/^ERROR/' log.txt"
  },
  {
    "input": "Print all lines except the first",
    "output": "awk 'NR>1' file.txt"
  },
  {
    "input": "Print the filename and the number of lines in it",
    "output": "awk 'END {print FILENAME, NR}' file.txt"
  },
  {
    "input": "Print first column from all .log files",
    "output": "awk '{print $1}' *.log"
  },
  {
    "input": "Print lines where the first column is not empty",
    "output": "awk '$1 != \"\"' file.txt"
  },
  {
    "input": "Print only lines with exactly 3 fields",
    "output": "awk 'NF == 3' file.txt"
  },
  {
    "input": "Print fields in reverse order",
    "output": "awk '{for(i=NF;i>=1;i--) printf $i\" \"; print \"\"}' file.txt"
  },
  {
    "input": "Print only the header row",
    "output": "awk 'NR==1' file.csv"
  },
  {
    "input": "Double the second column value and print",
    "output": "awk '{print $2 * 2}' file.txt"
  },
  {
    "input": "Print the 2nd and 4th columns",
    "output": "awk '{print $2, $4}' file.txt"
  },
  {
    "input": "Print all rows where field 3 contains 'pass'",
    "output": "awk '$3 ~ /pass/' file.txt"
  },
  {
    "input": "Print last 5 lines of file.txt",
    "output": "awk '{a[NR]=$0} END {for (i=NR-4;i<=NR;i++) print a[i]}' file.txt"
  },
  {
    "input": "Find the maximum value in the third column",
    "output": "awk 'max < $3 {max=$3} END {print max}' file.txt"
  },
  {
    "input": "Find the average of column 2",
    "output": "awk '{sum += $2} END {print sum/NR}' file.txt"
  },
  {
    "input": "Print all lines that contain numbers",
    "output": "awk '/[0-9]/' file.txt"
  },
  {
    "input": "Print all lines where field 1 contains only digits",
    "output": "awk '$1 ~ /^[0-9]+$/' file.txt"
  },
  {
    "input": "Print first field in uppercase",
    "output": "awk '{print toupper($1)}' file.txt"
  },
  {
    "input": "Print date and message from log file",
    "output": "awk '{print $1, $5}' log.txt"
  },
  {
    "input": "Print line if third field is either 'yes' or 'no'",
    "output": "awk '$3 == \"yes\" || $3 == \"no\"' data.txt"
  },
  {
    "input": "Print sum of values in column 1 if greater than 10",
    "output": "awk '$1 > 10 {sum+=$1} END {print sum}' file.txt"
  },
  {
    "input": "Print line and length of the line",
    "output": "awk '{print $0, length($0)}' file.txt"
  },
  {
    "input": "Print lines if first field matches '^[a-zA-Z]$'",
    "output": "awk '$1 ~ /^[a-zA-Z]$/' file.txt"
  },
  {
    "input": "Filter rows where second column equals 0",
    "output": "awk '$2 == 0' data.txt"
  },
  {
    "input": "Print total and average of column 4",
    "output": "awk '{t+=$4} END {print t, t/NR}' file.txt"
  },
  {
    "input": "Skip lines containing 'debug'",
    "output": "awk '!/debug/' log.txt"
  },
  {
    "input": "Print line numbers of lines with word 'error'",
    "output": "awk '/error/ {print NR}' log.txt"
  },
  {
    "input": "Print 3rd field only if 2nd field is 'active'",
    "output": "awk '$2 == \"active\" {print $3}' file.txt"
  },
  {
    "input": "Print time from log entries",
    "output": "awk '{print $2}' access.log"
  },
  {
    "input": "Replace commas with spaces in each line",
    "output": "awk '{gsub(\",\", \" \"); print}' file.txt"
  },
  {
    "input": "Print total characters in file.txt",
    "output": "awk '{c += length($0)} END {print c}' file.txt"
  },
  {
    "input": "Print first 10 lines",
    "output": "awk 'NR <= 10' file.txt"
  },
  {
    "input": "Print full name from two columns",
    "output": "awk '{print $1 \" \" $2}' names.txt"
  },
  {
    "input": "Add row number to each line",
    "output": "awk '{print NR \": \" $0}' file.txt"
  },
  {
    "input": "Convert lowercase to uppercase in column 2",
    "output": "awk '{print toupper($2)}' file.txt"
  },
  {
    "input": "Print fields if line starts with 'user:'",
    "output": "awk '/^user:/ {print $2, $3}' file.txt"
  },
  {
    "input": "Print only lines that don't start with '#'",
    "output": "awk '!/^#/' config.txt"
  },
  {
    "input": "Check if line starts with a digit",
    "output": "awk '/^[0-9]/' file.txt"
  },
  {
    "input": "Extract domain from email field",
    "output": "awk -F'@' '{print $2}' emails.txt"
  },
  {
    "input": "Print column 3 in scientific notation",
    "output": "awk '{printf \"%e\\n\", $3}' file.txt"
  },
  {
    "input": "Format output as CSV",
    "output": "awk '{print $1\",\"$2\",\"$3}' data.txt"
  },
  {
    "input": "Print all lines longer than 30 characters",
    "output": "awk 'length > 30' file.txt"
  },
  {
    "input": "Pad column 1 with zeros",
    "output": "awk '{printf \"%05d\\n\", $1}' file.txt"
  },
  {
    "input": "Print column 2 if column 1 equals 'ERROR'",
    "output": "awk '$1 == \"ERROR\" {print $2}' log.txt"
  },
  {
    "input": "Print date and user from CSV",
    "output": "awk -F',' '{print $1, $3}' records.csv"
  },
  {
    "input": "Convert tabs to commas",
    "output": "awk '{gsub(\"\t\", \",\"); print}' file.txt"
  },
  {
    "input": "Add 100 to each number in column 2",
    "output": "awk '{$2 += 100; print}' file.txt"
  },
  {
    "input": "Print header and lines where value > 1000",
    "output": "awk 'NR==1 || $2 > 1000' data.csv"
  },
  {
    "input": "Print file with line numbers, skipping comments",
    "output": "awk '!/^#/ {print NR, $0}' file.txt"
  },
  {
    "input": "Sort by second column numerically",
    "output": "awk '{print $2, $0}' file.txt | sort -n"
  },
  {
    "input": "Calculate product of values in column 1",
    "output": "awk '{p *= $1} END {print p}' file.txt"
  },
  {
    "input": "Extract IPv4 addresses from text",
    "output": "awk '/[0-9]+(\\.[0-9]+){3}/' file.txt"
  },
  {
    "input": "Find the word 'error' in the file log.txt",
    "output": "grep 'error' log.txt"
  },
  {
    "input": "Search for the string 'TODO' in all Python files",
    "output": "grep 'TODO' *.py"
  },
  {
    "input": "Look for 'Failed login' in auth.log",
    "output": "grep 'Failed login' /var/log/auth.log"
  },
  {
    "input": "Find case-insensitive matches for 'warning' in server.log",
    "output": "grep -i 'warning' server.log"
  },
  {
    "input": "Search recursively for 'function' in current directory",
    "output": "grep -r 'function' ."
  },
  {
    "input": "Find lines starting with 'INFO' in log.txt",
    "output": "grep '^INFO' log.txt"
  },
  {
    "input": "Show lines not containing 'debug' in output.txt",
    "output": "grep -v 'debug' output.txt"
  },
  {
    "input": "Search for 'password' in all files under /etc",
    "output": "grep -r 'password' /etc"
  },
  {
    "input": "Find lines ending with semicolon in script.sh",
    "output": "grep ';$' script.sh"
  },
  {
    "input": "Find the word 'disk' in dmesg output",
    "output": "dmesg | grep 'disk'"
  },
  {
    "input": "Search for the pattern 'error code [0-9]+' in error.log",
    "output": "grep -E 'error code [0-9]+' error.log"
  },
  {
    "input": "Search all .txt files for 'summary'",
    "output": "grep 'summary' *.txt"
  },
  {
    "input": "Highlight matching 'root' in passwd file",
    "output": "grep --color=auto 'root' /etc/passwd"
  },
  {
    "input": "Search for 'usb' in kernel logs",
    "output": "dmesg | grep 'usb'"
  },
  {
    "input": "Find 'exit' in bash history",
    "output": "grep 'exit' ~/.bash_history"
  },
  {
    "input": "Find IP addresses in log file",
    "output": "grep -E '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' access.log"
  },
  {
    "input": "Search for string 'connection timed out' in logs",
    "output": "grep 'connection timed out' logs/*"
  },
  {
    "input": "Count lines containing 'admin' in users.csv",
    "output": "grep -c 'admin' users.csv"
  },
  {
    "input": "Search for exact word 'disk' in syslog",
    "output": "grep -w 'disk' /var/log/syslog"
  },
  {
    "input": "Find all matches of 'def' in Python files",
    "output": "grep 'def' *.py"
  },
  {
    "input": "Show line numbers for matches of 'main' in main.c",
    "output": "grep -n 'main' main.c"
  },
  {
    "input": "Find 'ssh' in service logs",
    "output": "grep 'ssh' /var/log/messages"
  },
  {
    "input": "List files containing '127.0.0.1'",
    "output": "grep -l '127.0.0.1' *"
  },
  {
    "input": "Find lines with only digits",
    "output": "grep -E '^[0-9]+$' numbers.txt"
  },
  {
    "input": "Search logs for 'error' ignoring case",
    "output": "grep -i 'error' logs/*.log"
  },
  {
    "input": "Show only filenames with 'kernel' in content",
    "output": "grep -l 'kernel' *.log"
  },
  {
    "input": "Search without matching 'tmp' in filelist.txt",
    "output": "grep -v 'tmp' filelist.txt"
  },
  {
    "input": "Look for words starting with 'net' in logs",
    "output": "grep -E '\\bnet\\w*' logs/*.txt"
  },
  {
    "input": "Find 'sudo' command usage in history",
    "output": "grep 'sudo' ~/.bash_history"
  },
  {
    "input": "Find 'config' in all .conf files",
    "output": "grep 'config' *.conf"
  },
  {
    "input": "Search entire home directory for 'ssh'",
    "output": "grep -r 'ssh' ~"
  },
  {
    "input": "Show lines with uppercase 'ERROR'",
    "output": "grep 'ERROR' file.txt"
  },
  {
    "input": "Find 'eth0' in system log",
    "output": "grep 'eth0' /var/log/syslog"
  },
  {
    "input": "Highlight results for 'network'",
    "output": "grep --color=auto 'network' *.log"
  },
  {
    "input": "Only print matching parts of 'user'",
    "output": "grep -o 'user' users.txt"
  },
  {
    "input": "Search logs for timestamp 2023-06-10",
    "output": "grep '2023-06-10' *.log"
  },
  {
    "input": "Search logs in /var/log recursively for 'panic'",
    "output": "grep -r 'panic' /var/log"
  },
  {
    "input": "Find functions in C file",
    "output": "grep '()' main.c"
  },
  {
    "input": "Search for 'localhost' in hosts file",
    "output": "grep 'localhost' /etc/hosts"
  },
  {
    "input": "Find commented lines in a script",
    "output": "grep '^#' script.sh"
  },
  {
    "input": "Find string 'java' in all systemd unit files",
    "output": "grep 'java' /etc/systemd/system/*.service"
  },
  {
    "input": "Search for port 22 usage",
    "output": "grep '22' /etc/services"
  },
  {
    "input": "Find invalid lines with no colon in passwd",
    "output": "grep -v ':' /etc/passwd"
  },
  {
    "input": "Search for 'error' in access.log",
    "output": "grep 'error' access.log"
  },
  {
    "input": "Find commented-out IP addresses",
    "output": "grep '^#.*[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' config.txt"
  },
  {
    "input": "Look for entries with 'home' in fstab",
    "output": "grep 'home' /etc/fstab"
  },
  {
    "input": "Check for keyword 'sudo' in sudoers",
    "output": "grep 'sudo' /etc/sudoers"
  },
  {
    "input": "Search for 'connection lost' in dmesg output",
    "output": "dmesg | grep 'connection lost'"
  },
  {
    "input": "Check for root user entry",
    "output": "grep '^root:' /etc/passwd"
  },
  {
    "input": "Search bash config for 'alias'",
    "output": "grep 'alias' ~/.bashrc"
  },
  {
    "input": "List all lines with word 'usb' in logs",
    "output": "grep -w 'usb' *.log"
  },
  {
    "input": "Look for HTTP status codes in log",
    "output": "grep -E 'HTTP/1.1\" [4-5][0-9]{2}' access.log"
  },
  {
    "input": "Find all lines with email addresses",
    "output": "grep -E '\\b[\\w.-]+@[\\w.-]+\\.[A-Za-z]{2,6}\\b' *.txt"
  },
  {
    "input": "Print lines matching multiple words",
    "output": "grep -E 'error|warning' server.log"
  },
  {
    "input": "Show only the IPs from access.log",
    "output": "grep -oE '\\b[0-9]+(\\.[0-9]+){3}\\b' access.log"
  },
  {
    "input": "Search for blank lines in file",
    "output": "grep '^$' file.txt"
  },
  {
    "input": "Find lines containing digits",
    "output": "grep '[0-9]' file.txt"
  },
  {
    "input": "Find uppercase words",
    "output": "grep -E '\\b[A-Z]{2,}\\b' text.txt"
  },
  {
    "input": "Search JSON files for 'token'",
    "output": "grep 'token' *.json"
  },
  {
    "input": "Find lines with square brackets",
    "output": "grep '\\[.*\\]' log.txt"
  },
  {
    "input": "Search for 'ssh' service in /etc/services",
    "output": "grep 'ssh' /etc/services"
  },
  {
    "input": "Find files with 'hostname' keyword",
    "output": "grep -l 'hostname' *"
  },
  {
    "input": "Count 'error' messages in all log files",
    "output": "grep -c 'error' *.log"
  },
  {
    "input": "Search config for timeout setting",
    "output": "grep 'timeout' config.ini"
  },
  {
    "input": "Find shell scripts with 'bash' header",
    "output": "grep '^#!/bin/bash' *.sh"
  },
  {
    "input": "List functions in .js files",
    "output": "grep 'function' *.js"
  },
  {
    "input": "Find all comment lines in C file",
    "output": "grep '^//' main.c"
  },
  {
    "input": "Print all lines with numbers",
    "output": "grep '[0-9]' data.txt"
  },
  {
    "input": "Extract URL links from a file",
    "output": "grep -E 'http[s]?://\\S+' file.txt"
  },
  {
    "input": "Get all IPv6 addresses from log",
    "output": "grep -E '([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}' logfile.txt"
  },
  {
    "input": "Find the location of the passwd file",
    "output": "locate passwd"
  },
  {
    "input": "Search for any file named config.json",
    "output": "locate config.json"
  },
  {
    "input": "Look for bashrc",
    "output": "locate bashrc"
  },
  {
    "input": "Find files with the name settings.py",
    "output": "locate settings.py"
  },
  {
    "input": "Locate all .log files",
    "output": "locate '*.log'"
  },
  {
    "input": "Search for docker-compose.yml",
    "output": "locate docker-compose.yml"
  },
  {
    "input": "Find all files named index.html",
    "output": "locate index.html"
  },
  {
    "input": "Search for .bash_profile",
    "output": "locate .bash_profile"
  },
  {
    "input": "Locate all pdf files",
    "output": "locate '*.pdf'"
  },
  {
    "input": "Find a file named main.cpp",
    "output": "locate main.cpp"
  },
  {
    "input": "Search for nginx.conf file",
    "output": "locate nginx.conf"
  },
  {
    "input": "Locate all files named server.js",
    "output": "locate server.js"
  },
  {
    "input": "Find a file with the name resume.docx",
    "output": "locate resume.docx"
  },
  {
    "input": "Look for sshd_config",
    "output": "locate sshd_config"
  },
  {
    "input": "Search for requirements.txt",
    "output": "locate requirements.txt"
  },
  {
    "input": "Find a file named README.md",
    "output": "locate README.md"
  },
  {
    "input": "Locate files ending with .tar.gz",
    "output": "locate '*.tar.gz'"
  },
  {
    "input": "Find all Python files",
    "output": "locate '*.py'"
  },
  {
    "input": "Search for jpg images",
    "output": "locate '*.jpg'"
  },
  {
    "input": "Locate myfile.txt",
    "output": "locate myfile.txt"
  },
  {
    "input": "Look for authorized_keys",
    "output": "locate authorized_keys"
  },
  {
    "input": "Find the location of the hosts file",
    "output": "locate hosts"
  },
  {
    "input": "Find kernel modules",
    "output": "locate '*.ko'"
  },
  {
    "input": "Search for core dumps",
    "output": "locate core"
  },
  {
    "input": "Find anything related to chrome",
    "output": "locate chrome"
  },
  {
    "input": "Locate the sudoers file",
    "output": "locate sudoers"
  },
  {
    "input": "Find files related to MySQL",
    "output": "locate mysql"
  },
  {
    "input": "Locate bash history",
    "output": "locate .bash_history"
  },
  {
    "input": "Find all shell scripts",
    "output": "locate '*.sh'"
  },
  {
    "input": "Search for startup scripts",
    "output": "locate rc.local"
  },
  {
    "input": "Find vim configuration files",
    "output": "locate .vimrc"
  },
  {
    "input": "Locate crontab backup files",
    "output": "locate crontab"
  },
  {
    "input": "Look for files in /etc directory",
    "output": "locate /etc/"
  },
  {
    "input": "Locate boot logs",
    "output": "locate boot.log"
  },
  {
    "input": "Search for any sqlite databases",
    "output": "locate '*.sqlite'"
  },
  {
    "input": "Find all XML files",
    "output": "locate '*.xml'"
  },
  {
    "input": "Find Kubernetes config",
    "output": "locate config.yaml"
  },
  {
    "input": "Search for package.json files",
    "output": "locate package.json"
  },
  {
    "input": "Locate GPG keys",
    "output": "locate *.gpg"
  },
  {
    "input": "Find logrotate configuration",
    "output": "locate logrotate.conf"
  },
  {
    "input": "Search for bootloader files",
    "output": "locate grub.cfg"
  },
  {
    "input": "Locate SSH private key",
    "output": "locate id_rsa"
  },
  {
    "input": "Find HTML templates",
    "output": "locate '*.html'"
  },
  {
    "input": "Find JSON config files",
    "output": "locate '*.json'"
  },
  {
    "input": "Search for systemd service files",
    "output": "locate '*.service'"
  },
  {
    "input": "Locate /var/log files",
    "output": "locate /var/log"
  },
  {
    "input": "Search for SSL certificates",
    "output": "locate '*.crt'"
  },
  {
    "input": "Find Postgres configuration files",
    "output": "locate postgresql.conf"
  },
  {
    "input": "Locate application logs",
    "output": "locate app.log"
  },
  {
    "input": "Look for temp files",
    "output": "locate '*.tmp'"
  },
  {
    "input": "Locate files with .bak extension",
    "output": "locate '*.bak'"
  },
  {
    "input": "Search for ISO images",
    "output": "locate '*.iso'"
  },
  {
    "input": "Find media files",
    "output": "locate '*.mp4'"
  },
  {
    "input": "Find old email archives",
    "output": "locate '*.mbox'"
  },
  {
    "input": "Locate Python site-packages",
    "output": "locate site-packages"
  },
  {
    "input": "Find Emacs config files",
    "output": "locate .emacs"
  },
  {
    "input": "Locate files inside Downloads directory",
    "output": "locate Downloads"
  },
  {
    "input": "Locate files inside /usr/share",
    "output": "locate /usr/share"
  },
  {
    "input": "Find scripts named run.sh",
    "output": "locate run.sh"
  },
  {
    "input": "Locate tar archives",
    "output": "locate '*.tar'"
  },
  {
    "input": "Search for missing.txt",
    "output": "locate missing.txt"
  },
  {
    "input": "Find hidden files in home directory",
    "output": "locate /home/.*"
  },
  {
    "input": "Locate all docx documents",
    "output": "locate '*.docx'"
  },
  {
    "input": "Search for files in Pictures folder",
    "output": "locate Pictures"
  },
  {
    "input": "Find any tmp folder",
    "output": "locate /tmp"
  },
  {
    "input": "Locate firewall settings file",
    "output": "locate firewalld.conf"
  },
  {
    "input": "Find a copy of python3",
    "output": "locate python3"
  },
  {
    "input": "Locate music files",
    "output": "locate '*.mp3'"
  },
  {
    "input": "Find video files",
    "output": "locate '*.mkv'"
  },
  {
    "input": "Locate USB device mounts",
    "output": "locate /media"
  },
  {
    "input": "Find backup.tar.gz",
    "output": "locate backup.tar.gz"
  },
  {
    "input": "Locate jupyter notebooks",
    "output": "locate '*.ipynb'"
  },
  {
    "input": "Search for pdfs in Documents folder",
    "output": "locate /Documents/*.pdf"
  },
  {
    "input": "Locate VSCode settings",
    "output": "locate settings.json"
  },
  {
    "input": "Search for images in Pictures",
    "output": "locate /Pictures/*.png"
  },
  {
    "input": "Find config files in /opt",
    "output": "locate /opt/*.conf"
  },
  {
    "input": "Locate all .ini files",
    "output": "locate '*.ini'"
  },
  {
    "input": "Locate javac binary",
    "output": "locate javac"
  },
  {
    "input": "Search for bin folder",
    "output": "locate /bin"
  },
  {
    "input": "Find mounted drives",
    "output": "locate /mnt"
  },
  {
    "input": "Locate VLC media player files",
    "output": "locate vlc"
  },
  {
    "input": "Find gnome config files",
    "output": "locate gnome"
  },
  {
    "input": "Find system logs",
    "output": "locate syslog"
  },
  {
    "input": "Locate network interfaces file",
    "output": "locate interfaces"
  },
  {
    "input": "Search for font files",
    "output": "locate '*.ttf'"
  },
  {
    "input": "Find USB rules configuration",
    "output": "locate *.rules"
  },
  {
    "input": "Locate cron.d files",
    "output": "locate /etc/cron.d"
  },
  {
    "input": "Search for files in Desktop folder",
    "output": "locate Desktop"
  },
  {
    "input": "Find Firefox user data",
    "output": "locate firefox"
  },
  {
    "input": "Search for files named LICENSE",
    "output": "locate LICENSE"
  },
  {
    "input": "Replace the word 'apple' with 'orange' in fruits.txt",
    "output": "sed 's/apple/orange/g' fruits.txt"
  },
  {
    "input": "Delete all blank lines from notes.txt",
    "output": "sed '/^$/d' notes.txt"
  },
  {
    "input": "Replace 'cat' with 'dog' only in the first occurrence per line",
    "output": "sed 's/cat/dog/' animals.txt"
  },
  {
    "input": "Remove the first line of the file",
    "output": "sed '1d' file.txt"
  },
  {
    "input": "Print only lines 3 to 7 of data.txt",
    "output": "sed -n '3,7p' data.txt"
  },
  {
    "input": "Insert 'Hello' before every line",
    "output": "sed 's/^/Hello /' file.txt"
  },
  {
    "input": "Append 'World' after each line",
    "output": "sed 's/$/ World/' file.txt"
  },
  {
    "input": "Change the third line to 'REPLACED'",
    "output": "sed '3c\\REPLACED' file.txt"
  },
  {
    "input": "Delete line 10",
    "output": "sed '10d' file.txt"
  },
  {
    "input": "Replace all digits with '#' in a file",
    "output": "sed 's/[0-9]/#/g' file.txt"
  },
  {
    "input": "Delete lines that start with #",
    "output": "sed '/^#/d' config.txt"
  },
  {
    "input": "Convert lowercase to uppercase for 'name'",
    "output": "sed 's/name/NAME/g' file.txt"
  },
  {
    "input": "Replace tab with comma",
    "output": "sed 's/\\t/,/g' file.txt"
  },
  {
    "input": "Double space every line",
    "output": "sed G file.txt"
  },
  {
    "input": "Replace only the second occurrence of 'a' with 'A'",
    "output": "sed 's/a/A/2' file.txt"
  },
  {
    "input": "Remove all non-alphanumeric characters",
    "output": "sed 's/[^a-zA-Z0-9]//g' file.txt"
  },
  {
    "input": "Change the last line to 'End of file'",
    "output": "sed '$c\\End of file' file.txt"
  },
  {
    "input": "Insert a line before line 2",
    "output": "sed '2i\\Inserted line' file.txt"
  },
  {
    "input": "Append a line after line 3",
    "output": "sed '3a\\Appended line' file.txt"
  },
  {
    "input": "Delete all lines containing 'error'",
    "output": "sed '/error/d' log.txt"
  },
  {
    "input": "Remove spaces from beginning of lines",
    "output": "sed 's/^ *//' file.txt"
  },
  {
    "input": "Remove spaces from end of lines",
    "output": "sed 's/ *$//' file.txt"
  },
  {
    "input": "Keep only lines that contain 'pass'",
    "output": "sed -n '/pass/p' file.txt"
  },
  {
    "input": "Comment out all lines",
    "output": "sed 's/^/#/' file.txt"
  },
  {
    "input": "Uncomment all lines that start with #",
    "output": "sed 's/^#//' file.txt"
  },
  {
    "input": "Replace all 'foo' with 'bar' in-place",
    "output": "sed -i 's/foo/bar/g' file.txt"
  },
  {
    "input": "Replace only on lines starting with 'Error'",
    "output": "sed '/^Error/s/fail/success/' file.txt"
  },
  {
    "input": "Convert commas to tabs",
    "output": "sed 's/,/\\t/g' file.csv"
  },
  {
    "input": "Insert blank line after every line",
    "output": "sed G file.txt"
  },
  {
    "input": "Number all lines",
    "output": "sed = file.txt | sed 'N;s/\\n/ /'"
  },
  {
    "input": "Add semicolon at the end of each line",
    "output": "sed 's/$/;/' file.txt"
  },
  {
    "input": "Replace 'Jan' with 'January'",
    "output": "sed 's/Jan/January/g' calendar.txt"
  },
  {
    "input": "Delete lines 5 through 10",
    "output": "sed '5,10d' file.txt"
  },
  {
    "input": "Keep only the first line",
    "output": "sed -n '1p' file.txt"
  },
  {
    "input": "Capitalize the word 'hello'",
    "output": "sed 's/hello/HELLO/g' file.txt"
  },
  {
    "input": "Surround each word 'user' with quotes",
    "output": "sed 's/user/\"user\"/g' file.txt"
  },
  {
    "input": "Change every instance of 'on' to 'off'",
    "output": "sed 's/on/off/g' config.txt"
  },
  {
    "input": "Trim trailing whitespace",
    "output": "sed 's/[ \t]*$//' file.txt"
  },
  {
    "input": "Trim leading whitespace",
    "output": "sed 's/^[ \t]*//' file.txt"
  },
  {
    "input": "Replace multiple spaces with a single space",
    "output": "sed 's/  */ /g' file.txt"
  },
  {
    "input": "Comment out lines starting with 'option'",
    "output": "sed '/^option/s/^/#/' file.txt"
  },
  {
    "input": "Add line numbers with colon",
    "output": "sed = file.txt | sed 'N;s/\\n/: /'"
  },
  {
    "input": "Replace the first word on each line with 'REPLACED'",
    "output": "sed 's/^\\S\\+/REPLACED/' file.txt"
  },
  {
    "input": "Delete duplicate lines",
    "output": "sed '$!N; /\\n.*\\n/!P; D' file.txt"
  },
  {
    "input": "Remove all punctuation",
    "output": "sed 's/[[:punct:]]//g' file.txt"
  },
  {
    "input": "Add 'Line:' at the beginning of each line",
    "output": "sed 's/^/Line: /' file.txt"
  },
  {
    "input": "Replace all uppercase letters with lowercase",
    "output": "sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' file.txt"
  },
  {
    "input": "Replace all lowercase letters with uppercase",
    "output": "sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' file.txt"
  },
  {
    "input": "Keep only lines that do not contain numbers",
    "output": "sed -n '/[^0-9]/p' file.txt"
  },
  {
    "input": "Remove everything after the first space in each line",
    "output": "sed 's/ .*//' file.txt"
  },
  {
    "input": "Keep only lines that contain '@gmail.com'",
    "output": "sed -n '/@gmail\\.com/p' emails.txt"
  },
  {
    "input": "Replace 'yes' with 'no' only on odd-numbered lines",
    "output": "sed '1~2s/yes/no/g' file.txt"
  },
  {
    "input": "Replace first and last character on each line with '*'",
    "output": "sed -E 's/^(.).*(.)$/\\*/' file.txt"
  },
  {
    "input": "Surround whole line with brackets",
    "output": "sed 's/.*/[&]/' file.txt"
  },
  {
    "input": "Replace 'user1' or 'user2' with 'admin'",
    "output": "sed 's/user[12]/admin/g' file.txt"
  },
  {
    "input": "Duplicate each line",
    "output": "sed 'p' file.txt"
  },
  {
    "input": "Insert a tab at the start of each line",
    "output": "sed 's/^/\\t/' file.txt"
  },
  {
    "input": "Replace newlines with commas",
    "output": "sed ':a;N;$!ba;s/\\n/,/g' file.txt"
  },
  {
    "input": "Show only lines containing '404'",
    "output": "sed -n '/404/p' access.log"
  },
  {
    "input": "Replace words with 3 letters with 'xxx'",
    "output": "sed -E 's/\\b\\w{3}\\b/xxx/g' file.txt"
  },
  {
    "input": "Insert timestamp after each line",
    "output": "sed 's/$/ $(date)/' file.txt"
  },
  {
    "input": "Replace multiple tabs with one tab",
    "output": "sed 's/\\t\\+/\t/g' file.txt"
  },
  {
    "input": "Only print lines ending with semicolon",
    "output": "sed -n '/;$/p' file.txt"
  },
  {
    "input": "Escape all double quotes",
    "output": "sed 's/\"/\\\"/g' file.txt"
  },
  {
    "input": "Remove trailing slashes",
    "output": "sed 's/\\/$//' paths.txt"
  },
  {
    "input": "Convert IPv4 address dots to underscores",
    "output": "sed 's/\\./_/g' ips.txt"
  },
  {
    "input": "Insert '[INFO]' at start of each line",
    "output": "sed 's/^/[INFO] /' log.txt"
  },
  {
    "input": "Show lines that start and end with same letter",
    "output": "sed -n '/^\\(\\w\\)\\(.*\\)\\1$/p' file.txt"
  },
  {
    "input": "Delete all HTML tags",
    "output": "sed 's/<[^>]*>//g' file.html"
  },
  {
    "input": "Add a comma after every number",
    "output": "sed 's/[0-9]\\+/&,/g' file.txt"
  },
  {
    "input": "Show disk space usage for all mounted filesystems",
    "output": "df"
  },
  {
    "input": "Display disk usage in human-readable format",
    "output": "df -h"
  },
  {
    "input": "Show disk usage in megabytes",
    "output": "df -m"
  },
  {
    "input": "Show disk usage in gigabytes",
    "output": "df -BG"
  },
  {
    "input": "Show disk usage in 1K blocks",
    "output": "df -k"
  },
  {
    "input": "Show disk usage in bytes",
    "output": "df -B1"
  },
  {
    "input": "Show disk usage for a specific directory",
    "output": "df /home"
  },
  {
    "input": "Show disk usage for a specific device",
    "output": "df /dev/sda1"
  },
  {
    "input": "Show disk usage for all filesystems including dummy filesystems",
    "output": "df -a"
  },
  {
    "input": "Show disk usage for all filesystems in human-readable format",
    "output": "df -ah"
  },
  {
    "input": "Show disk usage for all filesystems in POSIX format",
    "output": "df -P"
  },
  {
    "input": "Show disk usage for all filesystems in human-readable POSIX format",
    "output": "df -Ph"
  },
  {
    "input": "Show disk usage for all filesystems with filesystem type",
    "output": "df -T"
  },
  {
    "input": "Show disk usage for all filesystems with type in human-readable format",
    "output": "df -hT"
  },
  {
    "input": "Show inode usage for all filesystems",
    "output": "df -i"
  },
  {
    "input": "Show inode usage in human-readable format",
    "output": "df -ih"
  },
  {
    "input": "Show disk usage for filesystems of type ext4",
    "output": "df -t ext4"
  },
  {
    "input": "Show disk usage for filesystems of type xfs",
    "output": "df -t xfs"
  },
  {
    "input": "Show disk usage for filesystems of type nfs",
    "output": "df -t nfs"
  },
  {
    "input": "Show disk usage excluding tmpfs filesystems",
    "output": "df -x tmpfs"
  },
  {
    "input": "Show disk usage excluding devtmpfs filesystems",
    "output": "df -x devtmpfs"
  },
  {
    "input": "Show disk usage for all filesystems, sorted by usage percentage",
    "output": "df -h | sort -k 5 -h"
  },
  {
    "input": "Show disk usage for all filesystems, sorted by available space",
    "output": "df -h | sort -k 4 -h"
  },
  {
    "input": "Show disk usage for all filesystems, sorted by mount point",
    "output": "df -h | sort -k 6"
  },
  {
    "input": "Show disk usage for all filesystems, sorted by filesystem name",
    "output": "df -h | sort -k 1"
  },
  {
    "input": "Show disk usage for all filesystems, filter for usage above 80%",
    "output": "df -h | awk '$5+0 > 80'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for usage below 20%",
    "output": "df -h | awk '$5+0 < 20'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for /dev/sda* devices",
    "output": "df -h | grep '/dev/sda'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for /home mount point",
    "output": "df -h | grep '/home'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for ext4 filesystems",
    "output": "df -hT | grep 'ext4'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for nfs filesystems",
    "output": "df -hT | grep 'nfs'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for filesystems with less than 1G available",
    "output": "df -h | awk '$4 ~ /G/ && $4+0 < 1'"
  },
  {
    "input": "Show disk usage for all filesystems, filter for filesystems with more than 10G available",
    "output": "df -h | awk '$4 ~ /G/ && $4+0 > 10'"
  },
  {
    "input": "Show disk usage for all filesystems, display only the available space",
    "output": "df -h --output=avail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the used space",
    "output": "df -h --output=used"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and mount point",
    "output": "df -h --output=source,target"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem type and usage percentage",
    "output": "df -h --output=fstype,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display all available columns",
    "output": "df -h --output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,target"
  },
  {
    "input": "Show disk usage for all filesystems, display only the mount point and available space",
    "output": "df -h --output=target,avail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and type",
    "output": "df -h --output=source,fstype"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and usage percentage",
    "output": "df -h --output=source,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the mount point and usage percentage",
    "output": "df -h --output=target,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and available space",
    "output": "df -h --output=source,avail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and used space",
    "output": "df -h --output=source,used"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and total size",
    "output": "df -h --output=source,size"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and inode usage",
    "output": "df -h --output=source,ipcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and total inodes",
    "output": "df -h --output=source,itotal"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and used inodes",
    "output": "df -h --output=source,iused"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and available inodes",
    "output": "df -h --output=source,iavail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem and mount point",
    "output": "df -h --output=source,target"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and mount point",
    "output": "df -h --output=source,fstype,target"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, size, and usage percentage",
    "output": "df -h --output=source,size,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, used, and available space",
    "output": "df -h --output=source,used,avail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, used, available, and usage percentage",
    "output": "df -h --output=source,used,avail,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and usage percentage",
    "output": "df -h --output=source,fstype,pcent"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and available space",
    "output": "df -h --output=source,fstype,avail"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and used space",
    "output": "df -h --output=source,fstype,used"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and total size",
    "output": "df -h --output=source,fstype,size"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and mount point",
    "output": "df -h --output=source,fstype,target"
  },
  {
    "input": "Show disk usage for all filesystems, display only the filesystem, type, and inode usage",
    "output": "df -h --output=source,fstype,ipcent"
  },
  {
    "input": "Display disk usage of the current directory",
    "output": "du"
  },
  {
    "input": "Display disk usage of a specific file",
    "output": "du file.txt"
  },
  {
    "input": "Display disk usage of a specific directory",
    "output": "du /var/lib"
  },
  {
    "input": "Display disk usage in human-readable format",
    "output": "du -h"
  },
  {
    "input": "Display disk usage in human-readable format for /home",
    "output": "du -h /home"
  },
  {
    "input": "Display disk usage in kilobytes",
    "output": "du -k"
  },
  {
    "input": "Display disk usage in megabytes",
    "output": "du -m"
  },
  {
    "input": "Display disk usage in 512-byte blocks",
    "output": "du -b"
  },
  {
    "input": "Display disk usage in apparent size",
    "output": "du --apparent-size"
  },
  {
    "input": "Display disk usage for multiple directories",
    "output": "du ~/Documents ~/Pictures ~/.zshrc"
  },
  {
    "input": "Summarize total disk usage for each argument",
    "output": "du -s /var /etc"
  },
  {
    "input": "Display total disk usage for a directory and its contents",
    "output": "du -c /var"
  },
  {
    "input": "Display disk usage for all files and directories including hidden ones",
    "output": "du -a"
  },
  {
    "input": "Display disk usage for all files and directories in human-readable format",
    "output": "du -ah"
  },
  {
    "input": "Display total disk usage in human-readable format",
    "output": "du -ch"
  },
  {
    "input": "Display disk usage for all files and directories up to depth 1",
    "output": "du -d 1"
  },
  {
    "input": "Display disk usage for all files and directories up to depth 2",
    "output": "du -d 2"
  },
  {
    "input": "Display disk usage for /home up to 1 level deep in human-readable format",
    "output": "du -h --max-depth=1 /home"
  },
  {
    "input": "Display disk usage for /var/lib up to 2 levels deep",
    "output": "du -d 2 /var/lib"
  },
  {
    "input": "Display disk usage for /tmp up to 3 levels deep",
    "output": "du --max-depth=3 /tmp"
  },
  {
    "input": "Display only the total disk usage for /var",
    "output": "du -sh /var"
  },
  {
    "input": "Display disk usage for all files in /etc",
    "output": "du -a /etc"
  },
  {
    "input": "Display disk usage for all files in /etc in human-readable format",
    "output": "du -ah /etc"
  },
  {
    "input": "Display disk usage for all files in /etc up to depth 1",
    "output": "du -a --max-depth=1 /etc"
  },
  {
    "input": "Display disk usage for all files in /etc up to depth 2",
    "output": "du -a --max-depth=2 /etc"
  },
  {
    "input": "Display disk usage for all files in /etc, excluding .log files",
    "output": "du -a --exclude=\"*.log\" /etc"
  },
  {
    "input": "Display disk usage for all files in /var, excluding backup directory",
    "output": "du -a --exclude=\"/var/backup\" /var"
  },
  {
    "input": "Display disk usage in human-readable format, excluding .tmp files",
    "output": "du -ah --exclude=\"*.tmp\""
  },
  {
    "input": "Display disk usage in human-readable format, excluding /tmp directory",
    "output": "du -ah --exclude=\"/tmp\""
  },
  {
    "input": "Display disk usage with last modification time",
    "output": "du --time"
  },
  {
    "input": "Display disk usage with last modification time in human-readable format",
    "output": "du --time -h"
  },
  {
    "input": "Display disk usage with last access time",
    "output": "du --time=atime"
  },
  {
    "input": "Display disk usage with last change time",
    "output": "du --time=ctime"
  },
  {
    "input": "Display disk usage with last modification time in full-iso format",
    "output": "du --time --time-style=full-iso"
  },
  {
    "input": "Display disk usage with last access time in custom format",
    "output": "du --time=atime --time-style=+%Y-%m-%d"
  },
  {
    "input": "Display disk usage for files larger than 1MB",
    "output": "du --threshold=1M"
  },
  {
    "input": "Display disk usage for files smaller than 100K",
    "output": "du --threshold=-100K"
  },
  {
    "input": "Display disk usage for files larger than 1GB in /var",
    "output": "du --threshold=1G /var"
  },
  {
    "input": "Display disk usage for files smaller than 10K in /etc",
    "output": "du --threshold=-10K /etc"
  },
  {
    "input": "Display disk usage in human-readable format for files larger than 500M",
    "output": "du -h --threshold=500M"
  },
  {
    "input": "Display disk usage in bytes",
    "output": "du -b"
  },
  {
    "input": "Display disk usage in kilobytes for /usr",
    "output": "du -k /usr"
  },
  {
    "input": "Display disk usage in megabytes for /var",
    "output": "du -m /var"
  },
  {
    "input": "Display disk usage in gigabytes for /opt",
    "output": "du -BG /opt"
  },
  {
    "input": "Display disk usage in blocks of 512 bytes",
    "output": "du -B 512"
  },
  {
    "input": "Display disk usage in blocks of 4K",
    "output": "du -B 4K"
  },
  {
    "input": "Display disk usage in blocks of 1M",
    "output": "du -B 1M"
  },
  {
    "input": "Display disk usage in blocks of 1G",
    "output": "du -B 1G"
  },
  {
    "input": "Display disk usage for all files and directories, including hidden ones, in kilobytes",
    "output": "du -ak"
  },
  {
    "input": "Display disk usage for all files and directories, including hidden ones, in megabytes",
    "output": "du -am"
  },
  {
    "input": "Display disk usage for all files and directories, including hidden ones, in human-readable format",
    "output": "du -ah"
  },
  {
    "input": "Display disk usage for all files and directories, including hidden ones, in bytes",
    "output": "du -ab"
  },
  {
    "input": "Display only the grand total for /var",
    "output": "du -shc /var"
  },
  {
    "input": "Display disk usage for all files and directories, sorted by size",
    "output": "du -ah | sort -h"
  },
  {
    "input": "Display disk usage for all files and directories, sorted in reverse order by size",
    "output": "du -ah | sort -hr"
  },
  {
    "input": "Display the 10 largest directories in /home",
    "output": "du -h /home | sort -hr | head -10"
  },
  {
    "input": "Display the 10 smallest directories in /home",
    "output": "du -h /home | sort -h | head -10"
  },
  {
    "input": "Display disk usage for all directories in /var, excluding /var/log",
    "output": "du -h --exclude=\"/var/log\" /var"
  },
  {
    "input": "Display disk usage for all directories in /etc, excluding *.conf files",
    "output": "du -h --exclude=\"*.conf\" /etc"
  },
  {
    "input": "Display disk usage for all directories in /usr, excluding *.so files",
    "output": "du -h --exclude=\"*.so\" /usr"
  },
  {
    "input": "Display disk usage for all directories in /opt, excluding backup directories",
    "output": "du -h --exclude=\"*/backup\" /opt"
  },
  {
    "input": "Display disk usage for all directories in /tmp, excluding temp files",
    "output": "du -h --exclude=\"*.tmp\" /tmp"
  },
  {
    "input": "Display disk usage for all files in /home, excluding .cache directories",
    "output": "du -h --exclude=\".cache\" /home"
  },
  {
    "input": "Display disk usage for all files in /root, excluding .ssh directories",
    "output": "du -h --exclude=\".ssh\" /root"
  },
  {
    "input": "Display disk usage for all files in /srv, excluding .git directories",
    "output": "du -h --exclude=\".git\" /srv"
  },
  {
    "input": "Display disk usage for all files in /var, excluding .bak files",
    "output": "du -h --exclude=\"*.bak\" /var"
  },
  {
    "input": "Display disk usage for all files in /etc, excluding README files",
    "output": "du -h --exclude=\"README*\" /etc"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /var/log",
    "output": "du -h --max-depth=1 /var/log"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /usr/local",
    "output": "du -h --max-depth=1 /usr/local"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /opt",
    "output": "du -h --max-depth=1 /opt"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /tmp",
    "output": "du -h --max-depth=1 /tmp"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /srv",
    "output": "du -h --max-depth=1 /srv"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /home",
    "output": "du -h --max-depth=1 /home"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /root",
    "output": "du -h --max-depth=1 /root"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /etc",
    "output": "du -h --max-depth=1 /etc"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /bin",
    "output": "du -h --max-depth=1 /bin"
  },
  {
    "input": "Display disk usage summary for each subdirectory in /sbin",
    "output": "du -h --max-depth=1 /sbin"
  },
  {
    "input": "Display disk usage for all files and directories, following symlinks",
    "output": "du -L"
  },
  {
    "input": "Display disk usage for all files and directories, not following symlinks",
    "output": "du -P"
  },
  {
    "input": "Display disk usage for all files and directories, counting hard links",
    "output": "du -l"
  },
  {
    "input": "Display disk usage for all files and directories, displaying inode usage",
    "output": "du --inodes"
  },
  {
    "input": "Display disk usage for all files and directories, showing null-terminated output",
    "output": "du -0"
  },
  {
    "input": "Display disk usage for all files and directories, skipping directories on a different filesystem",
    "output": "du -x"
  },
  {
    "input": "Display disk usage for all files and directories, using SI units",
    "output": "du --si"
  },
  {
    "input": "Display disk usage for all files and directories, skipping subdirectory sizes in parent",
    "output": "du -S"
  },
  {
    "input": "Display disk usage for all files and directories, excluding files listed in a file",
    "output": "du -X exclude-list.txt"
  },
  {
    "input": "Display disk usage for all files and directories, excluding files matching a pattern",
    "output": "du --exclude=\"*.log\""
  },
  {
    "input": "Display disk usage for all files and directories, excluding directories matching a pattern",
    "output": "du --exclude=\"/tmp/*\""
  },
  {
    "input": "Display disk usage for all files and directories, excluding files and directories matching multiple patterns",
    "output": "du --exclude=\"*.log\" --exclude=\"*.tmp\""
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2M",
    "output": "du -B 2M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 100K",
    "output": "du -B 100K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 10G",
    "output": "du -B 10G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1T",
    "output": "du -B 1T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 500",
    "output": "du -B 500"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64K",
    "output": "du -B 64K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256M",
    "output": "du -B 256M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 5G",
    "output": "du -B 5G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 128K",
    "output": "du -B 128K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 32M",
    "output": "du -B 32M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 8G",
    "output": "du -B 8G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 4T",
    "output": "du -B 4T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 16K",
    "output": "du -B 16K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 512K",
    "output": "du -B 512K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2G",
    "output": "du -B 2G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64M",
    "output": "du -B 64M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256G",
    "output": "du -B 256G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1P",
    "output": "du -B 1P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 128M",
    "output": "du -B 128M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 32K",
    "output": "du -B 32K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 8M",
    "output": "du -B 8M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 4G",
    "output": "du -B 4G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 16M",
    "output": "du -B 16M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 512M",
    "output": "du -B 512M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2T",
    "output": "du -B 2T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64G",
    "output": "du -B 64G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256K",
    "output": "du -B 256K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1E",
    "output": "du -B 1E"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 128K",
    "output": "du -B 128K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 32G",
    "output": "du -B 32G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 8K",
    "output": "du -B 8K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 4M",
    "output": "du -B 4M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 16G",
    "output": "du -B 16G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 512G",
    "output": "du -B 512G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2P",
    "output": "du -B 2P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64K",
    "output": "du -B 64K"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256M",
    "output": "du -B 256M"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1Y",
    "output": "du -B 1Y"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 128G",
    "output": "du -B 128G"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 32T",
    "output": "du -B 32T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 8T",
    "output": "du -B 8T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 4P",
    "output": "du -B 4P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 16T",
    "output": "du -B 16T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 512T",
    "output": "du -B 512T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2E",
    "output": "du -B 2E"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64T",
    "output": "du -B 64T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256T",
    "output": "du -B 256T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1Z",
    "output": "du -B 1Z"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 128T",
    "output": "du -B 128T"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 32P",
    "output": "du -B 32P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 8P",
    "output": "du -B 8P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 4E",
    "output": "du -B 4E"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 16P",
    "output": "du -B 16P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 512P",
    "output": "du -B 512P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 2Z",
    "output": "du -B 2Z"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 64P",
    "output": "du -B 64P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 256P",
    "output": "du -B 256P"
  },
  {
    "input": "Display disk usage for all files and directories, using block size of 1Q",
    "output": "du -B 1Q"
  },
  {
    "input": "Display help for du command",
    "output": "du --help"
  },
  {
    "input": "Display version information for du command",
    "output": "du --version"
  },
  {
    "input": "Display all memory information in kibibytes (default)",
    "output": "free"
  },
  {
    "input": "Display memory usage in human-readable format",
    "output": "free -h"
  },
  {
    "input": "Display memory usage in bytes",
    "output": "free -b"
  },
  {
    "input": "Display memory usage in kilobytes",
    "output": "free -k"
  },
  {
    "input": "Display memory usage in megabytes",
    "output": "free -m"
  },
  {
    "input": "Display memory usage in gigabytes",
    "output": "free -g"
  },
  {
    "input": "Display memory usage in terabytes",
    "output": "free --tera"
  },
  {
    "input": "Display memory usage in pebibytes",
    "output": "free --pebi"
  },
  {
    "input": "Display memory usage in tebibytes",
    "output": "free --tebi"
  },
  {
    "input": "Display memory usage in mebibytes with SI units",
    "output": "free --mebi --si"
  },
  {
    "input": "Display total memory (RAM + swap) in human-readable format",
    "output": "free -h -t"
  },
  {
    "input": "Continuously display memory usage every 5 seconds",
    "output": "free -s 5"
  },
  {
    "input": "Continuously display memory usage every 2 seconds, 4 times",
    "output": "free -s 2 -c 4"
  },
  {
    "input": "Display memory usage with old format (no -/+ buffers/cache line)",
    "output": "free -o"
  },
  {
    "input": "Display detailed low and high memory statistics",
    "output": "free -l"
  },
  {
    "input": "Display memory usage with wide output (separate buffers and cache)",
    "output": "free -w"
  },
  {
    "input": "Display memory usage in bytes with total",
    "output": "free -b -t"
  },
  {
    "input": "Display memory usage in kilobytes with total",
    "output": "free -k -t"
  },
  {
    "input": "Display memory usage in megabytes with total",
    "output": "free -m -t"
  },
  {
    "input": "Display memory usage in gigabytes with total",
    "output": "free -g -t"
  },
  {
    "input": "Display memory usage in human-readable format, update every 3 seconds, 5 times",
    "output": "free -h -s 3 -c 5"
  },
  {
    "input": "Display memory usage in megabytes, update every 1 second, 10 times",
    "output": "free -m -s 1 -c 10"
  },
  {
    "input": "Display memory usage in gigabytes, update every 10 seconds, 3 times",
    "output": "free -g -s 10 -c 3"
  },
  {
    "input": "Display memory usage in human-readable format, update every 5 seconds indefinitely",
    "output": "free -h -s 5"
  },
  {
    "input": "Display memory usage in bytes, update every 2 seconds indefinitely",
    "output": "free -b -s 2"
  },
  {
    "input": "Display memory usage in kilobytes, update every 4 seconds indefinitely",
    "output": "free -k -s 4"
  },
  {
    "input": "Display memory usage in megabytes, update every 6 seconds indefinitely",
    "output": "free -m -s 6"
  },
  {
    "input": "Display memory usage in gigabytes, update every 8 seconds indefinitely",
    "output": "free -g -s 8"
  },
  {
    "input": "Display memory usage with total, update every 5 seconds indefinitely",
    "output": "free -t -s 5"
  },
  {
    "input": "Display memory usage with total, update every 3 seconds, 7 times",
    "output": "free -t -s 3 -c 7"
  },
  {
    "input": "Display memory usage with old format and total",
    "output": "free -o -t"
  },
  {
    "input": "Display memory usage with detailed low and high memory stats and total",
    "output": "free -l -t"
  },
  {
    "input": "Display memory usage with wide output and total",
    "output": "free -w -t"
  },
  {
    "input": "Display memory usage in human-readable format, no buffers/cache line",
    "output": "free -h -o"
  },
  {
    "input": "Display memory usage in megabytes, no buffers/cache line",
    "output": "free -m -o"
  },
  {
    "input": "Display memory usage in gigabytes, no buffers/cache line",
    "output": "free -g -o"
  },
  {
    "input": "Display memory usage in bytes, no buffers/cache line",
    "output": "free -b -o"
  },
  {
    "input": "Display memory usage in kilobytes, no buffers/cache line",
    "output": "free -k -o"
  },
  {
    "input": "Display memory usage in human-readable format, detailed low and high memory stats",
    "output": "free -h -l"
  },
  {
    "input": "Display memory usage in megabytes, detailed low and high memory stats",
    "output": "free -m -l"
  },
  {
    "input": "Display memory usage in gigabytes, detailed low and high memory stats",
    "output": "free -g -l"
  },
  {
    "input": "Display memory usage in bytes, detailed low and high memory stats",
    "output": "free -b -l"
  },
  {
    "input": "Display memory usage in kilobytes, detailed low and high memory stats",
    "output": "free -k -l"
  },
  {
    "input": "Display memory usage in human-readable format, wide output",
    "output": "free -h -w"
  },
  {
    "input": "Display memory usage in megabytes, wide output",
    "output": "free -m -w"
  },
  {
    "input": "Display memory usage in gigabytes, wide output",
    "output": "free -g -w"
  },
  {
    "input": "Display memory usage in bytes, wide output",
    "output": "free -b -w"
  },
  {
    "input": "Display memory usage in kilobytes, wide output",
    "output": "free -k -w"
  },
  {
    "input": "Display memory usage in bytes, update every 1 second, 2 times",
    "output": "free -b -s 1 -c 2"
  },
  {
    "input": "Display memory usage in bytes, update every 5 seconds, 5 times",
    "output": "free -b -s 5 -c 5"
  },
  {
    "input": "Display memory usage in kilobytes, update every 10 seconds, 2 times",
    "output": "free -k -s 10 -c 2"
  },
  {
    "input": "Display memory usage in megabytes, update every 1 second, 5 times",
    "output": "free -m -s 1 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes, update every 5 seconds, 2 times",
    "output": "free -g -s 5 -c 2"
  },
  {
    "input": "Display memory usage in human-readable format, update every 10 seconds, 5 times",
    "output": "free -h -s 10 -c 5"
  },
  {
    "input": "Display memory usage in bytes with old format, update every 2 seconds, 4 times",
    "output": "free -b -o -s 2 -c 4"
  },
  {
    "input": "Display memory usage in kilobytes with detailed stats, update every 3 seconds, 3 times",
    "output": "free -k -l -s 3 -c 3"
  },
  {
    "input": "Display memory usage in megabytes with wide output, update every 4 seconds, 2 times",
    "output": "free -m -w -s 4 -c 2"
  },
  {
    "input": "Display memory usage in gigabytes with total, update every 5 seconds, 6 times",
    "output": "free -g -t -s 5 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with old format, update every 7 seconds, 7 times",
    "output": "free -h -o -s 7 -c 7"
  },
  {
    "input": "Display memory usage in bytes with detailed stats and total, update every 8 seconds, 8 times",
    "output": "free -b -l -t -s 8 -c 8"
  },
  {
    "input": "Display memory usage in kilobytes with wide output and total, update every 9 seconds, 9 times",
    "output": "free -k -w -t -s 9 -c 9"
  },
  {
    "input": "Display memory usage in megabytes with old format and total, update every 2 seconds, 2 times",
    "output": "free -m -o -t -s 2 -c 2"
  },
  {
    "input": "Display memory usage in gigabytes with detailed stats and total, update every 3 seconds, 3 times",
    "output": "free -g -l -t -s 3 -c 3"
  },
  {
    "input": "Display memory usage in human-readable format with wide output and total, update every 4 seconds, 4 times",
    "output": "free -h -w -t -s 4 -c 4"
  },
  {
    "input": "Display memory usage in bytes with old format and detailed stats, update every 5 seconds, 5 times",
    "output": "free -b -o -l -s 5 -c 5"
  },
  {
    "input": "Display memory usage in kilobytes with wide output and detailed stats, update every 6 seconds, 6 times",
    "output": "free -k -w -l -s 6 -c 6"
  },
  {
    "input": "Display memory usage in megabytes with old format and wide output, update every 7 seconds, 7 times",
    "output": "free -m -o -w -s 7 -c 7"
  },
  {
    "input": "Display memory usage in gigabytes with old format and detailed stats, update every 8 seconds, 8 times",
    "output": "free -g -o -l -s 8 -c 8"
  },
  {
    "input": "Display memory usage in human-readable format with detailed stats and wide output, update every 9 seconds, 9 times",
    "output": "free -h -l -w -s 9 -c 9"
  },
  {
    "input": "Display memory usage in bytes with all options, update every 10 seconds, 10 times",
    "output": "free -b -o -l -w -t -s 10 -c 10"
  },
  {
    "input": "Display memory usage in kilobytes with all options, update every 11 seconds, 11 times",
    "output": "free -k -o -l -w -t -s 11 -c 11"
  },
  {
    "input": "Display memory usage in megabytes with all options, update every 12 seconds, 12 times",
    "output": "free -m -o -l -w -t -s 12 -c 12"
  },
  {
    "input": "Display memory usage in gigabytes with all options, update every 13 seconds, 13 times",
    "output": "free -g -o -l -w -t -s 13 -c 13"
  },
  {
    "input": "Display memory usage in human-readable format with all options, update every 14 seconds, 14 times",
    "output": "free -h -o -l -w -t -s 14 -c 14"
  },
  {
    "input": "Display memory usage in bytes, update every second indefinitely",
    "output": "free -b -s 1"
  },
  {
    "input": "Display memory usage in kilobytes, update every second indefinitely",
    "output": "free -k -s 1"
  },
  {
    "input": "Display memory usage in megabytes, update every second indefinitely",
    "output": "free -m -s 1"
  },
  {
    "input": "Display memory usage in gigabytes, update every second indefinitely",
    "output": "free -g -s 1"
  },
  {
    "input": "Display memory usage in human-readable format, update every second indefinitely",
    "output": "free -h -s 1"
  },
  {
    "input": "Display memory usage in bytes, update every 10 seconds indefinitely",
    "output": "free -b -s 10"
  },
  {
    "input": "Display memory usage in kilobytes, update every 10 seconds indefinitely",
    "output": "free -k -s 10"
  },
  {
    "input": "Display memory usage in megabytes, update every 10 seconds indefinitely",
    "output": "free -m -s 10"
  },
  {
    "input": "Display memory usage in gigabytes, update every 10 seconds indefinitely",
    "output": "free -g -s 10"
  },
  {
    "input": "Display memory usage in human-readable format, update every 10 seconds indefinitely",
    "output": "free -h -s 10"
  },
  {
    "input": "Display memory usage in bytes, update every 15 seconds indefinitely",
    "output": "free -b -s 15"
  },
  {
    "input": "Display memory usage in kilobytes, update every 15 seconds indefinitely",
    "output": "free -k -s 15"
  },
  {
    "input": "Display memory usage in megabytes, update every 15 seconds indefinitely",
    "output": "free -m -s 15"
  },
  {
    "input": "Display memory usage in gigabytes, update every 15 seconds indefinitely",
    "output": "free -g -s 15"
  },
  {
    "input": "Display memory usage in human-readable format, update every 15 seconds indefinitely",
    "output": "free -h -s 15"
  },
  {
    "input": "Display memory usage in bytes, update every 30 seconds indefinitely",
    "output": "free -b -s 30"
  },
  {
    "input": "Display memory usage in kilobytes, update every 30 seconds indefinitely",
    "output": "free -k -s 30"
  },
  {
    "input": "Display memory usage in megabytes, update every 30 seconds indefinitely",
    "output": "free -m -s 30"
  },
  {
    "input": "Display memory usage in gigabytes, update every 30 seconds indefinitely",
    "output": "free -g -s 30"
  },
  {
    "input": "Display memory usage in human-readable format, update every 30 seconds indefinitely",
    "output": "free -h -s 30"
  },
  {
    "input": "Display memory usage in bytes with total, update every 5 seconds, 3 times",
    "output": "free -b -t -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with total, update every 10 seconds, 4 times",
    "output": "free -k -t -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with total, update every 15 seconds, 5 times",
    "output": "free -m -t -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with total, update every 20 seconds, 6 times",
    "output": "free -g -t -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with total, update every 25 seconds, 7 times",
    "output": "free -h -t -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with old format, update every 5 seconds, 3 times",
    "output": "free -b -o -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with old format, update every 10 seconds, 4 times",
    "output": "free -k -o -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with old format, update every 15 seconds, 5 times",
    "output": "free -m -o -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with old format, update every 20 seconds, 6 times",
    "output": "free -g -o -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with old format, update every 25 seconds, 7 times",
    "output": "free -h -o -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with detailed stats, update every 5 seconds, 3 times",
    "output": "free -b -l -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with detailed stats, update every 10 seconds, 4 times",
    "output": "free -k -l -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with detailed stats, update every 15 seconds, 5 times",
    "output": "free -m -l -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with detailed stats, update every 20 seconds, 6 times",
    "output": "free -g -l -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with detailed stats, update every 25 seconds, 7 times",
    "output": "free -h -l -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with wide output, update every 5 seconds, 3 times",
    "output": "free -b -w -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with wide output, update every 10 seconds, 4 times",
    "output": "free -k -w -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with wide output, update every 15 seconds, 5 times",
    "output": "free -m -w -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with wide output, update every 20 seconds, 6 times",
    "output": "free -g -w -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with wide output, update every 25 seconds, 7 times",
    "output": "free -h -w -s 25 -c 7"
  },
  {
    "input": "Display help for the free command",
    "output": "free --help"
  },
  {
    "input": "Display version information for the free command",
    "output": "free --version"
  },
  {
    "input": "Display all memory information in kibibytes (default)",
    "output": "free"
  },
  {
    "input": "Display memory usage in human-readable format",
    "output": "free -h"
  },
  {
    "input": "Display memory usage in bytes",
    "output": "free -b"
  },
  {
    "input": "Display memory usage in kilobytes",
    "output": "free -k"
  },
  {
    "input": "Display memory usage in megabytes",
    "output": "free -m"
  },
  {
    "input": "Display memory usage in gigabytes",
    "output": "free -g"
  },
  {
    "input": "Display memory usage in terabytes",
    "output": "free --tera"
  },
  {
    "input": "Display memory usage in pebibytes",
    "output": "free --pebi"
  },
  {
    "input": "Display memory usage in tebibytes",
    "output": "free --tebi"
  },
  {
    "input": "Display memory usage in mebibytes with SI units",
    "output": "free --mebi --si"
  },
  {
    "input": "Display total memory (RAM + swap) in human-readable format",
    "output": "free -h -t"
  },
  {
    "input": "Continuously display memory usage every 5 seconds",
    "output": "free -s 5"
  },
  {
    "input": "Continuously display memory usage every 2 seconds, 4 times",
    "output": "free -s 2 -c 4"
  },
  {
    "input": "Display memory usage with old format (no -/+ buffers/cache line)",
    "output": "free -o"
  },
  {
    "input": "Display detailed low and high memory statistics",
    "output": "free -l"
  },
  {
    "input": "Display memory usage with wide output (separate buffers and cache)",
    "output": "free -w"
  },
  {
    "input": "Display memory usage in bytes with total",
    "output": "free -b -t"
  },
  {
    "input": "Display memory usage in kilobytes with total",
    "output": "free -k -t"
  },
  {
    "input": "Display memory usage in megabytes with total",
    "output": "free -m -t"
  },
  {
    "input": "Display memory usage in gigabytes with total",
    "output": "free -g -t"
  },
  {
    "input": "Display memory usage in human-readable format, update every 3 seconds, 5 times",
    "output": "free -h -s 3 -c 5"
  },
  {
    "input": "Display memory usage in megabytes, update every 1 second, 10 times",
    "output": "free -m -s 1 -c 10"
  },
  {
    "input": "Display memory usage in gigabytes, update every 10 seconds, 3 times",
    "output": "free -g -s 10 -c 3"
  },
  {
    "input": "Display memory usage in human-readable format, update every 5 seconds indefinitely",
    "output": "free -h -s 5"
  },
  {
    "input": "Display memory usage in bytes, update every 2 seconds indefinitely",
    "output": "free -b -s 2"
  },
  {
    "input": "Display memory usage in kilobytes, update every 4 seconds indefinitely",
    "output": "free -k -s 4"
  },
  {
    "input": "Display memory usage in megabytes, update every 6 seconds indefinitely",
    "output": "free -m -s 6"
  },
  {
    "input": "Display memory usage in gigabytes, update every 8 seconds indefinitely",
    "output": "free -g -s 8"
  },
  {
    "input": "Display memory usage with total, update every 5 seconds indefinitely",
    "output": "free -t -s 5"
  },
  {
    "input": "Display memory usage with total, update every 3 seconds, 7 times",
    "output": "free -t -s 3 -c 7"
  },
  {
    "input": "Display memory usage with old format and total",
    "output": "free -o -t"
  },
  {
    "input": "Display memory usage with detailed low and high memory stats and total",
    "output": "free -l -t"
  },
  {
    "input": "Display memory usage with wide output and total",
    "output": "free -w -t"
  },
  {
    "input": "Display memory usage in human-readable format, no buffers/cache line",
    "output": "free -h -o"
  },
  {
    "input": "Display memory usage in megabytes, no buffers/cache line",
    "output": "free -m -o"
  },
  {
    "input": "Display memory usage in gigabytes, no buffers/cache line",
    "output": "free -g -o"
  },
  {
    "input": "Display memory usage in bytes, no buffers/cache line",
    "output": "free -b -o"
  },
  {
    "input": "Display memory usage in kilobytes, no buffers/cache line",
    "output": "free -k -o"
  },
  {
    "input": "Display memory usage in human-readable format, detailed low and high memory stats",
    "output": "free -h -l"
  },
  {
    "input": "Display memory usage in megabytes, detailed low and high memory stats",
    "output": "free -m -l"
  },
  {
    "input": "Display memory usage in gigabytes, detailed low and high memory stats",
    "output": "free -g -l"
  },
  {
    "input": "Display memory usage in bytes, detailed low and high memory stats",
    "output": "free -b -l"
  },
  {
    "input": "Display memory usage in kilobytes, detailed low and high memory stats",
    "output": "free -k -l"
  },
  {
    "input": "Display memory usage in human-readable format, wide output",
    "output": "free -h -w"
  },
  {
    "input": "Display memory usage in megabytes, wide output",
    "output": "free -m -w"
  },
  {
    "input": "Display memory usage in gigabytes, wide output",
    "output": "free -g -w"
  },
  {
    "input": "Display memory usage in bytes, wide output",
    "output": "free -b -w"
  },
  {
    "input": "Display memory usage in kilobytes, wide output",
    "output": "free -k -w"
  },
  {
    "input": "Display memory usage in bytes, update every 1 second, 2 times",
    "output": "free -b -s 1 -c 2"
  },
  {
    "input": "Display memory usage in bytes, update every 5 seconds, 5 times",
    "output": "free -b -s 5 -c 5"
  },
  {
    "input": "Display memory usage in kilobytes, update every 10 seconds, 2 times",
    "output": "free -k -s 10 -c 2"
  },
  {
    "input": "Display memory usage in megabytes, update every 1 second, 5 times",
    "output": "free -m -s 1 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes, update every 5 seconds, 2 times",
    "output": "free -g -s 5 -c 2"
  },
  {
    "input": "Display memory usage in human-readable format, update every 10 seconds, 5 times",
    "output": "free -h -s 10 -c 5"
  },
  {
    "input": "Display memory usage in bytes with old format, update every 2 seconds, 4 times",
    "output": "free -b -o -s 2 -c 4"
  },
  {
    "input": "Display memory usage in kilobytes with detailed stats, update every 3 seconds, 3 times",
    "output": "free -k -l -s 3 -c 3"
  },
  {
    "input": "Display memory usage in megabytes with wide output, update every 4 seconds, 2 times",
    "output": "free -m -w -s 4 -c 2"
  },
  {
    "input": "Display memory usage in gigabytes with total, update every 5 seconds, 6 times",
    "output": "free -g -t -s 5 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with old format, update every 7 seconds, 7 times",
    "output": "free -h -o -s 7 -c 7"
  },
  {
    "input": "Display memory usage in bytes with detailed stats and total, update every 8 seconds, 8 times",
    "output": "free -b -l -t -s 8 -c 8"
  },
  {
    "input": "Display memory usage in kilobytes with wide output and total, update every 9 seconds, 9 times",
    "output": "free -k -w -t -s 9 -c 9"
  },
  {
    "input": "Display memory usage in megabytes with old format and total, update every 2 seconds, 2 times",
    "output": "free -m -o -t -s 2 -c 2"
  },
  {
    "input": "Display memory usage in gigabytes with detailed stats and total, update every 3 seconds, 3 times",
    "output": "free -g -l -t -s 3 -c 3"
  },
  {
    "input": "Display memory usage in human-readable format with wide output and total, update every 4 seconds, 4 times",
    "output": "free -h -w -t -s 4 -c 4"
  },
  {
    "input": "Display memory usage in bytes with old format and detailed stats, update every 5 seconds, 5 times",
    "output": "free -b -o -l -s 5 -c 5"
  },
  {
    "input": "Display memory usage in kilobytes with wide output and detailed stats, update every 6 seconds, 6 times",
    "output": "free -k -w -l -s 6 -c 6"
  },
  {
    "input": "Display memory usage in megabytes with old format and wide output, update every 7 seconds, 7 times",
    "output": "free -m -o -w -s 7 -c 7"
  },
  {
    "input": "Display memory usage in gigabytes with old format and detailed stats, update every 8 seconds, 8 times",
    "output": "free -g -o -l -s 8 -c 8"
  },
  {
    "input": "Display memory usage in human-readable format with detailed stats and wide output, update every 9 seconds, 9 times",
    "output": "free -h -l -w -s 9 -c 9"
  },
  {
    "input": "Display memory usage in bytes with all options, update every 10 seconds, 10 times",
    "output": "free -b -o -l -w -t -s 10 -c 10"
  },
  {
    "input": "Display memory usage in kilobytes with all options, update every 11 seconds, 11 times",
    "output": "free -k -o -l -w -t -s 11 -c 11"
  },
  {
    "input": "Display memory usage in megabytes with all options, update every 12 seconds, 12 times",
    "output": "free -m -o -l -w -t -s 12 -c 12"
  },
  {
    "input": "Display memory usage in gigabytes with all options, update every 13 seconds, 13 times",
    "output": "free -g -o -l -w -t -s 13 -c 13"
  },
  {
    "input": "Display memory usage in human-readable format with all options, update every 14 seconds, 14 times",
    "output": "free -h -o -l -w -t -s 14 -c 14"
  },
  {
    "input": "Display memory usage in bytes, update every second indefinitely",
    "output": "free -b -s 1"
  },
  {
    "input": "Display memory usage in kilobytes, update every second indefinitely",
    "output": "free -k -s 1"
  },
  {
    "input": "Display memory usage in megabytes, update every second indefinitely",
    "output": "free -m -s 1"
  },
  {
    "input": "Display memory usage in gigabytes, update every second indefinitely",
    "output": "free -g -s 1"
  },
  {
    "input": "Display memory usage in human-readable format, update every second indefinitely",
    "output": "free -h -s 1"
  },
  {
    "input": "Display memory usage in bytes, update every 10 seconds indefinitely",
    "output": "free -b -s 10"
  },
  {
    "input": "Display memory usage in kilobytes, update every 10 seconds indefinitely",
    "output": "free -k -s 10"
  },
  {
    "input": "Display memory usage in megabytes, update every 10 seconds indefinitely",
    "output": "free -m -s 10"
  },
  {
    "input": "Display memory usage in gigabytes, update every 10 seconds indefinitely",
    "output": "free -g -s 10"
  },
  {
    "input": "Display memory usage in human-readable format, update every 10 seconds indefinitely",
    "output": "free -h -s 10"
  },
  {
    "input": "Display memory usage in bytes, update every 15 seconds indefinitely",
    "output": "free -b -s 15"
  },
  {
    "input": "Display memory usage in kilobytes, update every 15 seconds indefinitely",
    "output": "free -k -s 15"
  },
  {
    "input": "Display memory usage in megabytes, update every 15 seconds indefinitely",
    "output": "free -m -s 15"
  },
  {
    "input": "Display memory usage in gigabytes, update every 15 seconds indefinitely",
    "output": "free -g -s 15"
  },
  {
    "input": "Display memory usage in human-readable format, update every 15 seconds indefinitely",
    "output": "free -h -s 15"
  },
  {
    "input": "Display memory usage in bytes, update every 30 seconds indefinitely",
    "output": "free -b -s 30"
  },
  {
    "input": "Display memory usage in kilobytes, update every 30 seconds indefinitely",
    "output": "free -k -s 30"
  },
  {
    "input": "Display memory usage in megabytes, update every 30 seconds indefinitely",
    "output": "free -m -s 30"
  },
  {
    "input": "Display memory usage in gigabytes, update every 30 seconds indefinitely",
    "output": "free -g -s 30"
  },
  {
    "input": "Display memory usage in human-readable format, update every 30 seconds indefinitely",
    "output": "free -h -s 30"
  },
  {
    "input": "Display memory usage in bytes with total, update every 5 seconds, 3 times",
    "output": "free -b -t -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with total, update every 10 seconds, 4 times",
    "output": "free -k -t -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with total, update every 15 seconds, 5 times",
    "output": "free -m -t -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with total, update every 20 seconds, 6 times",
    "output": "free -g -t -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with total, update every 25 seconds, 7 times",
    "output": "free -h -t -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with old format, update every 5 seconds, 3 times",
    "output": "free -b -o -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with old format, update every 10 seconds, 4 times",
    "output": "free -k -o -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with old format, update every 15 seconds, 5 times",
    "output": "free -m -o -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with old format, update every 20 seconds, 6 times",
    "output": "free -g -o -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with old format, update every 25 seconds, 7 times",
    "output": "free -h -o -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with detailed stats, update every 5 seconds, 3 times",
    "output": "free -b -l -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with detailed stats, update every 10 seconds, 4 times",
    "output": "free -k -l -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with detailed stats, update every 15 seconds, 5 times",
    "output": "free -m -l -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with detailed stats, update every 20 seconds, 6 times",
    "output": "free -g -l -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with detailed stats, update every 25 seconds, 7 times",
    "output": "free -h -l -s 25 -c 7"
  },
  {
    "input": "Display memory usage in bytes with wide output, update every 5 seconds, 3 times",
    "output": "free -b -w -s 5 -c 3"
  },
  {
    "input": "Display memory usage in kilobytes with wide output, update every 10 seconds, 4 times",
    "output": "free -k -w -s 10 -c 4"
  },
  {
    "input": "Display memory usage in megabytes with wide output, update every 15 seconds, 5 times",
    "output": "free -m -w -s 15 -c 5"
  },
  {
    "input": "Display memory usage in gigabytes with wide output, update every 20 seconds, 6 times",
    "output": "free -g -w -s 20 -c 6"
  },
  {
    "input": "Display memory usage in human-readable format with wide output, update every 25 seconds, 7 times",
    "output": "free -h -w -s 25 -c 7"
  },
  {
    "input": "Display help for the free command",
    "output": "free --help"
  },
  {
    "input": "Display version information for the free command",
    "output": "free --version"
  },
  {
    "input": "Show all running processes in standard format",
    "output": "ps -e"
  },
  {
    "input": "Show all running processes in full-format listing",
    "output": "ps -ef"
  },
  {
    "input": "Show all running processes in long format",
    "output": "ps -el"
  },
  {
    "input": "Show all running processes in jobs format",
    "output": "ps -ej"
  },
  {
    "input": "Show all running processes with threads",
    "output": "ps -eLf"
  },
  {
    "input": "Show all processes in BSD format",
    "output": "ps ax"
  },
  {
    "input": "Show all processes in BSD user format",
    "output": "ps aux"
  },
  {
    "input": "Show all processes for user 'alice'",
    "output": "ps -u alice"
  },
  {
    "input": "Show all processes for UID 1000",
    "output": "ps -U 1000"
  },
  {
    "input": "Show all processes without controlling terminals",
    "output": "ps -x"
  },
  {
    "input": "Show processes by command name 'bash'",
    "output": "ps -C bash"
  },
  {
    "input": "Show processes by PID 1234",
    "output": "ps -p 1234"
  },
  {
    "input": "Show processes by TTY pts/1",
    "output": "ps -t pts/1"
  },
  {
    "input": "Show all processes with custom columns: PID, USER, %CPU, %MEM, COMMAND",
    "output": "ps -eo pid,user,%cpu,%mem,command"
  },
  {
    "input": "Show all processes sorted by CPU usage",
    "output": "ps -eo pid,ppid,cmd,%cpu,%mem --sort=-%cpu"
  },
  {
    "input": "Show all processes sorted by memory usage",
    "output": "ps -eo pid,ppid,cmd,%cpu,%mem --sort=-%mem"
  },
  {
    "input": "Show all processes as a tree",
    "output": "ps -ejH"
  },
  {
    "input": "Show all processes as a tree in BSD format",
    "output": "ps axjf"
  },
  {
    "input": "Show all threads for all processes",
    "output": "ps -eLf"
  },
  {
    "input": "Show all threads in BSD format",
    "output": "ps axms"
  },
  {
    "input": "Show security info for all processes",
    "output": "ps -eo euser,ruser,suser,fuser,f,comm,label"
  },
  {
    "input": "Show SELinux context for all processes",
    "output": "ps axZ"
  },
  {
    "input": "Show processes running as root (real & effective ID) in user format",
    "output": "ps -U root -u root u"
  },
  {
    "input": "Show processes with custom format: PID, TID, class, rtprio, ni, pri, psr, pcpu, stat, wchan, comm",
    "output": "ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm"
  },
  {
    "input": "Show processes with custom output: PID, PPID, user, cmd",
    "output": "ps -eo pid,ppid,user,cmd"
  },
  {
    "input": "Show process name for PID 1154",
    "output": "ps -p 1154 -o comm="
  },
  {
    "input": "Show process details for PID 1154 with group, nice, start, elapsed time",
    "output": "ps -p 1154 -o pid,ppid,fgroup,ni,lstart,etime"
  },
  {
    "input": "Show all processes with wide output",
    "output": "ps auxww"
  },
  {
    "input": "Show all processes and pipe to less for scrolling",
    "output": "ps aux | less"
  },
  {
    "input": "Show all processes and pipe to less with no line wrapping",
    "output": "ps aux | less -S"
  },
  {
    "input": "Show all processes and pipe to most for scrolling",
    "output": "ps aux | most"
  },
  {
    "input": "Show all processes and grep for 'sshd'",
    "output": "ps aux | grep sshd"
  },
  {
    "input": "Show all processes and grep for 'python'",
    "output": "ps aux | grep python"
  },
  {
    "input": "Show all processes and grep for 'nginx'",
    "output": "ps aux | grep nginx"
  },
  {
    "input": "Show all processes and grep for 'java'",
    "output": "ps aux | grep java"
  },
  {
    "input": "Show only processes with TTY",
    "output": "ps -e -o tty,pid,cmd | grep -v '?'"
  },
  {
    "input": "Show only processes with no TTY",
    "output": "ps -e -o tty,pid,cmd | grep '?'"
  },
  {
    "input": "Show all processes and sort by start time",
    "output": "ps -eo pid,cmd,lstart --sort=lstart"
  },
  {
    "input": "Show processes with elapsed time",
    "output": "ps -eo pid,etime,cmd"
  },
  {
    "input": "Show all zombie processes",
    "output": "ps aux | awk '$8 ~ /Z/ {print $0}'"
  },
  {
    "input": "Show all processes with more than 10% CPU usage",
    "output": "ps -eo pid,ppid,cmd,%cpu --sort=-%cpu | awk '$4 > 10'"
  },
  {
    "input": "Show all processes with more than 100MB memory usage",
    "output": "ps -eo pid,ppid,cmd,%mem --sort=-%mem | awk '$4 > 10'"
  },
  {
    "input": "Show top 10 CPU-consuming processes",
    "output": "ps -eo pid,ppid,cmd,%cpu --sort=-%cpu | head -n 11"
  },
  {
    "input": "Show top 10 memory-consuming processes",
    "output": "ps -eo pid,ppid,cmd,%mem --sort=-%mem | head -n 11"
  },
  {
    "input": "Show all processes for a group 'admin'",
    "output": "ps -G admin"
  },
  {
    "input": "Show all processes for a session leader",
    "output": "ps -s 1"
  },
  {
    "input": "Show all processes for a specific terminal",
    "output": "ps -t tty1"
  },
  {
    "input": "Show all processes in tree format with threads",
    "output": "ps -ejH"
  },
  {
    "input": "Show all processes with user-defined columns",
    "output": "ps -eo user,pid,pcpu,pmem,comm"
  },
  {
    "input": "Show all kernel ring buffer messages",
    "output": "dmesg"
  },
  {
    "input": "Show kernel messages with human-readable timestamps",
    "output": "dmesg -T"
  },
  {
    "input": "Follow kernel messages in real time",
    "output": "dmesg -w"
  },
  {
    "input": "Show kernel messages with colored output",
    "output": "dmesg -L"
  },
  {
    "input": "Show kernel messages without timestamps",
    "output": "dmesg -t"
  },
  {
    "input": "Show kernel messages with decoded facility and level numbers",
    "output": "dmesg -x"
  },
  {
    "input": "Show kernel messages in human-readable format",
    "output": "dmesg -H"
  },
  {
    "input": "Show kernel messages with error level only",
    "output": "dmesg --level=err"
  },
  {
    "input": "Show kernel messages with warning and error levels",
    "output": "dmesg --level=warn,err"
  },
  {
    "input": "Show kernel messages with emerg, alert, crit, err, warn levels",
    "output": "dmesg --level=emerg,alert,crit,err,warn"
  },
  {
    "input": "Show kernel messages from a specific facility",
    "output": "dmesg --facility=daemon"
  },
  {
    "input": "Show kernel messages related to device sda",
    "output": "dmesg | grep -i sda"
  },
  {
    "input": "Show kernel messages related to network",
    "output": "dmesg | grep -i net"
  },
  {
    "input": "Show kernel messages related to USB",
    "output": "dmesg | grep -i usb"
  },
  {
    "input": "Show kernel messages related to errors",
    "output": "dmesg | grep -i error"
  },
  {
    "input": "Show kernel messages from the last boot",
    "output": "dmesg -b 1"
  },
  {
    "input": "Clear the kernel ring buffer",
    "output": "dmesg -C"
  },
  {
    "input": "Print and clear the kernel ring buffer",
    "output": "dmesg -c"
  },
  {
    "input": "Show kernel messages with buffer size 512",
    "output": "dmesg -s 512"
  },
  {
    "input": "Show kernel messages with buffer size 1M",
    "output": "dmesg -s 1048576"
  },
  {
    "input": "Show kernel messages in raw format",
    "output": "dmesg -r"
  },
  {
    "input": "Show kernel messages with delta time between messages",
    "output": "dmesg -d"
  },
  {
    "input": "Show kernel messages with local time and delta",
    "output": "dmesg -e"
  },
  {
    "input": "Show kernel messages in JSON format",
    "output": "dmesg -J"
  },
  {
    "input": "Show kernel messages from a file",
    "output": "dmesg -F /path/to/file"
  },
  {
    "input": "Show kernel messages from /dev/kmsg",
    "output": "dmesg -K /dev/kmsg"
  },
  {
    "input": "Show kernel messages with ISO-8601 timestamps",
    "output": "dmesg --time-format=iso"
  },
  {
    "input": "Show kernel messages with ctime timestamps",
    "output": "dmesg --time-format=ctime"
  },
  {
    "input": "Show kernel messages with reltime timestamps",
    "output": "dmesg --time-format=reltime"
  },
  {
    "input": "Show kernel messages with delta timestamps",
    "output": "dmesg --time-format=delta"
  },
  {
    "input": "Show kernel messages with color always on",
    "output": "dmesg --color=always"
  },
  {
    "input": "Show kernel messages with color never",
    "output": "dmesg --color=never"
  },
  {
    "input": "Show kernel messages with color auto",
    "output": "dmesg --color=auto"
  },
  {
    "input": "Show kernel messages with unescaped output",
    "output": "dmesg --noescape"
  },
  {
    "input": "Show kernel messages using syslog interface",
    "output": "dmesg -S"
  },
  {
    "input": "Show kernel messages for specific level and facility",
    "output": "dmesg -l err -f kern"
  },
  {
    "input": "Show kernel messages with log level set to 4",
    "output": "dmesg -n 4"
  },
  {
    "input": "Show kernel messages as they arrive (follow mode)",
    "output": "dmesg -w"
  },
  {
    "input": "Show kernel messages and pipe to less for paging",
    "output": "dmesg | less"
  },
  {
    "input": "Show kernel messages and pipe to grep for filtering",
    "output": "dmesg | grep -i error"
  },
  {
    "input": "Show kernel messages and pipe to tail for last 10 lines",
    "output": "dmesg | tail -n 10"
  },
  {
    "input": "Show kernel messages and pipe to head for first 10 lines",
    "output": "dmesg | head -n 10"
  },
  {
    "input": "Show kernel messages and save to a file",
    "output": "dmesg > dmesg_output.txt"
  },
  {
    "input": "Show kernel messages and filter for CPU",
    "output": "dmesg | grep -i cpu"
  },
  {
    "input": "Show all systemd journal logs",
    "output": "journalctl"
  },
  {
    "input": "Show most recent journal entries and follow new ones",
    "output": "journalctl -f"
  },
  {
    "input": "Show only kernel messages",
    "output": "journalctl -k"
  },
  {
    "input": "Show logs from the current boot",
    "output": "journalctl -b"
  },
  {
    "input": "Show logs from the previous boot",
    "output": "journalctl -b -1"
  },
  {
    "input": "Show logs for a specific systemd unit (e.g., sshd)",
    "output": "journalctl -u sshd"
  },
  {
    "input": "Show logs for multiple units (e.g., nginx and mysql)",
    "output": "journalctl -u nginx -u mysql"
  },
  {
    "input": "Show logs with priority error or higher",
    "output": "journalctl -p err"
  },
  {
    "input": "Show logs with priority warning or higher",
    "output": "journalctl -p warning"
  },
  {
    "input": "Show logs since yesterday",
    "output": "journalctl --since yesterday"
  },
  {
    "input": "Show logs since 2025-06-19 12:00",
    "output": "journalctl --since \"2025-06-19 12:00\""
  },
  {
    "input": "Show logs between two dates",
    "output": "journalctl --since \"2025-06-18\" --until \"2025-06-19 18:00\""
  },
  {
    "input": "Show logs for a specific user (UID 1000)",
    "output": "journalctl _UID=1000"
  },
  {
    "input": "Show logs for a specific group (GID 100)",
    "output": "journalctl _GID=100"
  },
  {
    "input": "Show logs for a specific process (PID 1234)",
    "output": "journalctl _PID=1234"
  },
  {
    "input": "Show logs for a specific executable",
    "output": "journalctl _EXE=/usr/bin/bash"
  },
  {
    "input": "Show logs in reverse order (newest first)",
    "output": "journalctl -r"
  },
  {
    "input": "Show last 20 journal entries",
    "output": "journalctl -n 20"
  },
  {
    "input": "Show logs without using a pager",
    "output": "journalctl --no-pager"
  },
  {
    "input": "Show logs in JSON format",
    "output": "journalctl -o json"
  },
  {
    "input": "Show logs in pretty JSON format",
    "output": "journalctl -o json-pretty"
  },
  {
    "input": "Show logs in short format",
    "output": "journalctl -o short"
  },
  {
    "input": "Show logs in verbose format",
    "output": "journalctl -o verbose"
  },
  {
    "input": "Show logs in cat format (message only)",
    "output": "journalctl -o cat"
  },
  {
    "input": "Show logs in short-monotonic format",
    "output": "journalctl -o short-monotonic"
  },
  {
    "input": "Show logs with UTC timestamps",
    "output": "journalctl --utc"
  },
  {
    "input": "Show logs and jump to the end",
    "output": "journalctl -e"
  },
  {
    "input": "Show logs with explanations (catalog)",
    "output": "journalctl -x"
  },
  {
    "input": "Show all fields fully, including unprintable characters",
    "output": "journalctl -a"
  },
  {
    "input": "Show logs for a specific boot ID",
    "output": "journalctl --boot=abcd1234"
  },
  {
    "input": "Show logs for a specific systemd slice",
    "output": "journalctl _SYSTEMD_SLICE=user-1000.slice"
  },
  {
    "input": "Show logs for a specific systemd cgroup",
    "output": "journalctl _SYSTEMD_CGROUP=/system.slice/sshd.service"
  },
  {
    "input": "Show logs for a specific command name",
    "output": "journalctl _COMM=sshd"
  },
  {
    "input": "Show logs for a specific message ID",
    "output": "journalctl MESSAGE_ID=fc2e22bc6ee647b6b90729ab34a250b1"
  },
  {
    "input": "Show logs for a specific syslog identifier",
    "output": "journalctl SYSLOG_IDENTIFIER=sshd"
  },
  {
    "input": "Show logs with a specific grep pattern",
    "output": "journalctl -g 'error'"
  },
  {
    "input": "Show logs for the last 10 minutes",
    "output": "journalctl --since '10 minutes ago'"
  },
  {
    "input": "Show logs for the last hour",
    "output": "journalctl --since '1 hour ago'"
  },
  {
    "input": "Show logs for the last 24 hours",
    "output": "journalctl --since '24 hours ago'"
  },
  {
    "input": "Show logs for a specific service and follow in real time",
    "output": "journalctl -u nginx -f"
  },
  {
    "input": "Show logs for a specific priority and follow in real time",
    "output": "journalctl -p err -f"
  },
  {
    "input": "Show disk usage of journal logs",
    "output": "journalctl --disk-usage"
  },
  {
    "input": "Vacuum journal logs to keep only 1G of data",
    "output": "journalctl --vacuum-size=1G"
  },
  {
    "input": "Vacuum journal logs to keep only 2 weeks of data",
    "output": "journalctl --vacuum-time=2weeks"
  },
  {
    "input": "List all available boots",
    "output": "journalctl --list-boots"
  },
  {
    "input": "Show logs for a service with error priority since 15 minutes ago",
    "output": "journalctl -u critical-service.service --since='15 minutes ago' -p err"
  },
  {
    "input": "Run top in default mode",
    "output": "top"
  },
  {
    "input": "Run top and display processes sorted by memory usage",
    "output": "top -o %MEM"
  },
  {
    "input": "Run top and display processes sorted by CPU usage",
    "output": "top -o %CPU"
  },
  {
    "input": "Run top and update every 2 seconds",
    "output": "top -d 2"
  },
  {
    "input": "Run top and update every 0.5 seconds",
    "output": "top -d 0.5"
  },
  {
    "input": "Run top and display only processes of user 'alice'",
    "output": "top -u alice"
  },
  {
    "input": "Run top and display only processes of user with UID 1000",
    "output": "top -U 1000"
  },
  {
    "input": "Run top and show absolute path for command column",
    "output": "top -c"
  },
  {
    "input": "Run top and show only running processes",
    "output": "top -i"
  },
  {
    "input": "Run top and show only idle processes",
    "output": "top -I"
  },
  {
    "input": "Run top and display threads instead of processes",
    "output": "top -H"
  },
  {
    "input": "Run top and display only processes from PID 1234",
    "output": "top -p 1234"
  },
  {
    "input": "Run top and display processes from PIDs 1234 and 5678",
    "output": "top -p 1234,5678"
  },
  {
    "input": "Run top and show summary only, no task list",
    "output": "top -b -n 1 | head -n 12"
  },
  {
    "input": "Run top in batch mode for scripting",
    "output": "top -b"
  },
  {
    "input": "Run top in batch mode, 5 iterations, update every 2 seconds",
    "output": "top -b -n 5 -d 2"
  },
  {
    "input": "Run top and highlight running tasks",
    "output": "top -z"
  },
  {
    "input": "Run top and disable color",
    "output": "top -C"
  },
  {
    "input": "Run top and show cumulative time for processes",
    "output": "top -S"
  },
  {
    "input": "Run top and show only processes with a specific command name",
    "output": "top | grep COMMAND_NAME"
  },
  {
    "input": "Run top and filter by process state 'Z' (zombie)",
    "output": "top | grep Z"
  },
  {
    "input": "Run top and save output to a file",
    "output": "top -b -n 1 > top_output.txt"
  },
  {
    "input": "Run top and show only the first 10 processes",
    "output": "top -b -n 1 | head -n 22"
  },
  {
    "input": "Run top and show all available columns",
    "output": "top -w512"
  },
  {
    "input": "Run top and show wide output",
    "output": "top -w"
  },
  {
    "input": "Run top and show the full command line for each process",
    "output": "top -c"
  },
  {
    "input": "Run top and sort by resident memory size",
    "output": "top -o RES"
  },
  {
    "input": "Run top and sort by virtual memory size",
    "output": "top -o VIRT"
  },
  {
    "input": "Run top and sort by time+",
    "output": "top -o TIME+"
  },
  {
    "input": "Run top and show only processes using more than 10% CPU",
    "output": "top -b -n 1 | awk '$9 > 10'"
  },
  {
    "input": "Run top and show only processes using more than 100MB RAM",
    "output": "top -b -n 1 | awk '$10 ~ /[0-9]+/ && $10 > 102400'"
  },
  {
    "input": "Run top and show only processes in S (sleeping) state",
    "output": "top | grep ' S '"
  },
  {
    "input": "Run top and show only root's processes",
    "output": "top -u root"
  },
  {
    "input": "Run top with a custom delay of 3 seconds",
    "output": "top -d 3"
  },
  {
    "input": "Run top and show process tree view",
    "output": "top -V"
  },
  {
    "input": "Run top and display only the CPU summary",
    "output": "top -b -n 1 | grep 'Cpu(s)'"
  },
  {
    "input": "Run top and display only the memory summary",
    "output": "top -b -n 1 | grep 'KiB Mem'"
  },
  {
    "input": "Run top and display only swap summary",
    "output": "top -b -n 1 | grep 'KiB Swap'"
  },
  {
    "input": "Run top and display only the header",
    "output": "top -b -n 1 | head -n 5"
  },
  {
    "input": "Run top and display only the last 10 lines",
    "output": "top -b -n 1 | tail -n 10"
  },
  {
    "input": "Run top and display only processes with a TTY",
    "output": "top -b -n 1 | grep -v '?'"
  },
  {
    "input": "Run top and show only processes with PPID 1",
    "output": "top -b -n 1 | awk '$5 == 1'"
  },
  {
    "input": "Run top and show only processes with PID greater than 1000",
    "output": "top -b -n 1 | awk '$1 > 1000'"
  },
  {
    "input": "Run top and show only processes with user 'www-data'",
    "output": "top -u www-data"
  },
  {
    "input": "Run top and show only the top 5 CPU-consuming processes",
    "output": "top -b -n 1 | head -n 17 | tail -n 5"
  },
  {
    "input": "Run top and show only the top 5 memory-consuming processes",
    "output": "top -b -o %MEM -n 1 | head -n 17 | tail -n 5"
  },
  {
    "input": "Run top and show only zombie processes",
    "output": "top -b -n 1 | grep ' Z '"
  },
  {
    "input": "Run top and show only processes in uninterruptible sleep",
    "output": "top -b -n 1 | grep ' D '"
  },
  {
    "input": "Run top and show only processes in stopped state",
    "output": "top -b -n 1 | grep ' T '"
  },
  {
    "input": "Run htop in default mode",
    "output": "htop"
  },
  {
    "input": "Run htop and display tree view",
    "output": "htop -t"
  },
  {
    "input": "Run htop and sort by memory usage",
    "output": "htop --sort-key=MEM%"
  },
  {
    "input": "Run htop and sort by CPU usage",
    "output": "htop --sort-key=CPU%"
  },
  {
    "input": "Run htop and show only user 'alice' processes",
    "output": "htop -u alice"
  },
  {
    "input": "Run htop and show only processes with UID 1000",
    "output": "htop -u 1000"
  },
  {
    "input": "Run htop with monochrome display",
    "output": "htop -C"
  },
  {
    "input": "Run htop and show only processes with a specific command name",
    "output": "htop | grep COMMAND_NAME"
  },
  {
    "input": "Run htop and show only running processes",
    "output": "htop | grep ' R '"
  },
  {
    "input": "Run htop and show only sleeping processes",
    "output": "htop | grep ' S '"
  },
  {
    "input": "Run htop and show only zombie processes",
    "output": "htop | grep ' Z '"
  },
  {
    "input": "Run htop and show only stopped processes",
    "output": "htop | grep ' T '"
  },
  {
    "input": "Run htop and show only processes with PPID 1",
    "output": "htop | awk '$5 == 1'"
  },
  {
    "input": "Run htop and show only processes with PID greater than 1000",
    "output": "htop | awk '$1 > 1000'"
  },
  {
    "input": "Run htop and show only processes with user 'www-data'",
    "output": "htop -u www-data"
  },
  {
    "input": "Run htop and show only the top 5 CPU-consuming processes",
    "output": "htop | head -n 10 | tail -n 5"
  },
  {
    "input": "Run htop and show only the top 5 memory-consuming processes",
    "output": "htop --sort-key=MEM% | head -n 10 | tail -n 5"
  },
  {
    "input": "Run htop and show only processes with TTY",
    "output": "htop | grep -v '?'"
  },
  {
    "input": "Run htop in batch mode and save output to file",
    "output": "htop -b > htop_output.txt"
  },
  {
    "input": "Run htop and show full command line for each process",
    "output": "htop --show-commandline"
  },
  {
    "input": "Run htop and highlight running tasks",
    "output": "htop --highlight-changes"
  },
  {
    "input": "Run htop and show only root's processes",
    "output": "htop -u root"
  },
  {
    "input": "Run htop and show only processes using more than 10% CPU",
    "output": "htop | awk '$9 > 10'"
  },
  {
    "input": "Run htop and show only processes using more than 100MB RAM",
    "output": "htop | awk '$10 ~ /[0-9]+/ && $10 > 102400'"
  },
  {
    "input": "Run htop and show only processes in uninterruptible sleep",
    "output": "htop | grep ' D '"
  },
  {
    "input": "Run htop and show only the header",
    "output": "htop | head -n 5"
  },
  {
    "input": "Run htop and display only the last 10 lines",
    "output": "htop | tail -n 10"
  },
  {
    "input": "Run htop and show only the first 10 processes",
    "output": "htop | head -n 10"
  },
  {
    "input": "Run htop and display wide output",
    "output": "htop --wide"
  },
  {
    "input": "Run htop and show process tree with user 'bob'",
    "output": "htop -t -u bob"
  },
  {
    "input": "Run htop with color scheme 2",
    "output": "htop --color-scheme=2"
  },
  {
    "input": "Run htop with color scheme 4",
    "output": "htop --color-scheme=4"
  },
  {
    "input": "Run htop and display CPU meters only",
    "output": "htop --only-cpu"
  },
  {
    "input": "Run htop and display memory meters only",
    "output": "htop --only-mem"
  },
  {
    "input": "Run htop and display swap meters only",
    "output": "htop --only-swap"
  },
  {
    "input": "Run htop and display load average",
    "output": "htop --show-load-average"
  },
  {
    "input": "Run htop and display uptime",
    "output": "htop --show-uptime"
  },
  {
    "input": "Run htop and display process tree and sort by CPU",
    "output": "htop -t --sort-key=CPU%"
  },
  {
    "input": "Run htop and display process tree and sort by memory",
    "output": "htop -t --sort-key=MEM%"
  },
  {
    "input": "Run htop and show only kernel threads",
    "output": "htop --kernel-threads"
  },
  {
    "input": "Run htop and hide kernel threads",
    "output": "htop --no-kernel-threads"
  },
  {
    "input": "Run htop and show only userland threads",
    "output": "htop --userland-threads"
  },
  {
    "input": "Run htop and hide userland threads",
    "output": "htop --no-userland-threads"
  },
  {
    "input": "Run htop and show only processes with nice value 0",
    "output": "htop | awk '$18 == 0'"
  },
  {
    "input": "Run htop and show only processes with priority 20",
    "output": "htop | awk '$17 == 20'"
  },
  {
    "input": "Run htop and show only processes with CPU usage > 50%",
    "output": "htop | awk '$9 > 50'"
  },
  {
    "input": "Run atop in default mode",
    "output": "atop"
  },
  {
    "input": "Run atop and update every 2 seconds",
    "output": "atop -d 2"
  },
  {
    "input": "Run atop and update every 10 seconds",
    "output": "atop 10"
  },
  {
    "input": "Run atop and record output to a file",
    "output": "atop -w atop.log"
  },
  {
    "input": "Run atop and read from a log file",
    "output": "atop -r atop.log"
  },
  {
    "input": "Run atop and display only CPU activity",
    "output": "atop -C"
  },
  {
    "input": "Run atop and display only memory activity",
    "output": "atop -M"
  },
  {
    "input": "Run atop and display only disk activity",
    "output": "atop -D"
  },
  {
    "input": "Run atop and display only network activity",
    "output": "atop -N"
  },
  {
    "input": "Run atop and display only process activity",
    "output": "atop -P"
  },
  {
    "input": "Run atop and display only system activity",
    "output": "atop -S"
  },
  {
    "input": "Run atop and show threads",
    "output": "atop -y"
  },
  {
    "input": "Run atop and show only processes with high CPU usage",
    "output": "atop | grep CPU"
  },
  {
    "input": "Run atop and show only processes with high memory usage",
    "output": "atop | grep MEM"
  },
  {
    "input": "Run atop and show only processes with high disk usage",
    "output": "atop | grep DSK"
  },
  {
    "input": "Run atop and show only processes with high network usage",
    "output": "atop | grep NET"
  },
  {
    "input": "Run atop and show only zombie processes",
    "output": "atop | grep zombie"
  },
  {
    "input": "Run atop and show only sleeping processes",
    "output": "atop | grep sleeping"
  },
  {
    "input": "Run atop and show only running processes",
    "output": "atop | grep running"
  },
  {
    "input": "Run atop and show only stopped processes",
    "output": "atop | grep stopped"
  },
  {
    "input": "Run atop and show only processes for user 'alice'",
    "output": "atop -u alice"
  },
  {
    "input": "Run atop and show only processes for user 'root'",
    "output": "atop -u root"
  },
  {
    "input": "Run atop in monochrome mode",
    "output": "atop -m"
  },
  {
    "input": "Run atop and show only processes with PID 1234",
    "output": "atop -p 1234"
  },
  {
    "input": "Run atop and show only processes with PPID 1",
    "output": "atop | awk '$5 == 1'"
  },
  {
    "input": "Run atop and show only processes with CPU usage > 50%",
    "output": "atop | awk '$9 > 50'"
  },
  {
    "input": "Run atop and show only processes with memory usage > 100MB",
    "output": "atop | awk '$10 > 102400'"
  },
  {
    "input": "Run atop and show only processes with disk usage > 1GB",
    "output": "atop | awk '$11 > 1048576'"
  },
  {
    "input": "Run atop and show only processes with network usage > 10MB",
    "output": "atop | awk '$12 > 10240'"
  },
  {
    "input": "Run atop and show process tree",
    "output": "atop -T"
  },
  {
    "input": "Run atop and show only kernel threads",
    "output": "atop -k"
  },
  {
    "input": "Run atop and show only userland threads",
    "output": "atop -U"
  },
  {
    "input": "Run atop and show only processes with nice value 0",
    "output": "atop | awk '$18 == 0'"
  },
  {
    "input": "Run atop and show only processes with priority 20",
    "output": "atop | awk '$17 == 20'"
  },
  {
    "input": "Run atop and show only processes with TTY",
    "output": "atop | grep -v '?'"
  },
  {
    "input": "Run atop and show only the first 10 processes",
    "output": "atop | head -n 10"
  },
  {
    "input": "Run atop and show only the last 10 lines",
    "output": "atop | tail -n 10"
  },
  {
    "input": "Run atop and show only the header",
    "output": "atop | head -n 5"
  },
  {
    "input": "Run atop and show only the top 5 CPU-consuming processes",
    "output": "atop | head -n 10 | tail -n 5"
  },
  {
    "input": "Run atop and show only the top 5 memory-consuming processes",
    "output": "atop | grep MEM | head -n 5"
  },
  {
    "input": "Run atop and show only the top 5 disk-consuming processes",
    "output": "atop | grep DSK | head -n 5"
  },
  {
    "input": "Run atop and show only the top 5 network-consuming processes",
    "output": "atop | grep NET | head -n 5"
  },
  {
    "input": "Run atop and highlight running tasks",
    "output": "atop -h"
  },
  {
    "input": "Run atop and show only processes with user 'www-data'",
    "output": "atop -u www-data"
  },
  {
    "input": "Run atop in batch mode and save output to file",
    "output": "atop -b > atop_output.txt"
  },
  {
    "input": "Display all available system information",
    "output": "uname -a"
  },
  {
    "input": "Show the kernel name",
    "output": "uname -s"
  },
  {
    "input": "Show the network node hostname",
    "output": "uname -n"
  },
  {
    "input": "Show the kernel release",
    "output": "uname -r"
  },
  {
    "input": "Show the kernel version",
    "output": "uname -v"
  },
  {
    "input": "Show the machine hardware name",
    "output": "uname -m"
  },
  {
    "input": "Show the processor type",
    "output": "uname -p"
  },
  {
    "input": "Show the hardware platform",
    "output": "uname -i"
  },
  {
    "input": "Show the operating system",
    "output": "uname -o"
  },
  {
    "input": "Display kernel name and release",
    "output": "uname -sr"
  },
  {
    "input": "Display kernel name and version",
    "output": "uname -sv"
  },
  {
    "input": "Display kernel name and machine hardware name",
    "output": "uname -sm"
  },
  {
    "input": "Display kernel name and processor type",
    "output": "uname -sp"
  },
  {
    "input": "Display kernel name and hardware platform",
    "output": "uname -si"
  },
  {
    "input": "Display kernel name and operating system",
    "output": "uname -so"
  },
  {
    "input": "Display kernel release and version",
    "output": "uname -rv"
  },
  {
    "input": "Display kernel release and machine hardware name",
    "output": "uname -rm"
  },
  {
    "input": "Display kernel release and processor type",
    "output": "uname -rp"
  },
  {
    "input": "Display kernel release and hardware platform",
    "output": "uname -ri"
  },
  {
    "input": "Display kernel release and operating system",
    "output": "uname -ro"
  },
  {
    "input": "Display kernel version and machine hardware name",
    "output": "uname -vm"
  },
  {
    "input": "Display kernel version and processor type",
    "output": "uname -vp"
  },
  {
    "input": "Display kernel version and hardware platform",
    "output": "uname -vi"
  },
  {
    "input": "Display kernel version and operating system",
    "output": "uname -vo"
  },
  {
    "input": "Display machine hardware name and processor type",
    "output": "uname -mp"
  },
  {
    "input": "Display machine hardware name and hardware platform",
    "output": "uname -mi"
  },
  {
    "input": "Display machine hardware name and operating system",
    "output": "uname -mo"
  },
  {
    "input": "Display processor type and hardware platform",
    "output": "uname -pi"
  },
  {
    "input": "Display processor type and operating system",
    "output": "uname -po"
  },
  {
    "input": "Display hardware platform and operating system",
    "output": "uname -io"
  },
  {
    "input": "Display kernel name, release, and version",
    "output": "uname -srv"
  },
  {
    "input": "Display kernel name, release, and machine hardware name",
    "output": "uname -srm"
  },
  {
    "input": "Display kernel name, release, and processor type",
    "output": "uname -srp"
  },
  {
    "input": "Display kernel name, release, and hardware platform",
    "output": "uname -sri"
  },
  {
    "input": "Display kernel name, release, and operating system",
    "output": "uname -sro"
  },
  {
    "input": "Display kernel name, version, and machine hardware name",
    "output": "uname -svm"
  },
  {
    "input": "Display kernel name, version, and processor type",
    "output": "uname -svp"
  },
  {
    "input": "Display kernel name, version, and hardware platform",
    "output": "uname -svi"
  },
  {
    "input": "Display kernel name, version, and operating system",
    "output": "uname -svo"
  },
  {
    "input": "Display kernel name, machine hardware name, and processor type",
    "output": "uname -smp"
  },
  {
    "input": "Display kernel name, machine hardware name, and hardware platform",
    "output": "uname -smi"
  },
  {
    "input": "Display kernel name, machine hardware name, and operating system",
    "output": "uname -smo"
  },
  {
    "input": "Display kernel name, processor type, and hardware platform",
    "output": "uname -spi"
  },
  {
    "input": "Display kernel name, processor type, and operating system",
    "output": "uname -spo"
  },
  {
    "input": "Display kernel name, hardware platform, and operating system",
    "output": "uname -sio"
  },
  {
    "input": "Display kernel release, version, and machine hardware name",
    "output": "uname -rvm"
  },
  {
    "input": "Display kernel release, version, and processor type",
    "output": "uname -rvp"
  },
  {
    "input": "Display kernel release, version, and hardware platform",
    "output": "uname -rvi"
  },
  {
    "input": "Display kernel release, version, and operating system",
    "output": "uname -rvo"
  },
  {
    "input": "Display kernel release, machine hardware name, and processor type",
    "output": "uname -rmp"
  },
  {
    "input": "Display kernel release, machine hardware name, and hardware platform",
    "output": "uname -rmi"
  },
  {
    "input": "Display kernel release, machine hardware name, and operating system",
    "output": "uname -rmo"
  },
  {
    "input": "Display kernel release, processor type, and hardware platform",
    "output": "uname -rpi"
  },
  {
    "input": "Display kernel release, processor type, and operating system",
    "output": "uname -rpo"
  },
  {
    "input": "Display kernel release, hardware platform, and operating system",
    "output": "uname -rio"
  },
  {
    "input": "Display kernel version, machine hardware name, and processor type",
    "output": "uname -vmp"
  },
  {
    "input": "Display kernel version, machine hardware name, and hardware platform",
    "output": "uname -vmi"
  },
  {
    "input": "Display kernel version, machine hardware name, and operating system",
    "output": "uname -vmo"
  },
  {
    "input": "Display kernel version, processor type, and hardware platform",
    "output": "uname -vpi"
  },
  {
    "input": "Display kernel version, processor type, and operating system",
    "output": "uname -vpo"
  },
  {
    "input": "Display kernel version, hardware platform, and operating system",
    "output": "uname -vio"
  },
  {
    "input": "Display machine hardware name, processor type, and hardware platform",
    "output": "uname -mpi"
  },
  {
    "input": "Display machine hardware name, processor type, and operating system",
    "output": "uname -mpo"
  },
  {
    "input": "Display machine hardware name, hardware platform, and operating system",
    "output": "uname -mio"
  },
  {
    "input": "Display processor type, hardware platform, and operating system",
    "output": "uname -pio"
  },
  {
    "input": "Display all system information except kernel version",
    "output": "uname -asrmoipn"
  },
  {
    "input": "Display all system information except kernel name",
    "output": "uname -arnvmoip"
  },
  {
    "input": "Display all system information except machine hardware name",
    "output": "uname -asrvpoipn"
  },
  {
    "input": "Display all system information except processor type",
    "output": "uname -asrvmoin"
  },
  {
    "input": "Display all system information except hardware platform",
    "output": "uname -asrvmpo"
  },
  {
    "input": "Display all system information except operating system",
    "output": "uname -asrvmpi"
  },
  {
    "input": "Display all system information except network node hostname",
    "output": "uname -asrvmoip"
  },
  {
    "input": "Display all system information except kernel release",
    "output": "uname -asvmoipn"
  },
  {
    "input": "Display all system information except kernel version and processor type",
    "output": "uname -asrmoipn"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arnvmoip"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arnvmoip"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arvmoip"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -avmoipn"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -armoipn"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -arvpoipn"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -arvmoipn"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arvmpoip"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arvmpio"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arvmpio"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -avmpio"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -armpio"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -arvpio"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -arvmio"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arvmpo"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arvmpi"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arvmpi"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -avmpi"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -armpi"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -arvpi"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -arvmi"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arvmp"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arvmp"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arvmp"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -avmp"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -armp"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -arvp"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -arvm"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arvm"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arvm"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arvm"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -avm"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -arm"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -arv"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -arv"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -arv"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -arv"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -arv"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -av"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -ar"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and kernel release",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and kernel version",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and machine hardware name",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and processor type",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and hardware platform",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and operating system",
    "output": "uname -a"
  },
  {
    "input": "Display all system information except kernel name and network node hostname",
    "output": "uname -a"
  },
  {
    "input": "Add user alice to the developers group",
    "output": "gpasswd -a alice developers"
  },
  {
    "input": "Include bob in the sudo group",
    "output": "gpasswd -a bob sudo"
  },
  {
    "input": "Add jenkins to docker group",
    "output": "gpasswd -a jenkins docker"
  },
  {
    "input": "Remove user tom from the admin group",
    "output": "gpasswd -d tom admin"
  },
  {
    "input": "Assign emily to marketing group",
    "output": "gpasswd -a emily marketing"
  },
  {
    "input": "Add user harry to ftp group",
    "output": "gpasswd -a harry ftp"
  },
  {
    "input": "Remove user sam from the wheel group",
    "output": "gpasswd -d sam wheel"
  },
  {
    "input": "Make john a member of media group",
    "output": "gpasswd -a john media"
  },
  {
    "input": "Add devops user to deploy group",
    "output": "gpasswd -a devops deploy"
  },
  {
    "input": "Delete mike from the test group",
    "output": "gpasswd -d mike test"
  },
  {
    "input": "Include sarah in analytics group",
    "output": "gpasswd -a sarah analytics"
  },
  {
    "input": "Add user dan to qa group",
    "output": "gpasswd -a dan qa"
  },
  {
    "input": "Remove julia from the docker group",
    "output": "gpasswd -d julia docker"
  },
  {
    "input": "Add tim to monitoring group",
    "output": "gpasswd -a tim monitoring"
  },
  {
    "input": "Assign nancy to sysadmin group",
    "output": "gpasswd -a nancy sysadmin"
  },
  {
    "input": "Remove ryan from dev group",
    "output": "gpasswd -d ryan dev"
  },
  {
    "input": "Add testuser to app group",
    "output": "gpasswd -a testuser app"
  },
  {
    "input": "Include user1 in accounts group",
    "output": "gpasswd -a user1 accounts"
  },
  {
    "input": "Delete james from finance group",
    "output": "gpasswd -d james finance"
  },
  {
    "input": "Add dev_user to cloud group",
    "output": "gpasswd -a dev_user cloud"
  },
  {
    "input": "Remove testdev from staging group",
    "output": "gpasswd -d testdev staging"
  },
  {
    "input": "Add frank to remote group",
    "output": "gpasswd -a frank remote"
  },
  {
    "input": "Assign maria to hr group",
    "output": "gpasswd -a maria hr"
  },
  {
    "input": "Remove guest1 from public group",
    "output": "gpasswd -d guest1 public"
  },
  {
    "input": "Add user devtest to ci group",
    "output": "gpasswd -a devtest ci"
  },
  {
    "input": "Include diana in graphics group",
    "output": "gpasswd -a diana graphics"
  },
  {
    "input": "Delete sid from devops group",
    "output": "gpasswd -d sid devops"
  },
  {
    "input": "Add lucas to frontend group",
    "output": "gpasswd -a lucas frontend"
  },
  {
    "input": "Remove albert from r&d group",
    "output": "gpasswd -d albert r&d"
  },
  {
    "input": "Include priya in cloud_admin group",
    "output": "gpasswd -a priya cloud_admin"
  },
  {
    "input": "Add admin1 to superusers group",
    "output": "gpasswd -a admin1 superusers"
  },
  {
    "input": "Remove temp_user from testers group",
    "output": "gpasswd -d temp_user testers"
  },
  {
    "input": "Include ram in batch group",
    "output": "gpasswd -a ram batch"
  },
  {
    "input": "Add jeff to exporters group",
    "output": "gpasswd -a jeff exporters"
  },
  {
    "input": "Remove jake from build group",
    "output": "gpasswd -d jake build"
  },
  {
    "input": "Add elena to logreaders group",
    "output": "gpasswd -a elena logreaders"
  },
  {
    "input": "Include thomas in archivers group",
    "output": "gpasswd -a thomas archivers"
  },
  {
    "input": "Remove kevin from maintainers group",
    "output": "gpasswd -d kevin maintainers"
  },
  {
    "input": "Add user test_run to automation group",
    "output": "gpasswd -a test_run automation"
  },
  {
    "input": "Add mike2 to release group",
    "output": "gpasswd -a mike2 release"
  },
  {
    "input": "Delete leena from ux group",
    "output": "gpasswd -d leena ux"
  },
  {
    "input": "Add simon to proxy group",
    "output": "gpasswd -a simon proxy"
  },
  {
    "input": "Assign karen to audit group",
    "output": "gpasswd -a karen audit"
  },
  {
    "input": "Remove devintern from scratch group",
    "output": "gpasswd -d devintern scratch"
  },
  {
    "input": "Add api_user to integration group",
    "output": "gpasswd -a api_user integration"
  },
  {
    "input": "Include natalie in testbed group",
    "output": "gpasswd -a natalie testbed"
  },
  {
    "input": "Remove akash from uat group",
    "output": "gpasswd -d akash uat"
  },
  {
    "input": "Add user junaid to sandbox group",
    "output": "gpasswd -a junaid sandbox"
  },
  {
    "input": "Remove devqa from regression group",
    "output": "gpasswd -d devqa regression"
  },
  {
    "input": "Assign admin2 to it_admin group",
    "output": "gpasswd -a admin2 it_admin"
  },
  {
    "input": "Include josh in debug group",
    "output": "gpasswd -a josh debug"
  },
  {
    "input": "Remove emma from devtools group",
    "output": "gpasswd -d emma devtools"
  },
  {
    "input": "Add user leon to analytics group",
    "output": "gpasswd -a leon analytics"
  },
  {
    "input": "Assign vinay to builders group",
    "output": "gpasswd -a vinay builders"
  },
  {
    "input": "Exclude tara from dev group",
    "output": "gpasswd -d tara dev"
  },
  {
    "input": "Include zara in interns group",
    "output": "gpasswd -a zara interns"
  },
  {
    "input": "Add kyle to firmware group",
    "output": "gpasswd -a kyle firmware"
  },
  {
    "input": "Remove lina from testers group",
    "output": "gpasswd -d lina testers"
  },
  {
    "input": "Add aaron to moderators group",
    "output": "gpasswd -a aaron moderators"
  },
  {
    "input": "Include sean in experiments group",
    "output": "gpasswd -a sean experiments"
  },
  {
    "input": "Delete user arya from beta group",
    "output": "gpasswd -d arya beta"
  },
  {
    "input": "Add samir to codegroup",
    "output": "gpasswd -a samir codegroup"
  },
  {
    "input": "Add new_user to metrics group",
    "output": "gpasswd -a new_user metrics"
  },
  {
    "input": "Remove kiran from tools group",
    "output": "gpasswd -d kiran tools"
  },
  {
    "input": "Assign arjun to docker-admins group",
    "output": "gpasswd -a arjun docker-admins"
  },
  {
    "input": "Add bhavana to audit-log group",
    "output": "gpasswd -a bhavana audit-log"
  },
  {
    "input": "Exclude jordan from qa group",
    "output": "gpasswd -d jordan qa"
  },
  {
    "input": "Include user rohit in ai_team group",
    "output": "gpasswd -a rohit ai_team"
  },
  {
    "input": "Add dave to support group",
    "output": "gpasswd -a dave support"
  },
  {
    "input": "Remove jia from onboarding group",
    "output": "gpasswd -d jia onboarding"
  },
  {
    "input": "Add ravi to backend group",
    "output": "gpasswd -a ravi backend"
  },
  {
    "input": "Assign ankita to marketing group",
    "output": "gpasswd -a ankita marketing"
  },
  {
    "input": "Remove steve from demo group",
    "output": "gpasswd -d steve demo"
  },
  {
    "input": "Add maria to mlops group",
    "output": "gpasswd -a maria mlops"
  },
  {
    "input": "Add zahir to fastapi group",
    "output": "gpasswd -a zahir fastapi"
  },
  {
    "input": "Exclude devin from sandbox group",
    "output": "gpasswd -d devin sandbox"
  },
  {
    "input": "Add hannah to research group",
    "output": "gpasswd -a hannah research"
  },
  {
    "input": "Remove amit from docker-users group",
    "output": "gpasswd -d amit docker-users"
  },
  {
    "input": "Include user avni in qa group",
    "output": "gpasswd -a avni qa"
  },
  {
    "input": "Add jeeva to internal group",
    "output": "gpasswd -a jeeva internal"
  },
  {
    "input": "Assign user tony to releases group",
    "output": "gpasswd -a tony releases"
  },
  {
    "input": "Remove akshay from testers group",
    "output": "gpasswd -d akshay testers"
  },
  {
    "input": "Add vivek to devcloud group",
    "output": "gpasswd -a vivek devcloud"
  },
  {
    "input": "Include katie in dev_team group",
    "output": "gpasswd -a katie dev_team"
  },
  {
    "input": "Delete rebecca from beta_testers group",
    "output": "gpasswd -d rebecca beta_testers"
  },
  {
    "input": "Add mehul to ops group",
    "output": "gpasswd -a mehul ops"
  },
  {
    "input": "Assign sonia to uiux group",
    "output": "gpasswd -a sonia uiux"
  },
  {
    "input": "Remove george from operations group",
    "output": "gpasswd -d george operations"
  },
  {
    "input": "Include omar in reporting group",
    "output": "gpasswd -a omar reporting"
  },
  {
    "input": "Add maya to research_team group",
    "output": "gpasswd -a maya research_team"
  },
  {
    "input": "Remove rachel from logs group",
    "output": "gpasswd -d rachel logs"
  },
  {
    "input": "Add user arman to testers group",
    "output": "gpasswd -a arman testers"
  },
  {
    "input": "Include harsha in prod group",
    "output": "gpasswd -a harsha prod"
  },
  {
    "input": "Remove deepak from backend group",
    "output": "gpasswd -d deepak backend"
  },
  {
    "input": "Add jackie to documentation group",
    "output": "gpasswd -a jackie documentation"
  },
  {
    "input": "Add rishi to support_engineers group",
    "output": "gpasswd -a rishi support_engineers"
  },
  {
    "input": "Remove user amitabh from infra group",
    "output": "gpasswd -d amitabh infra"
  },
  {
    "input": "Create a new group called developers",
    "output": "groupadd developers"
  },
  {
    "input": "Add a group named testers",
    "output": "groupadd testers"
  },
  {
    "input": "Make a group for designers",
    "output": "groupadd designers"
  },
  {
    "input": "Create a group named interns",
    "output": "groupadd interns"
  },
  {
    "input": "Add the group qa_team",
    "output": "groupadd qa_team"
  },
  {
    "input": "Form a group called hr",
    "output": "groupadd hr"
  },
  {
    "input": "Set up group admins",
    "output": "groupadd admins"
  },
  {
    "input": "Add support group",
    "output": "groupadd support"
  },
  {
    "input": "Create an engineers group",
    "output": "groupadd engineers"
  },
  {
    "input": "Form a group for marketing",
    "output": "groupadd marketing"
  },
  {
    "input": "Add analytics as a new group",
    "output": "groupadd analytics"
  },
  {
    "input": "Create backend_team group",
    "output": "groupadd backend_team"
  },
  {
    "input": "Create group frontend_team",
    "output": "groupadd frontend_team"
  },
  {
    "input": "Make group content_creators",
    "output": "groupadd content_creators"
  },
  {
    "input": "Add the research group",
    "output": "groupadd research"
  },
  {
    "input": "Add sales as a new group",
    "output": "groupadd sales"
  },
  {
    "input": "Form a legal group",
    "output": "groupadd legal"
  },
  {
    "input": "Add security_team group",
    "output": "groupadd security_team"
  },
  {
    "input": "Create the devops group",
    "output": "groupadd devops"
  },
  {
    "input": "Make a group called dev_team",
    "output": "groupadd dev_team"
  },
  {
    "input": "Create a group called alpha_users",
    "output": "groupadd alpha_users"
  },
  {
    "input": "Add finance group",
    "output": "groupadd finance"
  },
  {
    "input": "Create training group",
    "output": "groupadd training"
  },
  {
    "input": "Add HR_department group",
    "output": "groupadd HR_department"
  },
  {
    "input": "Create group management",
    "output": "groupadd management"
  },
  {
    "input": "Create documentation team group",
    "output": "groupadd documentation"
  },
  {
    "input": "Add networking group",
    "output": "groupadd networking"
  },
  {
    "input": "Form UIUX group",
    "output": "groupadd UIUX"
  },
  {
    "input": "Add content_team group",
    "output": "groupadd content_team"
  },
  {
    "input": "Create ops_team group",
    "output": "groupadd ops_team"
  },
  {
    "input": "Add sysadmins group",
    "output": "groupadd sysadmins"
  },
  {
    "input": "Create group named testers_beta",
    "output": "groupadd testers_beta"
  },
  {
    "input": "Form QA_leads group",
    "output": "groupadd QA_leads"
  },
  {
    "input": "Add beta_users group",
    "output": "groupadd beta_users"
  },
  {
    "input": "Create documentation_team group",
    "output": "groupadd documentation_team"
  },
  {
    "input": "Add customer_support group",
    "output": "groupadd customer_support"
  },
  {
    "input": "Create interns2025 group",
    "output": "groupadd interns2025"
  },
  {
    "input": "Form contractors group",
    "output": "groupadd contractors"
  },
  {
    "input": "Create project_alpha group",
    "output": "groupadd project_alpha"
  },
  {
    "input": "Add team_rocket group",
    "output": "groupadd team_rocket"
  },
  {
    "input": "Create mentors group",
    "output": "groupadd mentors"
  },
  {
    "input": "Add root_team group",
    "output": "groupadd root_team"
  },
  {
    "input": "Create user_ops group",
    "output": "groupadd user_ops"
  },
  {
    "input": "Make a team group called release_team",
    "output": "groupadd release_team"
  },
  {
    "input": "Add interns_2024 group",
    "output": "groupadd interns_2024"
  },
  {
    "input": "Form system_admins group",
    "output": "groupadd system_admins"
  },
  {
    "input": "Create read_only_users group",
    "output": "groupadd read_only_users"
  },
  {
    "input": "Add software_engineers group",
    "output": "groupadd software_engineers"
  },
  {
    "input": "Create group CI_CD_team",
    "output": "groupadd CI_CD_team"
  },
  {
    "input": "Make mobile_team group",
    "output": "groupadd mobile_team"
  },
  {
    "input": "Add senior_devs group",
    "output": "groupadd senior_devs"
  },
  {
    "input": "Create staging_users group",
    "output": "groupadd staging_users"
  },
  {
    "input": "Add students2025 group",
    "output": "groupadd students2025"
  },
  {
    "input": "Create testers_interns group",
    "output": "groupadd testers_interns"
  },
  {
    "input": "Add superadmins group",
    "output": "groupadd superadmins"
  },
  {
    "input": "Create junior_devs group",
    "output": "groupadd junior_devs"
  },
  {
    "input": "Add product_team group",
    "output": "groupadd product_team"
  },
  {
    "input": "Make training_batch_1 group",
    "output": "groupadd training_batch_1"
  },
  {
    "input": "Add Linux_users group",
    "output": "groupadd Linux_users"
  },
  {
    "input": "Create mac_users group",
    "output": "groupadd mac_users"
  },
  {
    "input": "Add shell_access group",
    "output": "groupadd shell_access"
  },
  {
    "input": "Make support_nightshift group",
    "output": "groupadd support_nightshift"
  },
  {
    "input": "Add app_reviewers group",
    "output": "groupadd app_reviewers"
  },
  {
    "input": "Create UX_designers group",
    "output": "groupadd UX_designers"
  },
  {
    "input": "Add api_testers group",
    "output": "groupadd api_testers"
  },
  {
    "input": "Form python_dev group",
    "output": "groupadd python_dev"
  },
  {
    "input": "Create java_developers group",
    "output": "groupadd java_developers"
  },
  {
    "input": "Add golang_team group",
    "output": "groupadd golang_team"
  },
  {
    "input": "Create sql_users group",
    "output": "groupadd sql_users"
  },
  {
    "input": "Add db_admins group",
    "output": "groupadd db_admins"
  },
  {
    "input": "Make team_bangalore group",
    "output": "groupadd team_bangalore"
  },
  {
    "input": "Create security_audit group",
    "output": "groupadd security_audit"
  },
  {
    "input": "Add alpha_testers group",
    "output": "groupadd alpha_testers"
  },
  {
    "input": "Create ci_jobs group",
    "output": "groupadd ci_jobs"
  },
  {
    "input": "Make test_lab group",
    "output": "groupadd test_lab"
  },
  {
    "input": "Add dev_infra group",
    "output": "groupadd dev_infra"
  },
  {
    "input": "Create support_batch1 group",
    "output": "groupadd support_batch1"
  },
  {
    "input": "Add voice_test group",
    "output": "groupadd voice_test"
  },
  {
    "input": "Create documentation_review group",
    "output": "groupadd documentation_review"
  },
  {
    "input": "Add graphics_team group",
    "output": "groupadd graphics_team"
  },
  {
    "input": "Create internal_tools group",
    "output": "groupadd internal_tools"
  },
  {
    "input": "Add group sde_interns",
    "output": "groupadd sde_interns"
  },
  {
    "input": "Create team_delta group",
    "output": "groupadd team_delta"
  },
  {
    "input": "Make group research_2025",
    "output": "groupadd research_2025"
  },
  {
    "input": "Add training_group_june",
    "output": "groupadd training_group_june"
  },
  {
    "input": "Form new group summer_batch",
    "output": "groupadd summer_batch"
  },
  {
    "input": "Create a group called staging_team",
    "output": "groupadd staging_team"
  },
  {
    "input": "Add api_developers as a group",
    "output": "groupadd api_developers"
  },
  {
    "input": "Make a team called bughunters",
    "output": "groupadd bughunters"
  },
  {
    "input": "Create test_engineers group",
    "output": "groupadd test_engineers"
  },
  {
    "input": "Add vfx_artists group",
    "output": "groupadd vfx_artists"
  },
  {
    "input": "Create freelancers group",
    "output": "groupadd freelancers"
  },
  {
    "input": "Add cloud_admins group",
    "output": "groupadd cloud_admins"
  },
  {
    "input": "Create group product_research",
    "output": "groupadd product_research"
  },
  {
    "input": "Add onboarding_team group",
    "output": "groupadd onboarding_team"
  },
  {
    "input": "Create UX_team group",
    "output": "groupadd UX_team"
  },
  {
    "input": "Form a group for policy_review",
    "output": "groupadd policy_review"
  },
  {
    "input": "Add access_control group",
    "output": "groupadd access_control"
  },
  {
    "input": "Create high_security group",
    "output": "groupadd high_security"
  },
  {
    "input": "Make internal_review group",
    "output": "groupadd internal_review"
  },
  {
    "input": "Add sys_maintenance group",
    "output": "groupadd sys_maintenance"
  },
  {
    "input": "Form firmware_team group",
    "output": "groupadd firmware_team"
  },
  {
    "input": "Create kiosk_users group",
    "output": "groupadd kiosk_users"
  },
  {
    "input": "Add device_ops group",
    "output": "groupadd device_ops"
  },
  {
    "input": "Create usergroup_example group",
    "output": "groupadd usergroup_example"
  },
  {
    "input": "Add testers_2025 group",
    "output": "groupadd testers_2025"
  },
  {
    "input": "Create a team named rest_api_group",
    "output": "groupadd rest_api_group"
  },
  {
    "input": "Form a group junior_engineers",
    "output": "groupadd junior_engineers"
  },
  {
    "input": "Add contract_devs group",
    "output": "groupadd contract_devs"
  },
  {
    "input": "Create sprint_5_team group",
    "output": "groupadd sprint_5_team"
  },
  {
    "input": "Add new group called security_ops",
    "output": "groupadd security_ops"
  },
  {
    "input": "Form a group gpu_cluster",
    "output": "groupadd gpu_cluster"
  },
  {
    "input": "Create ldap_users group",
    "output": "groupadd ldap_users"
  },
  {
    "input": "Add preprod_team group",
    "output": "groupadd preprod_team"
  },
  {
    "input": "Form devtest_users group",
    "output": "groupadd devtest_users"
  },
  {
    "input": "Add observers group",
    "output": "groupadd observers"
  },
  {
    "input": "Create support_leads group",
    "output": "groupadd support_leads"
  },
  {
    "input": "Add guest_access group",
    "output": "groupadd guest_access"
  },
  {
    "input": "Create content_review group",
    "output": "groupadd content_review"
  },
  {
    "input": "Make internal_collab group",
    "output": "groupadd internal_collab"
  },
  {
    "input": "Add virtual_machines group",
    "output": "groupadd virtual_machines"
  },
  {
    "input": "Create interview_panel group",
    "output": "groupadd interview_panel"
  },
  {
    "input": "Add early_access group",
    "output": "groupadd early_access"
  },
  {
    "input": "Create custom_theme_users group",
    "output": "groupadd custom_theme_users"
  },
  {
    "input": "Add marketing_interns group",
    "output": "groupadd marketing_interns"
  },
  {
    "input": "Create frontend_leads group",
    "output": "groupadd frontend_leads"
  },
  {
    "input": "Make data_processing group",
    "output": "groupadd data_processing"
  },
  {
    "input": "Add pentest_team group",
    "output": "groupadd pentest_team"
  },
  {
    "input": "Create ai_research group",
    "output": "groupadd ai_research"
  },
  {
    "input": "Form simulation_users group",
    "output": "groupadd simulation_users"
  },
  {
    "input": "Create trial_users group",
    "output": "groupadd trial_users"
  },
  {
    "input": "Add ci_testers group",
    "output": "groupadd ci_testers"
  },
  {
    "input": "Create sandbox_team group",
    "output": "groupadd sandbox_team"
  },
  {
    "input": "Add design_review group",
    "output": "groupadd design_review"
  },
  {
    "input": "Make onboarding_batch group",
    "output": "groupadd onboarding_batch"
  },
  {
    "input": "Create node_admins group",
    "output": "groupadd node_admins"
  },
  {
    "input": "Delete the group named developers",
    "output": "groupdel developers"
  },
  {
    "input": "Remove the group called qa_team",
    "output": "groupdel qa_team"
  },
  {
    "input": "Delete group human_resources",
    "output": "groupdel human_resources"
  },
  {
    "input": "Remove ui_ux group from the system",
    "output": "groupdel ui_ux"
  },
  {
    "input": "Delete the media_team group",
    "output": "groupdel media_team"
  },
  {
    "input": "Remove digital_marketing from groups",
    "output": "groupdel digital_marketing"
  },
  {
    "input": "Delete eng_team group",
    "output": "groupdel eng_team"
  },
  {
    "input": "Remove the group data_team",
    "output": "groupdel data_team"
  },
  {
    "input": "Delete operations group",
    "output": "groupdel operations"
  },
  {
    "input": "Remove qa_engineers from the system",
    "output": "groupdel qa_engineers"
  },
  {
    "input": "Delete the interns group",
    "output": "groupdel interns"
  },
  {
    "input": "Remove backend_team",
    "output": "groupdel backend_team"
  },
  {
    "input": "Delete group ui_team",
    "output": "groupdel ui_team"
  },
  {
    "input": "Remove the infra_devops group",
    "output": "groupdel infra_devops"
  },
  {
    "input": "Delete super_admins group",
    "output": "groupdel super_admins"
  },
  {
    "input": "Remove legal_team group from system",
    "output": "groupdel legal_team"
  },
  {
    "input": "Delete alpha_project group",
    "output": "groupdel alpha_project"
  },
  {
    "input": "Remove creative_team group",
    "output": "groupdel creative_team"
  },
  {
    "input": "Delete system_admins",
    "output": "groupdel system_admins"
  },
  {
    "input": "Remove root_access group",
    "output": "groupdel root_access"
  },
  {
    "input": "Delete the infra_team group",
    "output": "groupdel infra_team"
  },
  {
    "input": "Remove tech_support from groups",
    "output": "groupdel tech_support"
  },
  {
    "input": "Delete mentorship_team group",
    "output": "groupdel mentorship_team"
  },
  {
    "input": "Remove beta_testers group",
    "output": "groupdel beta_testers"
  },
  {
    "input": "Delete account_ops",
    "output": "groupdel account_ops"
  },
  {
    "input": "Remove mobile_dev group",
    "output": "groupdel mobile_dev"
  },
  {
    "input": "Delete research_team group",
    "output": "groupdel research_team"
  },
  {
    "input": "Remove training_dept",
    "output": "groupdel training_dept"
  },
  {
    "input": "Delete software_dev group",
    "output": "groupdel software_dev"
  },
  {
    "input": "Remove early_users group",
    "output": "groupdel early_users"
  },
  {
    "input": "Delete infosec_team group",
    "output": "groupdel infosec_team"
  },
  {
    "input": "Remove rocket_team",
    "output": "groupdel rocket_team"
  },
  {
    "input": "Delete batch1_training group",
    "output": "groupdel batch1_training"
  },
  {
    "input": "Remove readonly_group",
    "output": "groupdel readonly_group"
  },
  {
    "input": "Delete final_years group",
    "output": "groupdel final_years"
  },
  {
    "input": "Remove tools_internal",
    "output": "groupdel tools_internal"
  },
  {
    "input": "Delete support_1 group",
    "output": "groupdel support_1"
  },
  {
    "input": "Remove onboarding_unit",
    "output": "groupdel onboarding_unit"
  },
  {
    "input": "Delete voice_team group",
    "output": "groupdel voice_team"
  },
  {
    "input": "Remove visual_team group",
    "output": "groupdel visual_team"
  },
  {
    "input": "Delete ux_team",
    "output": "groupdel ux_team"
  },
  {
    "input": "Remove doc_review group",
    "output": "groupdel doc_review"
  },
  {
    "input": "Delete sim_team",
    "output": "groupdel sim_team"
  },
  {
    "input": "Remove reviewers_app group",
    "output": "groupdel reviewers_app"
  },
  {
    "input": "Delete go_dev group",
    "output": "groupdel go_dev"
  },
  {
    "input": "Remove node_ops group",
    "output": "groupdel node_ops"
  },
  {
    "input": "Delete java_team group",
    "output": "groupdel java_team"
  },
  {
    "input": "Remove graphics_ops",
    "output": "groupdel graphics_ops"
  },
  {
    "input": "Delete legacy_team",
    "output": "groupdel legacy_team"
  },
  {
    "input": "Remove api_team group",
    "output": "groupdel api_team"
  },
  {
    "input": "Delete debug_team",
    "output": "groupdel debug_team"
  },
  {
    "input": "Remove team_training group",
    "output": "groupdel team_training"
  },
  {
    "input": "Delete alpha_team",
    "output": "groupdel alpha_team"
  },
  {
    "input": "Remove analytics_group",
    "output": "groupdel analytics_group"
  },
  {
    "input": "Delete the docker_admins group",
    "output": "groupdel docker_admins"
  },
  {
    "input": "Remove dev_group",
    "output": "groupdel dev_group"
  },
  {
    "input": "Delete python_devs",
    "output": "groupdel python_devs"
  },
  {
    "input": "Remove junior_dev group",
    "output": "groupdel junior_dev"
  },
  {
    "input": "Delete sysops_team group",
    "output": "groupdel sysops_team"
  },
  {
    "input": "Remove team_delta group",
    "output": "groupdel team_delta"
  },
  {
    "input": "Delete prod_admins group",
    "output": "groupdel prod_admins"
  },
  {
    "input": "Remove dev_team_a",
    "output": "groupdel dev_team_a"
  },
  {
    "input": "Delete kernel_dev group",
    "output": "groupdel kernel_dev"
  },
  {
    "input": "Remove final_project group",
    "output": "groupdel final_project"
  },
  {
    "input": "Delete ux_engineers group",
    "output": "groupdel ux_engineers"
  },
  {
    "input": "Remove marketing_ops",
    "output": "groupdel marketing_ops"
  },
  {
    "input": "Delete version1_test group",
    "output": "groupdel version1_test"
  },
  {
    "input": "Remove editor_users",
    "output": "groupdel editor_users"
  },
  {
    "input": "Delete staging_team group",
    "output": "groupdel staging_team"
  },
  {
    "input": "Remove testing_users",
    "output": "groupdel testing_users"
  },
  {
    "input": "Delete qa_specialists",
    "output": "groupdel qa_specialists"
  },
  {
    "input": "Remove ci_cd_pipeline group",
    "output": "groupdel ci_cd_pipeline"
  },
  {
    "input": "Delete legacy_admins",
    "output": "groupdel legacy_admins"
  },
  {
    "input": "Remove app_deploy group",
    "output": "groupdel app_deploy"
  },
  {
    "input": "Delete training_class group",
    "output": "groupdel training_class"
  },
  {
    "input": "Remove test_branch team",
    "output": "groupdel test_branch"
  },
  {
    "input": "Delete onboarding_batch1",
    "output": "groupdel onboarding_batch1"
  },
  {
    "input": "Remove docs_group",
    "output": "groupdel docs_group"
  },
  {
    "input": "Delete bash_team group",
    "output": "groupdel bash_team"
  },
  {
    "input": "Remove user_audit",
    "output": "groupdel user_audit"
  },
  {
    "input": "Delete mysql_admins",
    "output": "groupdel mysql_admins"
  },
  {
    "input": "Remove prod_cluster",
    "output": "groupdel prod_cluster"
  },
  {
    "input": "Delete network_admins",
    "output": "groupdel network_admins"
  },
  {
    "input": "Remove devops_support",
    "output": "groupdel devops_support"
  },
  {
    "input": "Delete java_backends",
    "output": "groupdel java_backends"
  },
  {
    "input": "Remove cloud_services group",
    "output": "groupdel cloud_services"
  },
  {
    "input": "Delete spark_team",
    "output": "groupdel spark_team"
  },
  {
    "input": "Remove ai_lab group",
    "output": "groupdel ai_lab"
  },
  {
    "input": "Delete test_group7",
    "output": "groupdel test_group7"
  },
  {
    "input": "Remove engineering_ops",
    "output": "groupdel engineering_ops"
  },
  {
    "input": "Delete dev_batch_2022",
    "output": "groupdel dev_batch_2022"
  },
  {
    "input": "Remove gpu_access group",
    "output": "groupdel gpu_access"
  },
  {
    "input": "Delete container_admins",
    "output": "groupdel container_admins"
  },
  {
    "input": "Remove vfx_team",
    "output": "groupdel vfx_team"
  },
  {
    "input": "Delete cli_devs",
    "output": "groupdel cli_devs"
  },
  {
    "input": "Remove js_team",
    "output": "groupdel js_team"
  },
  {
    "input": "Delete metrics_ops",
    "output": "groupdel metrics_ops"
  },
  {
    "input": "Remove flask_backend group",
    "output": "groupdel flask_backend"
  },
  {
    "input": "Delete api_doc_team",
    "output": "groupdel api_doc_team"
  },
  {
    "input": "Remove vue_devs",
    "output": "groupdel vue_devs"
  },
  {
    "input": "Delete bootstrap_team",
    "output": "groupdel bootstrap_team"
  },
  {
    "input": "Rename the group devs to developers",
    "output": "groupmod -n developers devs"
  },
  {
    "input": "Change group name from testers to qa_team",
    "output": "groupmod -n qa_team testers"
  },
  {
    "input": "Modify group hr to human_resources",
    "output": "groupmod -n human_resources hr"
  },
  {
    "input": "Rename designers group to ui_ux",
    "output": "groupmod -n ui_ux designers"
  },
  {
    "input": "Change the group content_creators to media_team",
    "output": "groupmod -n media_team content_creators"
  },
  {
    "input": "Update the group name from marketing to digital_marketing",
    "output": "groupmod -n digital_marketing marketing"
  },
  {
    "input": "Switch group name from engineers to eng_team",
    "output": "groupmod -n eng_team engineers"
  },
  {
    "input": "Rename analytics group as data_team",
    "output": "groupmod -n data_team analytics"
  },
  {
    "input": "Change ops to operations",
    "output": "groupmod -n operations ops"
  },
  {
    "input": "Rename group qa to qa_engineers",
    "output": "groupmod -n qa_engineers qa"
  },
  {
    "input": "Rename interns2024 to interns",
    "output": "groupmod -n interns interns2024"
  },
  {
    "input": "Change backend to backend_team",
    "output": "groupmod -n backend_team backend"
  },
  {
    "input": "Update frontend group to ui_team",
    "output": "groupmod -n ui_team frontend"
  },
  {
    "input": "Rename the group devops to infra_devops",
    "output": "groupmod -n infra_devops devops"
  },
  {
    "input": "Change name of admins group to super_admins",
    "output": "groupmod -n super_admins admins"
  },
  {
    "input": "Switch group legal to legal_team",
    "output": "groupmod -n legal_team legal"
  },
  {
    "input": "Rename project_alpha to alpha_project",
    "output": "groupmod -n alpha_project project_alpha"
  },
  {
    "input": "Update the name of content_team to creative_team",
    "output": "groupmod -n creative_team content_team"
  },
  {
    "input": "Change sysadmins to system_admins",
    "output": "groupmod -n system_admins sysadmins"
  },
  {
    "input": "Rename the team root_team to root_access",
    "output": "groupmod -n root_access root_team"
  },
  {
    "input": "Change dev_infra to infra_team",
    "output": "groupmod -n infra_team dev_infra"
  },
  {
    "input": "Rename support to tech_support",
    "output": "groupmod -n tech_support support"
  },
  {
    "input": "Update mentors group to mentorship_team",
    "output": "groupmod -n mentorship_team mentors"
  },
  {
    "input": "Change beta_users to beta_testers",
    "output": "groupmod -n beta_testers beta_users"
  },
  {
    "input": "Switch user_ops group name to account_ops",
    "output": "groupmod -n account_ops user_ops"
  },
  {
    "input": "Rename mobile_team to mobile_dev",
    "output": "groupmod -n mobile_dev mobile_team"
  },
  {
    "input": "Change group research to research_team",
    "output": "groupmod -n research_team research"
  },
  {
    "input": "Rename training to training_dept",
    "output": "groupmod -n training_dept training"
  },
  {
    "input": "Update dev_team group name to software_dev",
    "output": "groupmod -n software_dev dev_team"
  },
  {
    "input": "Change alpha_users to early_users",
    "output": "groupmod -n early_users alpha_users"
  },
  {
    "input": "Rename security_team to infosec_team",
    "output": "groupmod -n infosec_team security_team"
  },
  {
    "input": "Change team_rocket to rocket_team",
    "output": "groupmod -n rocket_team team_rocket"
  },
  {
    "input": "Rename training_batch_1 to batch1_training",
    "output": "groupmod -n batch1_training training_batch_1"
  },
  {
    "input": "Update read_only_users to readonly_group",
    "output": "groupmod -n readonly_group read_only_users"
  },
  {
    "input": "Change students2025 to final_years",
    "output": "groupmod -n final_years students2025"
  },
  {
    "input": "Rename internal_tools to tools_internal",
    "output": "groupmod -n tools_internal internal_tools"
  },
  {
    "input": "Update group support_batch1 to support_1",
    "output": "groupmod -n support_1 support_batch1"
  },
  {
    "input": "Change onboarding_team to onboarding_unit",
    "output": "groupmod -n onboarding_unit onboarding_team"
  },
  {
    "input": "Rename voice_test group to voice_team",
    "output": "groupmod -n voice_team voice_test"
  },
  {
    "input": "Change graphics_team to visual_team",
    "output": "groupmod -n visual_team graphics_team"
  },
  {
    "input": "Rename UX_designers to ux_team",
    "output": "groupmod -n ux_team UX_designers"
  },
  {
    "input": "Update documentation_review to doc_review",
    "output": "groupmod -n doc_review documentation_review"
  },
  {
    "input": "Change simulation_users to sim_team",
    "output": "groupmod -n sim_team simulation_users"
  },
  {
    "input": "Rename app_reviewers to reviewers_app",
    "output": "groupmod -n reviewers_app app_reviewers"
  },
  {
    "input": "Change golang_team to go_dev",
    "output": "groupmod -n go_dev golang_team"
  },
  {
    "input": "Rename node_admins to node_ops",
    "output": "groupmod -n node_ops node_admins"
  },
  {
    "input": "Update java_developers to java_team",
    "output": "groupmod -n java_team java_developers"
  },
  {
    "input": "Change graphics_team to graphics_ops",
    "output": "groupmod -n graphics_ops graphics_team"
  },
  {
    "input": "Rename the group devs to developers",
    "output": "groupmod -n developers devs"
  },
  {
    "input": "Change group name from testers to qa_team",
    "output": "groupmod -n qa_team testers"
  },
  {
    "input": "Modify group hr to human_resources",
    "output": "groupmod -n human_resources hr"
  },
  {
    "input": "Rename designers group to ui_ux",
    "output": "groupmod -n ui_ux designers"
  },
  {
    "input": "Change the group content_creators to media_team",
    "output": "groupmod -n media_team content_creators"
  },
  {
    "input": "Update the group name from marketing to digital_marketing",
    "output": "groupmod -n digital_marketing marketing"
  },
  {
    "input": "Switch group name from engineers to eng_team",
    "output": "groupmod -n eng_team engineers"
  },
  {
    "input": "Rename analytics group as data_team",
    "output": "groupmod -n data_team analytics"
  },
  {
    "input": "Change ops to operations",
    "output": "groupmod -n operations ops"
  },
  {
    "input": "Rename group qa to qa_engineers",
    "output": "groupmod -n qa_engineers qa"
  },
  {
    "input": "Rename interns2024 to interns",
    "output": "groupmod -n interns interns2024"
  },
  {
    "input": "Change backend to backend_team",
    "output": "groupmod -n backend_team backend"
  },
  {
    "input": "Update frontend group to ui_team",
    "output": "groupmod -n ui_team frontend"
  },
  {
    "input": "Rename the group devops to infra_devops",
    "output": "groupmod -n infra_devops devops"
  },
  {
    "input": "Change name of admins group to super_admins",
    "output": "groupmod -n super_admins admins"
  },
  {
    "input": "Switch group legal to legal_team",
    "output": "groupmod -n legal_team legal"
  },
  {
    "input": "Rename project_alpha to alpha_project",
    "output": "groupmod -n alpha_project project_alpha"
  },
  {
    "input": "Update the name of content_team to creative_team",
    "output": "groupmod -n creative_team content_team"
  },
  {
    "input": "Change sysadmins to system_admins",
    "output": "groupmod -n system_admins sysadmins"
  },
  {
    "input": "Rename the team root_team to root_access",
    "output": "groupmod -n root_access root_team"
  },
  {
    "input": "Change dev_infra to infra_team",
    "output": "groupmod -n infra_team dev_infra"
  },
  {
    "input": "Rename support to tech_support",
    "output": "groupmod -n tech_support support"
  },
  {
    "input": "Update mentors group to mentorship_team",
    "output": "groupmod -n mentorship_team mentors"
  },
  {
    "input": "Change beta_users to beta_testers",
    "output": "groupmod -n beta_testers beta_users"
  },
  {
    "input": "Switch user_ops group name to account_ops",
    "output": "groupmod -n account_ops user_ops"
  },
  {
    "input": "Rename mobile_team to mobile_dev",
    "output": "groupmod -n mobile_dev mobile_team"
  },
  {
    "input": "Change group research to research_team",
    "output": "groupmod -n research_team research"
  },
  {
    "input": "Rename training to training_dept",
    "output": "groupmod -n training_dept training"
  },
  {
    "input": "Update dev_team group name to software_dev",
    "output": "groupmod -n software_dev dev_team"
  },
  {
    "input": "Change alpha_users to early_users",
    "output": "groupmod -n early_users alpha_users"
  },
  {
    "input": "Rename security_team to infosec_team",
    "output": "groupmod -n infosec_team security_team"
  },
  {
    "input": "Change team_rocket to rocket_team",
    "output": "groupmod -n rocket_team team_rocket"
  },
  {
    "input": "Rename training_batch_1 to batch1_training",
    "output": "groupmod -n batch1_training training_batch_1"
  },
  {
    "input": "Update read_only_users to readonly_group",
    "output": "groupmod -n readonly_group read_only_users"
  },
  {
    "input": "Change students2025 to final_years",
    "output": "groupmod -n final_years students2025"
  },
  {
    "input": "Rename internal_tools to tools_internal",
    "output": "groupmod -n tools_internal internal_tools"
  },
  {
    "input": "Update group support_batch1 to support_1",
    "output": "groupmod -n support_1 support_batch1"
  },
  {
    "input": "Change onboarding_team to onboarding_unit",
    "output": "groupmod -n onboarding_unit onboarding_team"
  },
  {
    "input": "Rename voice_test group to voice_team",
    "output": "groupmod -n voice_team voice_test"
  },
  {
    "input": "Change graphics_team to visual_team",
    "output": "groupmod -n visual_team graphics_team"
  },
  {
    "input": "Rename UX_designers to ux_team",
    "output": "groupmod -n ux_team UX_designers"
  },
  {
    "input": "Update documentation_review to doc_review",
    "output": "groupmod -n doc_review documentation_review"
  },
  {
    "input": "Change simulation_users to sim_team",
    "output": "groupmod -n sim_team simulation_users"
  },
  {
    "input": "Rename app_reviewers to reviewers_app",
    "output": "groupmod -n reviewers_app app_reviewers"
  },
  {
    "input": "Change golang_team to go_dev",
    "output": "groupmod -n go_dev golang_team"
  },
  {
    "input": "Rename node_admins to node_ops",
    "output": "groupmod -n node_ops node_admins"
  },
  {
    "input": "Update java_developers to java_team",
    "output": "groupmod -n java_team java_developers"
  },
  {
    "input": "Change graphics_team to graphics_ops",
    "output": "groupmod -n graphics_ops graphics_team"
  },
  {
    "input": "Rename legacy_users to legacy_team",
    "output": "groupmod -n legacy_team legacy_users"
  },
  {
    "input": "Update api_dev to api_team",
    "output": "groupmod -n api_team api_dev"
  },
  {
    "input": "Switch debug_access to debug_team",
    "output": "groupmod -n debug_team debug_access"
  },
  {
    "input": "Rename training_team to team_training",
    "output": "groupmod -n team_training training_team"
  },
  {
    "input": "Lock the password for user john",
    "output": "passwd -l john"
  },
  {
    "input": "Disable password login for alice",
    "output": "passwd -l alice"
  },
  {
    "input": "Lock user bob's account",
    "output": "passwd -l bob"
  },
  {
    "input": "Prevent dave from logging in with password",
    "output": "passwd -l dave"
  },
  {
    "input": "Temporarily lock sam's password",
    "output": "passwd -l sam"
  },
  {
    "input": "Lock charlie's login credentials",
    "output": "passwd -l charlie"
  },
  {
    "input": "Disable emma's login with password",
    "output": "passwd -l emma"
  },
  {
    "input": "Prevent lisa from using her password",
    "output": "passwd -l lisa"
  },
  {
    "input": "Lock login access for user ryan",
    "output": "passwd -l ryan"
  },
  {
    "input": "Restrict password access for nick",
    "output": "passwd -l nick"
  },
  {
    "input": "Temporarily disable password login for root",
    "output": "passwd -l root"
  },
  {
    "input": "Deactivate steve's password",
    "output": "passwd -l steve"
  },
  {
    "input": "Lock password authentication for rachel",
    "output": "passwd -l rachel"
  },
  {
    "input": "Disable password for test_user",
    "output": "passwd -l test_user"
  },
  {
    "input": "Lock developer1 account",
    "output": "passwd -l developer1"
  },
  {
    "input": "Block mark from logging in using password",
    "output": "passwd -l mark"
  },
  {
    "input": "Temporarily lock devops_admin's password",
    "output": "passwd -l devops_admin"
  },
  {
    "input": "Lock johnny's password access",
    "output": "passwd -l johnny"
  },
  {
    "input": "Disable sysadmin password access",
    "output": "passwd -l sysadmin"
  },
  {
    "input": "Block admin1 from password login",
    "output": "passwd -l admin1"
  },
  {
    "input": "Temporarily disable password for user1",
    "output": "passwd -l user1"
  },
  {
    "input": "Lock bob_admin's login method",
    "output": "passwd -l bob_admin"
  },
  {
    "input": "Restrict employee45's password login",
    "output": "passwd -l employee45"
  },
  {
    "input": "Lock student7 from accessing account via password",
    "output": "passwd -l student7"
  },
  {
    "input": "Temporarily prevent linuxuser from logging in",
    "output": "passwd -l linuxuser"
  },
  {
    "input": "Disable qa_user's password",
    "output": "passwd -l qa_user"
  },
  {
    "input": "Lock dev_admin login using password",
    "output": "passwd -l dev_admin"
  },
  {
    "input": "Block webuser from password access",
    "output": "passwd -l webuser"
  },
  {
    "input": "Lock engineer3 credentials",
    "output": "passwd -l engineer3"
  },
  {
    "input": "Restrict test_account password entry",
    "output": "passwd -l test_account"
  },
  {
    "input": "Disable login for client_service",
    "output": "passwd -l client_service"
  },
  {
    "input": "Block rootadmin's login access",
    "output": "passwd -l rootadmin"
  },
  {
    "input": "Lock internal_user's credentials",
    "output": "passwd -l internal_user"
  },
  {
    "input": "Temporarily disable script_user password",
    "output": "passwd -l script_user"
  },
  {
    "input": "Prevent staging_user from password login",
    "output": "passwd -l staging_user"
  },
  {
    "input": "Block deployuser from accessing system with password",
    "output": "passwd -l deployuser"
  },
  {
    "input": "Lock frontend_dev's password",
    "output": "passwd -l frontend_dev"
  },
  {
    "input": "Disable docker_runner's login password",
    "output": "passwd -l docker_runner"
  },
  {
    "input": "Temporarily block temp_user",
    "output": "passwd -l temp_user"
  },
  {
    "input": "Restrict ci_runner password login",
    "output": "passwd -l ci_runner"
  },
  {
    "input": "Lock guest1's account temporarily",
    "output": "passwd -l guest1"
  },
  {
    "input": "Disable database_admin's password authentication",
    "output": "passwd -l database_admin"
  },
  {
    "input": "Prevent hr_staff from password access",
    "output": "passwd -l hr_staff"
  },
  {
    "input": "Lock testenv's login method",
    "output": "passwd -l testenv"
  },
  {
    "input": "Block designer3's login via password",
    "output": "passwd -l designer3"
  },
  {
    "input": "Disable recruiter password usage",
    "output": "passwd -l recruiter"
  },
  {
    "input": "Prevent dev from logging in with password",
    "output": "passwd -l dev"
  },
  {
    "input": "Lock zara's password login",
    "output": "passwd -l zara"
  },
  {
    "input": "Disable developer99's authentication temporarily",
    "output": "passwd -l developer99"
  },
  {
    "input": "Restrict backup_admin from logging in",
    "output": "passwd -l backup_admin"
  },
  {
    "input": "Block tempaccount from using password",
    "output": "passwd -l tempaccount"
  },
  {
    "input": "Temporarily disable analytics_user login",
    "output": "passwd -l analytics_user"
  },
  {
    "input": "Disable password login for timothy",
    "output": "passwd -l timothy"
  },
  {
    "input": "Lock login for helpdesk user",
    "output": "passwd -l helpdesk"
  },
  {
    "input": "Temporarily disable password for system_analyst",
    "output": "passwd -l system_analyst"
  },
  {
    "input": "Block login using password for user ben",
    "output": "passwd -l ben"
  },
  {
    "input": "Restrict login for dev_user",
    "output": "passwd -l dev_user"
  },
  {
    "input": "Lock credentials for test_user2",
    "output": "passwd -l test_user2"
  },
  {
    "input": "Disable password-based access for harry",
    "output": "passwd -l harry"
  },
  {
    "input": "Temporarily lock login access for user jess",
    "output": "passwd -l jess"
  },
  {
    "input": "Lock dev_backup account",
    "output": "passwd -l dev_backup"
  },
  {
    "input": "Restrict password login for account manager",
    "output": "passwd -l manager"
  },
  {
    "input": "Prevent qa2 from logging in",
    "output": "passwd -l qa2"
  },
  {
    "input": "Disable password for sys_helper",
    "output": "passwd -l sys_helper"
  },
  {
    "input": "Block login access for intern_dev",
    "output": "passwd -l intern_dev"
  },
  {
    "input": "Lock password access for cto",
    "output": "passwd -l cto"
  },
  {
    "input": "Restrict login via password for ops_user",
    "output": "passwd -l ops_user"
  },
  {
    "input": "Temporarily lock password for backend_admin",
    "output": "passwd -l backend_admin"
  },
  {
    "input": "Prevent login for mobile_dev",
    "output": "passwd -l mobile_dev"
  },
  {
    "input": "Disable password login for freelancer_01",
    "output": "passwd -l freelancer_01"
  },
  {
    "input": "Lock password login for account trials",
    "output": "passwd -l trials"
  },
  {
    "input": "Block service_account from login",
    "output": "passwd -l service_account"
  },
  {
    "input": "Temporarily disable login for project_user",
    "output": "passwd -l project_user"
  },
  {
    "input": "Prevent admin99 from logging in with password",
    "output": "passwd -l admin99"
  },
  {
    "input": "Lock credentials for data_scientist",
    "output": "passwd -l data_scientist"
  },
  {
    "input": "Restrict test_dev access via password",
    "output": "passwd -l test_dev"
  },
  {
    "input": "Disable login for analytics2",
    "output": "passwd -l analytics2"
  },
  {
    "input": "Block login for ui_designer",
    "output": "passwd -l ui_designer"
  },
  {
    "input": "Lock password for remote_user",
    "output": "passwd -l remote_user"
  },
  {
    "input": "Restrict login via password for edge_admin",
    "output": "passwd -l edge_admin"
  },
  {
    "input": "Temporarily disable backend_dev",
    "output": "passwd -l backend_dev"
  },
  {
    "input": "Block login using password for log_user",
    "output": "passwd -l log_user"
  },
  {
    "input": "Prevent testagent from password login",
    "output": "passwd -l testagent"
  },
  {
    "input": "Lock system_admin password",
    "output": "passwd -l system_admin"
  },
  {
    "input": "Disable credentials for batch_runner",
    "output": "passwd -l batch_runner"
  },
  {
    "input": "Lock guest_temp from logging in",
    "output": "passwd -l guest_temp"
  },
  {
    "input": "Block password login for xavier",
    "output": "passwd -l xavier"
  },
  {
    "input": "Temporarily lock web_admin",
    "output": "passwd -l web_admin"
  },
  {
    "input": "Restrict password access for audit_user",
    "output": "passwd -l audit_user"
  },
  {
    "input": "Disable user william's login",
    "output": "passwd -l william"
  },
  {
    "input": "Prevent login for docker_admin",
    "output": "passwd -l docker_admin"
  },
  {
    "input": "Lock tester1 password",
    "output": "passwd -l tester1"
  },
  {
    "input": "Disable access for linux_dev",
    "output": "passwd -l linux_dev"
  },
  {
    "input": "Restrict frontend2 from using password",
    "output": "passwd -l frontend2"
  },
  {
    "input": "Lock login for eric",
    "output": "passwd -l eric"
  },
  {
    "input": "Block login credentials for consultant",
    "output": "passwd -l consultant"
  },
  {
    "input": "Disable login via password for guest_temp2",
    "output": "passwd -l guest_temp2"
  },
  {
    "input": "Prevent sdev from password access",
    "output": "passwd -l sdev"
  },
  {
    "input": "Lock login method for automation",
    "output": "passwd -l automation"
  },
  {
    "input": "Block user dev_ux from logging in",
    "output": "passwd -l dev_ux"
  },
  {
    "input": "Restrict support_user's password access",
    "output": "passwd -l support_user"
  },
  {
    "input": "Disable login access for intern_test",
    "output": "passwd -l intern_test"
  },
  {
    "input": "Unlock user account named devuser",
    "output": "passwd -u devuser"
  },
  {
    "input": "Enable login for sysadmin",
    "output": "passwd -u sysadmin"
  },
  {
    "input": "Re-enable access for account manager1",
    "output": "passwd -u manager1"
  },
  {
    "input": "Unblock the test_user account",
    "output": "passwd -u test_user"
  },
  {
    "input": "Allow user qa_lead to log in again",
    "output": "passwd -u qa_lead"
  },
  {
    "input": "Reactivate password login for alice",
    "output": "passwd -u alice"
  },
  {
    "input": "Restore login permissions for dev_ops",
    "output": "passwd -u dev_ops"
  },
  {
    "input": "Enable backend_user again",
    "output": "passwd -u backend_user"
  },
  {
    "input": "Remove lock on account data_admin",
    "output": "passwd -u data_admin"
  },
  {
    "input": "Unlock guest_temp user",
    "output": "passwd -u guest_temp"
  },
  {
    "input": "Re-enable login for user helpline",
    "output": "passwd -u helpline"
  },
  {
    "input": "Allow login for analyst_1",
    "output": "passwd -u analyst_1"
  },
  {
    "input": "Reactivate credentials for it_support",
    "output": "passwd -u it_support"
  },
  {
    "input": "Unblock engineer_23",
    "output": "passwd -u engineer_23"
  },
  {
    "input": "Unlock access for frontend_dev",
    "output": "passwd -u frontend_dev"
  },
  {
    "input": "Lift lock from sys_monitor",
    "output": "passwd -u sys_monitor"
  },
  {
    "input": "Re-enable password login for roger",
    "output": "passwd -u roger"
  },
  {
    "input": "Allow devuser2 to log in again",
    "output": "passwd -u devuser2"
  },
  {
    "input": "Re-enable login for support_staff",
    "output": "passwd -u support_staff"
  },
  {
    "input": "Unlock temporary_account",
    "output": "passwd -u temporary_account"
  },
  {
    "input": "Remove lock on account web_admin",
    "output": "passwd -u web_admin"
  },
  {
    "input": "Unlock login for cloud_user",
    "output": "passwd -u cloud_user"
  },
  {
    "input": "Re-enable access for jenkins_user",
    "output": "passwd -u jenkins_user"
  },
  {
    "input": "Allow ssh_admin to use password again",
    "output": "passwd -u ssh_admin"
  },
  {
    "input": "Reactivate the locked account demo",
    "output": "passwd -u demo"
  },
  {
    "input": "Enable account login for guest2",
    "output": "passwd -u guest2"
  },
  {
    "input": "Unlock database_user",
    "output": "passwd -u database_user"
  },
  {
    "input": "Restore login ability for ethan",
    "output": "passwd -u ethan"
  },
  {
    "input": "Unblock ux_test user",
    "output": "passwd -u ux_test"
  },
  {
    "input": "Reactivate automation_bot account",
    "output": "passwd -u automation_bot"
  },
  {
    "input": "Re-enable password login for build_user",
    "output": "passwd -u build_user"
  },
  {
    "input": "Allow login for pm_lead",
    "output": "passwd -u pm_lead"
  },
  {
    "input": "Enable password access for alice_dev",
    "output": "passwd -u alice_dev"
  },
  {
    "input": "Restore login for temporary_user",
    "output": "passwd -u temporary_user"
  },
  {
    "input": "Unblock access to report_user",
    "output": "passwd -u report_user"
  },
  {
    "input": "Reactivate login for integration_test",
    "output": "passwd -u integration_test"
  },
  {
    "input": "Enable user login for vpn_client",
    "output": "passwd -u vpn_client"
  },
  {
    "input": "Unlock designer_user",
    "output": "passwd -u designer_user"
  },
  {
    "input": "Allow intern_test to log in again",
    "output": "passwd -u intern_test"
  },
  {
    "input": "Remove password lock for observer_1",
    "output": "passwd -u observer_1"
  },
  {
    "input": "Re-enable login for new_admin",
    "output": "passwd -u new_admin"
  },
  {
    "input": "Unlock dev_assistant",
    "output": "passwd -u dev_assistant"
  },
  {
    "input": "Enable login credentials for demo_user",
    "output": "passwd -u demo_user"
  },
  {
    "input": "Restore login for docker_ops",
    "output": "passwd -u docker_ops"
  },
  {
    "input": "Unblock api_user",
    "output": "passwd -u api_user"
  },
  {
    "input": "Re-enable login for firewall_mgr",
    "output": "passwd -u firewall_mgr"
  },
  {
    "input": "Unlock data_input user",
    "output": "passwd -u data_input"
  },
  {
    "input": "Enable dev1 again",
    "output": "passwd -u dev1"
  },
  {
    "input": "Restore access for backup_admin",
    "output": "passwd -u backup_admin"
  },
  {
    "input": "Unlock user account named devuser",
    "output": "passwd -u devuser"
  },
  {
    "input": "Enable login for sysadmin",
    "output": "passwd -u sysadmin"
  },
  {
    "input": "Re-enable access for account manager1",
    "output": "passwd -u manager1"
  },
  {
    "input": "Unblock the test_user account",
    "output": "passwd -u test_user"
  },
  {
    "input": "Allow user qa_lead to log in again",
    "output": "passwd -u qa_lead"
  },
  {
    "input": "Reactivate password login for alice",
    "output": "passwd -u alice"
  },
  {
    "input": "Restore login permissions for dev_ops",
    "output": "passwd -u dev_ops"
  },
  {
    "input": "Enable backend_user again",
    "output": "passwd -u backend_user"
  },
  {
    "input": "Remove lock on account data_admin",
    "output": "passwd -u data_admin"
  },
  {
    "input": "Unlock guest_temp user",
    "output": "passwd -u guest_temp"
  },
  {
    "input": "Re-enable login for user helpline",
    "output": "passwd -u helpline"
  },
  {
    "input": "Allow login for analyst_1",
    "output": "passwd -u analyst_1"
  },
  {
    "input": "Reactivate credentials for it_support",
    "output": "passwd -u it_support"
  },
  {
    "input": "Unblock engineer_23",
    "output": "passwd -u engineer_23"
  },
  {
    "input": "Unlock access for frontend_dev",
    "output": "passwd -u frontend_dev"
  },
  {
    "input": "Lift lock from sys_monitor",
    "output": "passwd -u sys_monitor"
  },
  {
    "input": "Re-enable password login for roger",
    "output": "passwd -u roger"
  },
  {
    "input": "Allow devuser2 to log in again",
    "output": "passwd -u devuser2"
  },
  {
    "input": "Re-enable login for support_staff",
    "output": "passwd -u support_staff"
  },
  {
    "input": "Unlock temporary_account",
    "output": "passwd -u temporary_account"
  },
  {
    "input": "Remove lock on account web_admin",
    "output": "passwd -u web_admin"
  },
  {
    "input": "Unlock login for cloud_user",
    "output": "passwd -u cloud_user"
  },
  {
    "input": "Re-enable access for jenkins_user",
    "output": "passwd -u jenkins_user"
  },
  {
    "input": "Allow ssh_admin to use password again",
    "output": "passwd -u ssh_admin"
  },
  {
    "input": "Reactivate the locked account demo",
    "output": "passwd -u demo"
  },
  {
    "input": "Enable account login for guest2",
    "output": "passwd -u guest2"
  },
  {
    "input": "Unlock database_user",
    "output": "passwd -u database_user"
  },
  {
    "input": "Restore login ability for ethan",
    "output": "passwd -u ethan"
  },
  {
    "input": "Unblock ux_test user",
    "output": "passwd -u ux_test"
  },
  {
    "input": "Reactivate automation_bot account",
    "output": "passwd -u automation_bot"
  },
  {
    "input": "Re-enable password login for build_user",
    "output": "passwd -u build_user"
  },
  {
    "input": "Allow login for pm_lead",
    "output": "passwd -u pm_lead"
  },
  {
    "input": "Enable password access for alice_dev",
    "output": "passwd -u alice_dev"
  },
  {
    "input": "Restore login for temporary_user",
    "output": "passwd -u temporary_user"
  },
  {
    "input": "Unblock access to report_user",
    "output": "passwd -u report_user"
  },
  {
    "input": "Reactivate login for integration_test",
    "output": "passwd -u integration_test"
  },
  {
    "input": "Enable user login for vpn_client",
    "output": "passwd -u vpn_client"
  },
  {
    "input": "Unlock designer_user",
    "output": "passwd -u designer_user"
  },
  {
    "input": "Allow intern_test to log in again",
    "output": "passwd -u intern_test"
  },
  {
    "input": "Remove password lock for observer_1",
    "output": "passwd -u observer_1"
  },
  {
    "input": "Re-enable login for new_admin",
    "output": "passwd -u new_admin"
  },
  {
    "input": "Unlock dev_assistant",
    "output": "passwd -u dev_assistant"
  },
  {
    "input": "Enable login credentials for demo_user",
    "output": "passwd -u demo_user"
  },
  {
    "input": "Restore login for docker_ops",
    "output": "passwd -u docker_ops"
  },
  {
    "input": "Unblock api_user",
    "output": "passwd -u api_user"
  },
  {
    "input": "Re-enable login for firewall_mgr",
    "output": "passwd -u firewall_mgr"
  },
  {
    "input": "Unlock data_input user",
    "output": "passwd -u data_input"
  },
  {
    "input": "Enable dev1 again",
    "output": "passwd -u dev1"
  },
  {
    "input": "Restore access for backup_admin",
    "output": "passwd -u backup_admin"
  },
  {
    "input": "Change password for user john",
    "output": "passwd john"
  },
  {
    "input": "Set a new password for alice",
    "output": "passwd alice"
  },
  {
    "input": "Update the password of user bob",
    "output": "passwd bob"
  },
  {
    "input": "Reset dave's password",
    "output": "passwd dave"
  },
  {
    "input": "Modify the password of user sam",
    "output": "passwd sam"
  },
  {
    "input": "Change credentials for user charlie",
    "output": "passwd charlie"
  },
  {
    "input": "Set password for new user emma",
    "output": "passwd emma"
  },
  {
    "input": "Force password update for user lisa",
    "output": "passwd lisa"
  },
  {
    "input": "Change login password for ryan",
    "output": "passwd ryan"
  },
  {
    "input": "Reset authentication for user nick",
    "output": "passwd nick"
  },
  {
    "input": "Change root's password",
    "output": "passwd root"
  },
  {
    "input": "Update login credentials for steve",
    "output": "passwd steve"
  },
  {
    "input": "Modify access password of user rachel",
    "output": "passwd rachel"
  },
  {
    "input": "Set password for test_user",
    "output": "passwd test_user"
  },
  {
    "input": "Change password of developer1",
    "output": "passwd developer1"
  },
  {
    "input": "Reset the credentials of mark",
    "output": "passwd mark"
  },
  {
    "input": "Modify the credentials for devops_admin",
    "output": "passwd devops_admin"
  },
  {
    "input": "Set up a new password for johnny",
    "output": "passwd johnny"
  },
  {
    "input": "Reset the access key for sysadmin",
    "output": "passwd sysadmin"
  },
  {
    "input": "Change user credential for admin1",
    "output": "passwd admin1"
  },
  {
    "input": "Modify user1's password",
    "output": "passwd user1"
  },
  {
    "input": "Reset login password for bob_admin",
    "output": "passwd bob_admin"
  },
  {
    "input": "Change employee45's password",
    "output": "passwd employee45"
  },
  {
    "input": "Reset the password for student7",
    "output": "passwd student7"
  },
  {
    "input": "Update password for linuxuser",
    "output": "passwd linuxuser"
  },
  {
    "input": "Change password for qa_user",
    "output": "passwd qa_user"
  },
  {
    "input": "Reset dev_admin password",
    "output": "passwd dev_admin"
  },
  {
    "input": "Change credentials of webuser",
    "output": "passwd webuser"
  },
  {
    "input": "Set password for user engineer3",
    "output": "passwd engineer3"
  },
  {
    "input": "Update password of test_account",
    "output": "passwd test_account"
  },
  {
    "input": "Reset access for client_service",
    "output": "passwd client_service"
  },
  {
    "input": "Change authentication for rootadmin",
    "output": "passwd rootadmin"
  },
  {
    "input": "Set login password for internal_user",
    "output": "passwd internal_user"
  },
  {
    "input": "Modify password of script_user",
    "output": "passwd script_user"
  },
  {
    "input": "Reset credentials for staging_user",
    "output": "passwd staging_user"
  },
  {
    "input": "Change login key for deployuser",
    "output": "passwd deployuser"
  },
  {
    "input": "Set user password for frontend_dev",
    "output": "passwd frontend_dev"
  },
  {
    "input": "Reset shell password for docker_runner",
    "output": "passwd docker_runner"
  },
  {
    "input": "Update login access for temp_user",
    "output": "passwd temp_user"
  },
  {
    "input": "Change authentication of ci_runner",
    "output": "passwd ci_runner"
  },
  {
    "input": "Reset access password for guest1",
    "output": "passwd guest1"
  },
  {
    "input": "Modify login for database_admin",
    "output": "passwd database_admin"
  },
  {
    "input": "Update user access for hr_staff",
    "output": "passwd hr_staff"
  },
  {
    "input": "Change shell login password for testenv",
    "output": "passwd testenv"
  },
  {
    "input": "Set up credentials for designer3",
    "output": "passwd designer3"
  },
  {
    "input": "Modify account password for recruiter",
    "output": "passwd recruiter"
  },
  {
    "input": "Change password for the new dev",
    "output": "passwd dev"
  },
  {
    "input": "Reset password of user zara",
    "output": "passwd zara"
  },
  {
    "input": "Change creds for developer99",
    "output": "passwd developer99"
  },
  {
    "input": "Change password for user john",
    "output": "passwd john"
  },
  {
    "input": "Set a new password for alice",
    "output": "passwd alice"
  },
  {
    "input": "Update the password of user bob",
    "output": "passwd bob"
  },
  {
    "input": "Reset dave's password",
    "output": "passwd dave"
  },
  {
    "input": "Modify the password of user sam",
    "output": "passwd sam"
  },
  {
    "input": "Change credentials for user charlie",
    "output": "passwd charlie"
  },
  {
    "input": "Set password for new user emma",
    "output": "passwd emma"
  },
  {
    "input": "Force password update for user lisa",
    "output": "passwd lisa"
  },
  {
    "input": "Change login password for ryan",
    "output": "passwd ryan"
  },
  {
    "input": "Reset authentication for user nick",
    "output": "passwd nick"
  },
  {
    "input": "Change root's password",
    "output": "passwd root"
  },
  {
    "input": "Update login credentials for steve",
    "output": "passwd steve"
  },
  {
    "input": "Modify access password of user rachel",
    "output": "passwd rachel"
  },
  {
    "input": "Set password for test_user",
    "output": "passwd test_user"
  },
  {
    "input": "Change password of developer1",
    "output": "passwd developer1"
  },
  {
    "input": "Reset the credentials of mark",
    "output": "passwd mark"
  },
  {
    "input": "Modify the credentials for devops_admin",
    "output": "passwd devops_admin"
  },
  {
    "input": "Set up a new password for johnny",
    "output": "passwd johnny"
  },
  {
    "input": "Reset the access key for sysadmin",
    "output": "passwd sysadmin"
  },
  {
    "input": "Change user credential for admin1",
    "output": "passwd admin1"
  },
  {
    "input": "Modify user1's password",
    "output": "passwd user1"
  },
  {
    "input": "Reset login password for bob_admin",
    "output": "passwd bob_admin"
  },
  {
    "input": "Change employee45's password",
    "output": "passwd employee45"
  },
  {
    "input": "Reset the password for student7",
    "output": "passwd student7"
  },
  {
    "input": "Update password for linuxuser",
    "output": "passwd linuxuser"
  },
  {
    "input": "Change password for qa_user",
    "output": "passwd qa_user"
  },
  {
    "input": "Reset dev_admin password",
    "output": "passwd dev_admin"
  },
  {
    "input": "Change credentials of webuser",
    "output": "passwd webuser"
  },
  {
    "input": "Set password for user engineer3",
    "output": "passwd engineer3"
  },
  {
    "input": "Update password of test_account",
    "output": "passwd test_account"
  },
  {
    "input": "Reset access for client_service",
    "output": "passwd client_service"
  },
  {
    "input": "Change authentication for rootadmin",
    "output": "passwd rootadmin"
  },
  {
    "input": "Set login password for internal_user",
    "output": "passwd internal_user"
  },
  {
    "input": "Modify password of script_user",
    "output": "passwd script_user"
  },
  {
    "input": "Reset credentials for staging_user",
    "output": "passwd staging_user"
  },
  {
    "input": "Change login key for deployuser",
    "output": "passwd deployuser"
  },
  {
    "input": "Set user password for frontend_dev",
    "output": "passwd frontend_dev"
  },
  {
    "input": "Reset shell password for docker_runner",
    "output": "passwd docker_runner"
  },
  {
    "input": "Update login access for temp_user",
    "output": "passwd temp_user"
  },
  {
    "input": "Change authentication of ci_runner",
    "output": "passwd ci_runner"
  },
  {
    "input": "Reset access password for guest1",
    "output": "passwd guest1"
  },
  {
    "input": "Modify login for database_admin",
    "output": "passwd database_admin"
  },
  {
    "input": "Update user access for hr_staff",
    "output": "passwd hr_staff"
  },
  {
    "input": "Change shell login password for testenv",
    "output": "passwd testenv"
  },
  {
    "input": "Set up credentials for designer3",
    "output": "passwd designer3"
  },
  {
    "input": "Modify account password for recruiter",
    "output": "passwd recruiter"
  },
  {
    "input": "Change password for the new dev",
    "output": "passwd dev"
  },
  {
    "input": "Reset password of user zara",
    "output": "passwd zara"
  },
  {
    "input": "Change creds for developer99",
    "output": "passwd developer99"
  },
  {
    "input": "Set a password for backup_admin",
    "output": "passwd backup_admin"
  },
  {
    "input": "Reset password for tempaccount",
    "output": "passwd tempaccount"
  },
  {
    "input": "Modify credentials for analytics_user",
    "output": "passwd analytics_user"
  },
  {
    "input": "Change shell access password for testadmin",
    "output": "passwd testadmin"
  },
  {
    "input": "Update user credentials for docker_dev",
    "output": "passwd docker_dev"
  },
  {
    "input": "Set login key for beta_user",
    "output": "passwd beta_user"
  },
  {
    "input": "Change login password for mobile_user",
    "output": "passwd mobile_user"
  },
  {
    "input": "Reset authentication token for samuel",
    "output": "passwd samuel"
  },
  {
    "input": "Update access password for gui_dev",
    "output": "passwd gui_dev"
  },
  {
    "input": "Modify login for officeadmin",
    "output": "passwd officeadmin"
  },
  {
    "input": "Change credentials of remote_user",
    "output": "passwd remote_user"
  },
  {
    "input": "Switch to the root user",
    "output": "su"
  },
  {
    "input": "Log in as user alice",
    "output": "su alice"
  },
  {
    "input": "Switch to john's account",
    "output": "su john"
  },
  {
    "input": "Become the user tom",
    "output": "su tom"
  },
  {
    "input": "Change to maria's user account",
    "output": "su maria"
  },
  {
    "input": "Use su to switch to developer",
    "output": "su developer"
  },
  {
    "input": "Switch to user admin",
    "output": "su admin"
  },
  {
    "input": "Login as guest user",
    "output": "su guest"
  },
  {
    "input": "Switch to operator account",
    "output": "su operator"
  },
  {
    "input": "Use su to become backup user",
    "output": "su backup"
  },
  {
    "input": "Switch to user sam with login shell",
    "output": "su - sam"
  },
  {
    "input": "Login to testuser account with su",
    "output": "su testuser"
  },
  {
    "input": "Switch to service account 'service01'",
    "output": "su service01"
  },
  {
    "input": "Use su for debuguser",
    "output": "su debuguser"
  },
  {
    "input": "Switch to devops user",
    "output": "su devops"
  },
  {
    "input": "Login as system user logs",
    "output": "su logs"
  },
  {
    "input": "Become builduser",
    "output": "su builduser"
  },
  {
    "input": "Access the webadmin account",
    "output": "su webadmin"
  },
  {
    "input": "Login to frontend user",
    "output": "su frontend"
  },
  {
    "input": "Switch to dockeradmin",
    "output": "su dockeradmin"
  },
  {
    "input": "Use su to switch to analytics",
    "output": "su analytics"
  },
  {
    "input": "Become reports user",
    "output": "su reports"
  },
  {
    "input": "Switch to operator with login shell",
    "output": "su - operator"
  },
  {
    "input": "Switch to qa account",
    "output": "su qa"
  },
  {
    "input": "Login as auditor",
    "output": "su auditor"
  },
  {
    "input": "Switch to monitoring user",
    "output": "su monitoring"
  },
  {
    "input": "Become tomcat user",
    "output": "su tomcat"
  },
  {
    "input": "Use su to log in as postgres",
    "output": "su postgres"
  },
  {
    "input": "Login to testing user account",
    "output": "su testing"
  },
  {
    "input": "Switch to deployer",
    "output": "su deployer"
  },
  {
    "input": "Become user vivek",
    "output": "su vivek"
  },
  {
    "input": "Login as user arya",
    "output": "su arya"
  },
  {
    "input": "Become staging account",
    "output": "su staging"
  },
  {
    "input": "Switch to jenkins",
    "output": "su jenkins"
  },
  {
    "input": "Use su for test-runner",
    "output": "su test-runner"
  },
  {
    "input": "Access data_user",
    "output": "su data_user"
  },
  {
    "input": "Become netadmin",
    "output": "su netadmin"
  },
  {
    "input": "Login to root shell",
    "output": "su -"
  },
  {
    "input": "Switch to apache user",
    "output": "su apache"
  },
  {
    "input": "Access ssh_user",
    "output": "su ssh_user"
  },
  {
    "input": "Become sys_user",
    "output": "su sys_user"
  },
  {
    "input": "Login as custom user 'builder'",
    "output": "su builder"
  },
  {
    "input": "Switch to test_dev account",
    "output": "su test_dev"
  },
  {
    "input": "Become prod_user",
    "output": "su prod_user"
  },
  {
    "input": "Use su for appadmin",
    "output": "su appadmin"
  },
  {
    "input": "Switch to finance account",
    "output": "su finance"
  },
  {
    "input": "Access sandbox account",
    "output": "su sandbox"
  },
  {
    "input": "Login to integration user",
    "output": "su integration"
  },
  {
    "input": "Switch to archive_user",
    "output": "su archive_user"
  },
  {
    "input": "Switch to the root user",
    "output": "su"
  },
  {
    "input": "Log in as user alice",
    "output": "su alice"
  },
  {
    "input": "Switch to john's account",
    "output": "su john"
  },
  {
    "input": "Become the user tom",
    "output": "su tom"
  },
  {
    "input": "Change to maria's user account",
    "output": "su maria"
  },
  {
    "input": "Use su to switch to developer",
    "output": "su developer"
  },
  {
    "input": "Switch to user admin",
    "output": "su admin"
  },
  {
    "input": "Login as guest user",
    "output": "su guest"
  },
  {
    "input": "Switch to operator account",
    "output": "su operator"
  },
  {
    "input": "Use su to become backup user",
    "output": "su backup"
  },
  {
    "input": "Switch to user sam with login shell",
    "output": "su - sam"
  },
  {
    "input": "Login to testuser account with su",
    "output": "su testuser"
  },
  {
    "input": "Switch to service account 'service01'",
    "output": "su service01"
  },
  {
    "input": "Use su for debuguser",
    "output": "su debuguser"
  },
  {
    "input": "Switch to devops user",
    "output": "su devops"
  },
  {
    "input": "Login as system user logs",
    "output": "su logs"
  },
  {
    "input": "Become builduser",
    "output": "su builduser"
  },
  {
    "input": "Access the webadmin account",
    "output": "su webadmin"
  },
  {
    "input": "Login to frontend user",
    "output": "su frontend"
  },
  {
    "input": "Switch to dockeradmin",
    "output": "su dockeradmin"
  },
  {
    "input": "Use su to switch to analytics",
    "output": "su analytics"
  },
  {
    "input": "Become reports user",
    "output": "su reports"
  },
  {
    "input": "Switch to operator with login shell",
    "output": "su - operator"
  },
  {
    "input": "Switch to qa account",
    "output": "su qa"
  },
  {
    "input": "Login as auditor",
    "output": "su auditor"
  },
  {
    "input": "Switch to monitoring user",
    "output": "su monitoring"
  },
  {
    "input": "Become tomcat user",
    "output": "su tomcat"
  },
  {
    "input": "Use su to log in as postgres",
    "output": "su postgres"
  },
  {
    "input": "Login to testing user account",
    "output": "su testing"
  },
  {
    "input": "Switch to deployer",
    "output": "su deployer"
  },
  {
    "input": "Become user vivek",
    "output": "su vivek"
  },
  {
    "input": "Login as user arya",
    "output": "su arya"
  },
  {
    "input": "Become staging account",
    "output": "su staging"
  },
  {
    "input": "Switch to jenkins",
    "output": "su jenkins"
  },
  {
    "input": "Use su for test-runner",
    "output": "su test-runner"
  },
  {
    "input": "Access data_user",
    "output": "su data_user"
  },
  {
    "input": "Become netadmin",
    "output": "su netadmin"
  },
  {
    "input": "Login to root shell",
    "output": "su -"
  },
  {
    "input": "Switch to apache user",
    "output": "su apache"
  },
  {
    "input": "Access ssh_user",
    "output": "su ssh_user"
  },
  {
    "input": "Become sys_user",
    "output": "su sys_user"
  },
  {
    "input": "Login as custom user 'builder'",
    "output": "su builder"
  },
  {
    "input": "Switch to test_dev account",
    "output": "su test_dev"
  },
  {
    "input": "Become prod_user",
    "output": "su prod_user"
  },
  {
    "input": "Use su for appadmin",
    "output": "su appadmin"
  },
  {
    "input": "Switch to finance account",
    "output": "su finance"
  },
  {
    "input": "Access sandbox account",
    "output": "su sandbox"
  },
  {
    "input": "Login to integration user",
    "output": "su integration"
  },
  {
    "input": "Switch to archive_user",
    "output": "su archive_user"
  },
  {
    "input": "Become training user",
    "output": "su training"
  },
  {
    "input": "Switch to qa_manager",
    "output": "su qa_manager"
  },
  {
    "input": "Login as automation user",
    "output": "su automation"
  },
  {
    "input": "Access logs_viewer account",
    "output": "su logs_viewer"
  },
  {
    "input": "Become user root with login shell",
    "output": "su - root"
  },
  {
    "input": "Switch to systemadmin",
    "output": "su systemadmin"
  },
  {
    "input": "Login to demo_user account",
    "output": "su demo_user"
  },
  {
    "input": "Become the vpnadmin",
    "output": "su vpnadmin"
  },
  {
    "input": "Switch to docker_user",
    "output": "su docker_user"
  },
  {
    "input": "Become support_user",
    "output": "su support_user"
  },
  {
    "input": "Switch to infra team account",
    "output": "su infra"
  },
  {
    "input": "Access the maint_user",
    "output": "su maint_user"
  },
  {
    "input": "Update package lists",
    "output": "sudo apt update"
  },
  {
    "input": "Upgrade all packages",
    "output": "sudo apt upgrade"
  },
  {
    "input": "Install curl using sudo",
    "output": "sudo apt install curl"
  },
  {
    "input": "Remove nginx using sudo",
    "output": "sudo apt remove nginx"
  },
  {
    "input": "Shutdown the system",
    "output": "sudo shutdown now"
  },
  {
    "input": "Restart the computer",
    "output": "sudo reboot"
  },
  {
    "input": "Edit sources list with nano",
    "output": "sudo nano /etc/apt/sources.list"
  },
  {
    "input": "Change ownership of a directory",
    "output": "sudo chown user:user /var/www"
  },
  {
    "input": "Move a file to a protected directory",
    "output": "sudo mv index.html /var/www/html/"
  },
  {
    "input": "Edit the crontab file",
    "output": "sudo crontab -e"
  },
  {
    "input": "View protected system logs",
    "output": "sudo less /var/log/syslog"
  },
  {
    "input": "Start apache2 service",
    "output": "sudo systemctl start apache2"
  },
  {
    "input": "Stop docker service",
    "output": "sudo systemctl stop docker"
  },
  {
    "input": "Enable ssh service",
    "output": "sudo systemctl enable ssh"
  },
  {
    "input": "Disable bluetooth service",
    "output": "sudo systemctl disable bluetooth"
  },
  {
    "input": "Add a new user named dev",
    "output": "sudo useradd dev"
  },
  {
    "input": "Delete user guest",
    "output": "sudo userdel guest"
  },
  {
    "input": "Change password for tom",
    "output": "sudo passwd tom"
  },
  {
    "input": "List root directory",
    "output": "sudo ls /root"
  },
  {
    "input": "Edit hosts file",
    "output": "sudo nano /etc/hosts"
  },
  {
    "input": "Ping a site using sudo",
    "output": "sudo ping google.com"
  },
  {
    "input": "Install python3-pip",
    "output": "sudo apt install python3-pip"
  },
  {
    "input": "Uninstall gimp",
    "output": "sudo apt remove gimp"
  },
  {
    "input": "Restart the network manager",
    "output": "sudo systemctl restart NetworkManager"
  },
  {
    "input": "Edit sudoers file safely",
    "output": "sudo visudo"
  },
  {
    "input": "Run docker command as root",
    "output": "sudo docker ps"
  },
  {
    "input": "Add current user to docker group",
    "output": "sudo usermod -aG docker $USER"
  },
  {
    "input": "Create a directory in /opt",
    "output": "sudo mkdir /opt/myapp"
  },
  {
    "input": "Delete a file in /etc",
    "output": "sudo rm /etc/sample.conf"
  },
  {
    "input": "Install nginx",
    "output": "sudo apt install nginx"
  },
  {
    "input": "Reboot the server immediately",
    "output": "sudo reboot now"
  },
  {
    "input": "Run bash with root privileges",
    "output": "sudo bash"
  },
  {
    "input": "Add entry to /etc/fstab",
    "output": "sudo nano /etc/fstab"
  },
  {
    "input": "Kill process with PID 1234",
    "output": "sudo kill 1234"
  },
  {
    "input": "List running processes",
    "output": "sudo ps aux"
  },
  {
    "input": "Update snap packages",
    "output": "sudo snap refresh"
  },
  {
    "input": "Create new group developers",
    "output": "sudo groupadd developers"
  },
  {
    "input": "Remove group testers",
    "output": "sudo groupdel testers"
  },
  {
    "input": "Change group of a file",
    "output": "sudo chgrp admin /etc/passwd"
  },
  {
    "input": "Create symbolic link as root",
    "output": "sudo ln -s /var/www /home/user/web"
  },
  {
    "input": "Run a script that modifies system settings",
    "output": "sudo ./setup.sh"
  },
  {
    "input": "Install Java runtime",
    "output": "sudo apt install default-jre"
  },
  {
    "input": "Print disk usage of root directory",
    "output": "sudo du -sh /"
  },
  {
    "input": "Mount an external drive",
    "output": "sudo mount /dev/sdb1 /mnt"
  },
  {
    "input": "Unmount a device",
    "output": "sudo umount /mnt"
  },
  {
    "input": "Install vs code from .deb file",
    "output": "sudo dpkg -i code.deb"
  },
  {
    "input": "Fix broken dependencies",
    "output": "sudo apt --fix-broken install"
  },
  {
    "input": "Check disk space with df",
    "output": "sudo df -h"
  },
  {
    "input": "Reconfigure timezone",
    "output": "sudo dpkg-reconfigure tzdata"
  },
  {
    "input": "Change permissions of a file",
    "output": "sudo chmod 644 /etc/hosts"
  },
  {
    "input": "List all services",
    "output": "sudo systemctl list-units --type=service"
  },
  {
    "input": "Flush DNS cache",
    "output": "sudo systemd-resolve --flush-caches"
  },
  {
    "input": "Change default shell to zsh",
    "output": "sudo chsh -s /usr/bin/zsh"
  },
  {
    "input": "Install htop",
    "output": "sudo apt install htop"
  },
  {
    "input": "Display firewall status",
    "output": "sudo ufw status"
  },
  {
    "input": "Allow SSH through firewall",
    "output": "sudo ufw allow ssh"
  },
  {
    "input": "Deny all incoming traffic",
    "output": "sudo ufw default deny incoming"
  },
  {
    "input": "Enable firewall",
    "output": "sudo ufw enable"
  },
  {
    "input": "Disable firewall",
    "output": "sudo ufw disable"
  },
  {
    "input": "Reload firewall rules",
    "output": "sudo ufw reload"
  },
  {
    "input": "Install zip tool",
    "output": "sudo apt install zip"
  },
  {
    "input": "Install unzip tool",
    "output": "sudo apt install unzip"
  },
  {
    "input": "Install Git",
    "output": "sudo apt install git"
  },
  {
    "input": "Clone a git repo with sudo",
    "output": "sudo git clone https://github.com/example/repo.git"
  },
  {
    "input": "Install Node.js",
    "output": "sudo apt install nodejs"
  },
  {
    "input": "Install npm",
    "output": "sudo apt install npm"
  },
  {
    "input": "Restart SSH service",
    "output": "sudo systemctl restart ssh"
  },
  {
    "input": "Check SSH service status",
    "output": "sudo systemctl status ssh"
  },
  {
    "input": "Add executable permission to script",
    "output": "sudo chmod +x script.sh"
  },
  {
    "input": "Run a python script with sudo",
    "output": "sudo python3 script.py"
  },
  {
    "input": "Run top as root",
    "output": "sudo top"
  },
  {
    "input": "Check disk usage with ncdu",
    "output": "sudo ncdu /"
  },
  {
    "input": "Clear system logs",
    "output": "sudo journalctl --vacuum-time=1d"
  },
  {
    "input": "Update GRUB config",
    "output": "sudo update-grub"
  },
  {
    "input": "Backup crontab",
    "output": "sudo crontab -l > backup.txt"
  },
  {
    "input": "Restore crontab from file",
    "output": "sudo crontab backup.txt"
  },
  {
    "input": "Install MySQL server",
    "output": "sudo apt install mysql-server"
  },
  {
    "input": "Start MySQL service",
    "output": "sudo systemctl start mysql"
  },
  {
    "input": "Stop MySQL service",
    "output": "sudo systemctl stop mysql"
  },
  {
    "input": "Restart MySQL",
    "output": "sudo systemctl restart mysql"
  },
  {
    "input": "Enable MySQL at boot",
    "output": "sudo systemctl enable mysql"
  },
  {
    "input": "Disable MySQL at boot",
    "output": "sudo systemctl disable mysql"
  },
  {
    "input": "Change hostname",
    "output": "sudo hostnamectl set-hostname newname"
  },
  {
    "input": "Install openssh-server",
    "output": "sudo apt install openssh-server"
  },
  {
    "input": "Edit SSH config file",
    "output": "sudo nano /etc/ssh/sshd_config"
  },
  {
    "input": "Restart graphical session",
    "output": "sudo systemctl restart gdm"
  },
  {
    "input": "Shutdown after 5 minutes",
    "output": "sudo shutdown +5"
  },
  {
    "input": "Cancel scheduled shutdown",
    "output": "sudo shutdown -c"
  },
  {
    "input": "Create archive of /etc",
    "output": "sudo tar czf etc.tar.gz /etc"
  },
  {
    "input": "Extract tar.gz file to /opt",
    "output": "sudo tar xzf file.tar.gz -C /opt"
  },
  {
    "input": "Install build-essential",
    "output": "sudo apt install build-essential"
  },
  {
    "input": "Install Python dev headers",
    "output": "sudo apt install python3-dev"
  },
  {
    "input": "Enable auto updates",
    "output": "sudo dpkg-reconfigure unattended-upgrades"
  },
  {
    "input": "Create swap file",
    "output": "sudo fallocate -l 1G /swapfile"
  },
  {
    "input": "Enable swap file",
    "output": "sudo swapon /swapfile"
  },
  {
    "input": "Make swap permanent",
    "output": "sudo nano /etc/fstab"
  },
  {
    "input": "Turn off swap",
    "output": "sudo swapoff /swapfile"
  },
  {
    "input": "Add a new user named john",
    "output": "useradd john"
  },
  {
    "input": "Create a user called alice with a home directory",
    "output": "useradd -m alice"
  },
  {
    "input": "Make a user named david with default settings",
    "output": "useradd david"
  },
  {
    "input": "Add a user tina with no home directory",
    "output": "useradd -M tina"
  },
  {
    "input": "Create a user mark with /bin/bash shell",
    "output": "useradd -s /bin/bash mark"
  },
  {
    "input": "Add user emily and set her home to /home/emcustom",
    "output": "useradd -m -d /home/emcustom emily"
  },
  {
    "input": "Create user tom in the group developers",
    "output": "useradd -g developers tom"
  },
  {
    "input": "Add a system user daemonuser",
    "output": "useradd -r daemonuser"
  },
  {
    "input": "Make user admin with UID 1050",
    "output": "useradd -u 1050 admin"
  },
  {
    "input": "Add user testuser with GID 2000",
    "output": "useradd -g 2000 testuser"
  },
  {
    "input": "Create user named beta and add him to sudo group",
    "output": "useradd -G sudo beta"
  },
  {
    "input": "Add user frank with comment 'Database Admin'",
    "output": "useradd -c 'Database Admin' frank"
  },
  {
    "input": "Add a new user named user123 and assign /bin/zsh as shell",
    "output": "useradd -s /bin/zsh user123"
  },
  {
    "input": "Create a user with username harry and no user group",
    "output": "useradd -N harry"
  },
  {
    "input": "Add user alex and expire the account on 2025-12-31",
    "output": "useradd -e 2025-12-31 alex"
  },
  {
    "input": "Make a user nora with UID 3000 and GID 4000",
    "output": "useradd -u 3000 -g 4000 nora"
  },
  {
    "input": "Create user for testing called dummy with shell disabled",
    "output": "useradd -s /usr/sbin/nologin dummy"
  },
  {
    "input": "Add a user mike with home directory /srv/mike",
    "output": "useradd -m -d /srv/mike mike"
  },
  {
    "input": "Create user ethan with groups dev,qa",
    "output": "useradd -G dev,qa ethan"
  },
  {
    "input": "Add a user sam and disable account expiration",
    "output": "useradd -e '' sam"
  },
  {
    "input": "Add a user claire with password disabled",
    "output": "useradd -M -s /usr/sbin/nologin claire"
  },
  {
    "input": "Create system user servicebot with custom home",
    "output": "useradd -r -m -d /opt/servicebot servicebot"
  },
  {
    "input": "Add user guest1 and do not create home directory",
    "output": "useradd -M guest1"
  },
  {
    "input": "Add user alpha in group users and devs",
    "output": "useradd -G users,devs alpha"
  },
  {
    "input": "Create user named test2 with comment 'Temporary'",
    "output": "useradd -c 'Temporary' test2"
  },
  {
    "input": "Make user with name newguy and bash shell",
    "output": "useradd -s /bin/bash newguy"
  },
  {
    "input": "Add user testadmin with no group",
    "output": "useradd -N testadmin"
  },
  {
    "input": "Create user jake with home /users/jake and zsh shell",
    "output": "useradd -m -d /users/jake -s /bin/zsh jake"
  },
  {
    "input": "Add system account botrunner with UID 500",
    "output": "useradd -r -u 500 botrunner"
  },
  {
    "input": "Create a new user devuser for development tasks",
    "output": "useradd devuser"
  },
  {
    "input": "Add user blogwriter with comment 'Writes blog content'",
    "output": "useradd -c 'Writes blog content' blogwriter"
  },
  {
    "input": "Create user ankit with groups wheel and docker",
    "output": "useradd -G wheel,docker ankit"
  },
  {
    "input": "Add user jenny with /bin/sh shell",
    "output": "useradd -s /bin/sh jenny"
  },
  {
    "input": "Create user bob and specify shell to be /sbin/nologin",
    "output": "useradd -s /sbin/nologin bob"
  },
  {
    "input": "Add a user called techguy and create his home directory",
    "output": "useradd -m techguy"
  },
  {
    "input": "Create system user with name system_monitor",
    "output": "useradd -r system_monitor"
  },
  {
    "input": "Add user beta2 with comment and shell",
    "output": "useradd -c 'Beta tester' -s /bin/bash beta2"
  },
  {
    "input": "Make user samuel with default shell",
    "output": "useradd samuel"
  },
  {
    "input": "Create a user rick and assign a UID of 2500",
    "output": "useradd -u 2500 rick"
  },
  {
    "input": "Add user chris and make it expire in 30 days",
    "output": "useradd -e $(date -d '+30 days' +%Y-%m-%d) chris"
  },
  {
    "input": "Create user api_user for REST services",
    "output": "useradd api_user"
  },
  {
    "input": "Add new user deploy with bash shell and home",
    "output": "useradd -m -s /bin/bash deploy"
  },
  {
    "input": "Add user nodeadmin with UID and comment",
    "output": "useradd -u 2001 -c 'Node.js Admin' nodeadmin"
  },
  {
    "input": "Create a user with login shell /bin/false",
    "output": "useradd -s /bin/false dummyuser"
  },
  {
    "input": "Add user guest2025 with no shell access",
    "output": "useradd -s /usr/sbin/nologin guest2025"
  },
  {
    "input": "Make user logger with group loggroup",
    "output": "useradd -g loggroup logger"
  },
  {
    "input": "Create user for cronjobs with no password",
    "output": "useradd -M -s /usr/sbin/nologin cronuser"
  },
  {
    "input": "Add backup user for admin tasks",
    "output": "useradd backup"
  },
  {
    "input": "Create user sandbox with custom directory",
    "output": "useradd -m -d /opt/sandbox sandbox"
  },
  {
    "input": "Add system bot for automation",
    "output": "useradd -r automationbot"
  },
  {
    "input": "Add new intern user",
    "output": "useradd intern"
  },
  {
    "input": "Create user sshguest with disabled shell",
    "output": "useradd -s /usr/sbin/nologin sshguest"
  },
  {
    "input": "Add a new user named arjun",
    "output": "useradd arjun"
  },
  {
    "input": "Create user priya with a home directory and bash shell",
    "output": "useradd -m -s /bin/bash priya"
  },
  {
    "input": "Add user guestlogin with shell access disabled",
    "output": "useradd -s /usr/sbin/nologin guestlogin"
  },
  {
    "input": "Create a user raj with UID 4500",
    "output": "useradd -u 4500 raj"
  },
  {
    "input": "Add user simran to the admins group",
    "output": "useradd -G admins simran"
  },
  {
    "input": "Create user sam without creating a home directory",
    "output": "useradd -M sam"
  },
  {
    "input": "Add a system user loggerbot",
    "output": "useradd -r loggerbot"
  },
  {
    "input": "Create user devops with comment 'DevOps Team'",
    "output": "useradd -c 'DevOps Team' devops"
  },
  {
    "input": "Make a user named hruser with home at /srv/hruser",
    "output": "useradd -m -d /srv/hruser hruser"
  },
  {
    "input": "Add user guestX with login shell /bin/false",
    "output": "useradd -s /bin/false guestX"
  },
  {
    "input": "Create user admin2 and add to wheel group",
    "output": "useradd -G wheel admin2"
  },
  {
    "input": "Add user reporter with a custom UID and shell",
    "output": "useradd -u 3400 -s /bin/zsh reporter"
  },
  {
    "input": "Create a system user datad with no login",
    "output": "useradd -r -s /usr/sbin/nologin datad"
  },
  {
    "input": "Add user teacher with /bin/sh shell",
    "output": "useradd -s /bin/sh teacher"
  },
  {
    "input": "Add new user student with home directory created",
    "output": "useradd -m student"
  },
  {
    "input": "Create a system user cachebot for caching operations",
    "output": "useradd -r cachebot"
  },
  {
    "input": "Add intern user with home at /interns/john",
    "output": "useradd -m -d /interns/john john"
  },
  {
    "input": "Make a new user tester1 with GID 1002",
    "output": "useradd -g 1002 tester1"
  },
  {
    "input": "Create user qauser with secondary groups testers,loggers",
    "output": "useradd -G testers,loggers qauser"
  },
  {
    "input": "Add user alice2 and expire the account on 2026-01-01",
    "output": "useradd -e 2026-01-01 alice2"
  },
  {
    "input": "Create user vpnclient with no shell access",
    "output": "useradd -s /sbin/nologin vpnclient"
  },
  {
    "input": "Add guest user guest123 with UID 2222",
    "output": "useradd -u 2222 guest123"
  },
  {
    "input": "Add user gituser with home set to /srv/git",
    "output": "useradd -m -d /srv/git gituser"
  },
  {
    "input": "Create a user navi with default configuration",
    "output": "useradd navi"
  },
  {
    "input": "Add new user worker and comment as 'Manual Worker'",
    "output": "useradd -c 'Manual Worker' worker"
  },
  {
    "input": "Create user backend with /bin/zsh shell",
    "output": "useradd -s /bin/zsh backend"
  },
  {
    "input": "Add user datamanager to data group",
    "output": "useradd -g data datamanager"
  },
  {
    "input": "Create system bot user pushbot with no shell",
    "output": "useradd -r -s /sbin/nologin pushbot"
  },
  {
    "input": "Make user buildengine with UID 6000",
    "output": "useradd -u 6000 buildengine"
  },
  {
    "input": "Add user download with home at /downloads",
    "output": "useradd -m -d /downloads download"
  },
  {
    "input": "Create user testlab with comment 'Lab Account'",
    "output": "useradd -c 'Lab Account' testlab"
  },
  {
    "input": "Add user newemployee and join them to hr group",
    "output": "useradd -G hr newemployee"
  },
  {
    "input": "Create user alpha_team in group alpha",
    "output": "useradd -g alpha alpha_team"
  },
  {
    "input": "Add system user metricsd for metrics collection",
    "output": "useradd -r metricsd"
  },
  {
    "input": "Create user projectbot for automated deployment",
    "output": "useradd projectbot"
  },
  {
    "input": "Add user testagent and assign bash shell",
    "output": "useradd -s /bin/bash testagent"
  },
  {
    "input": "Create intern account internship2025",
    "output": "useradd internship2025"
  },
  {
    "input": "Add new user martha with comment",
    "output": "useradd -c 'Support Staff' martha"
  },
  {
    "input": "Make user netadmin and set shell to /bin/sh",
    "output": "useradd -s /bin/sh netadmin"
  },
  {
    "input": "Create a user dev1 with no password and no home",
    "output": "useradd -M -s /usr/sbin/nologin dev1"
  },
  {
    "input": "Add user tim with UID 8000 and bash shell",
    "output": "useradd -u 8000 -s /bin/bash tim"
  },
  {
    "input": "Create user frontenddev with group frontend",
    "output": "useradd -g frontend frontenddev"
  },
  {
    "input": "Add new user ashwin with login shell disabled",
    "output": "useradd -s /sbin/nologin ashwin"
  },
  {
    "input": "Create a bot user statusbot with UID 3030",
    "output": "useradd -u 3030 statusbot"
  },
  {
    "input": "Add a user reader with home at /opt/reader",
    "output": "useradd -m -d /opt/reader reader"
  },
  {
    "input": "Create backup operator user backop",
    "output": "useradd backop"
  },
  {
    "input": "Add user jules with groups editor and sudo",
    "output": "useradd -G editor,sudo jules"
  },
  {
    "input": "Create a no-login system user named uploader",
    "output": "useradd -r -s /usr/sbin/nologin uploader"
  },
  {
    "input": "Delete the user john",
    "output": "userdel john"
  },
  {
    "input": "Delete user alice and remove her home directory",
    "output": "userdel -r alice"
  },
  {
    "input": "Remove user bob from the system",
    "output": "userdel bob"
  },
  {
    "input": "Delete user charlie and all associated files",
    "output": "userdel -r charlie"
  },
  {
    "input": "Remove user dave",
    "output": "userdel dave"
  },
  {
    "input": "Delete account emily and clean up home directory",
    "output": "userdel -r emily"
  },
  {
    "input": "Completely delete user frank",
    "output": "userdel -r frank"
  },
  {
    "input": "Remove user george from the server",
    "output": "userdel george"
  },
  {
    "input": "Delete user helen and purge her data",
    "output": "userdel -r helen"
  },
  {
    "input": "Delete ivan without deleting home directory",
    "output": "userdel ivan"
  },
  {
    "input": "Remove julie including her home folder",
    "output": "userdel -r julie"
  },
  {
    "input": "Delete karen account",
    "output": "userdel karen"
  },
  {
    "input": "Remove lucas and delete home dir",
    "output": "userdel -r lucas"
  },
  {
    "input": "Delete mike user",
    "output": "userdel mike"
  },
  {
    "input": "Permanently delete user nina and files",
    "output": "userdel -r nina"
  },
  {
    "input": "Remove oliver from system",
    "output": "userdel oliver"
  },
  {
    "input": "Delete user paul including home",
    "output": "userdel -r paul"
  },
  {
    "input": "Delete quinn user account",
    "output": "userdel quinn"
  },
  {
    "input": "Completely remove rob",
    "output": "userdel -r rob"
  },
  {
    "input": "Delete steve without affecting files",
    "output": "userdel steve"
  },
  {
    "input": "Remove testuser and clean up everything",
    "output": "userdel -r testuser"
  },
  {
    "input": "Delete ubuntu account",
    "output": "userdel ubuntu"
  },
  {
    "input": "Remove vera and her files",
    "output": "userdel -r vera"
  },
  {
    "input": "Delete walter user from system",
    "output": "userdel walter"
  },
  {
    "input": "Delete xavier and his home directory",
    "output": "userdel -r xavier"
  },
  {
    "input": "Remove yuki account",
    "output": "userdel yuki"
  },
  {
    "input": "Permanently delete zoe",
    "output": "userdel -r zoe"
  },
  {
    "input": "Delete systembot",
    "output": "userdel systembot"
  },
  {
    "input": "Remove guest1 with all data",
    "output": "userdel -r guest1"
  },
  {
    "input": "Delete johnny user",
    "output": "userdel johnny"
  },
  {
    "input": "Remove demo account and home",
    "output": "userdel -r demo"
  },
  {
    "input": "Delete rootclone",
    "output": "userdel rootclone"
  },
  {
    "input": "Remove developer1 completely",
    "output": "userdel -r developer1"
  },
  {
    "input": "Delete old_user account",
    "output": "userdel old_user"
  },
  {
    "input": "Remove guest123 and their files",
    "output": "userdel -r guest123"
  },
  {
    "input": "Delete service account bot",
    "output": "userdel bot"
  },
  {
    "input": "Completely remove testapi",
    "output": "userdel -r testapi"
  },
  {
    "input": "Delete archiveuser",
    "output": "userdel archiveuser"
  },
  {
    "input": "Remove alpha_user",
    "output": "userdel alpha_user"
  },
  {
    "input": "Delete beta_user with home dir",
    "output": "userdel -r beta_user"
  },
  {
    "input": "Remove staging1 user",
    "output": "userdel staging1"
  },
  {
    "input": "Delete oldadmin",
    "output": "userdel oldadmin"
  },
  {
    "input": "Remove tempuser and delete files",
    "output": "userdel -r tempuser"
  },
  {
    "input": "Delete ghost user",
    "output": "userdel ghost"
  },
  {
    "input": "Remove internalbot account",
    "output": "userdel internalbot"
  },
  {
    "input": "Delete dockeruser with all data",
    "output": "userdel -r dockeruser"
  },
  {
    "input": "Remove unused_bot from system",
    "output": "userdel unused_bot"
  },
  {
    "input": "Delete readonly_user",
    "output": "userdel readonly_user"
  },
  {
    "input": "Remove staging2 account",
    "output": "userdel staging2"
  },
  {
    "input": "Delete test_id",
    "output": "userdel test_id"
  },
  {
    "input": "Delete ramesh user completely",
    "output": "userdel -r ramesh"
  },
  {
    "input": "Remove priya and clean up files",
    "output": "userdel -r priya"
  },
  {
    "input": "Delete devbot from the system",
    "output": "userdel devbot"
  },
  {
    "input": "Delete user rahul",
    "output": "userdel rahul"
  },
  {
    "input": "Remove alpha_main with home directory",
    "output": "userdel -r alpha_main"
  },
  {
    "input": "Delete sneha account",
    "output": "userdel sneha"
  },
  {
    "input": "Delete user ashwin",
    "output": "userdel ashwin"
  },
  {
    "input": "Remove trainee and delete files",
    "output": "userdel -r trainee"
  },
  {
    "input": "Delete sid from system",
    "output": "userdel sid"
  },
  {
    "input": "Remove logbot user and their data",
    "output": "userdel -r logbot"
  },
  {
    "input": "Delete reporter1",
    "output": "userdel reporter1"
  },
  {
    "input": "Remove devtest and home folder",
    "output": "userdel -r devtest"
  },
  {
    "input": "Delete backup_archiver",
    "output": "userdel backup_archiver"
  },
  {
    "input": "Delete shiva from users",
    "output": "userdel shiva"
  },
  {
    "input": "Remove gautham user",
    "output": "userdel gautham"
  },
  {
    "input": "Delete guest99 completely",
    "output": "userdel -r guest99"
  },
  {
    "input": "Remove alpha2",
    "output": "userdel alpha2"
  },
  {
    "input": "Delete developer1 again",
    "output": "userdel developer1"
  },
  {
    "input": "Remove manager user",
    "output": "userdel manager"
  },
  {
    "input": "Delete userx",
    "output": "userdel userx"
  },
  {
    "input": "Remove kiran with files",
    "output": "userdel -r kiran"
  },
  {
    "input": "Delete guestacc from the server",
    "output": "userdel guestacc"
  },
  {
    "input": "Remove stag_user completely",
    "output": "userdel -r stag_user"
  },
  {
    "input": "Delete preet from system",
    "output": "userdel preet"
  },
  {
    "input": "Remove demo_user and home directory",
    "output": "userdel -r demo_user"
  },
  {
    "input": "Delete archive",
    "output": "userdel archive"
  },
  {
    "input": "Remove emailbot",
    "output": "userdel emailbot"
  },
  {
    "input": "Delete verify_user",
    "output": "userdel verify_user"
  },
  {
    "input": "Remove rajeev_k user",
    "output": "userdel rajeev_k"
  },
  {
    "input": "Delete anusha",
    "output": "userdel anusha"
  },
  {
    "input": "Remove vikas",
    "output": "userdel vikas"
  },
  {
    "input": "Delete content_mgr and remove home",
    "output": "userdel -r content_mgr"
  },
  {
    "input": "Remove sde1 account",
    "output": "userdel sde1"
  },
  {
    "input": "Delete rootclone completely",
    "output": "userdel -r rootclone"
  },
  {
    "input": "Delete user integration_test from the system",
    "output": "userdel integration_test"
  },
  {
    "input": "Remove legacy_user and delete all data",
    "output": "userdel -r legacy_user"
  },
  {
    "input": "Delete deprecated_user account",
    "output": "userdel deprecated_user"
  },
  {
    "input": "Remove user sshbot and its home directory",
    "output": "userdel -r sshbot"
  },
  {
    "input": "Delete qa_user1 from the system",
    "output": "userdel qa_user1"
  },
  {
    "input": "Remove temporary_admin and clean up home",
    "output": "userdel -r temporary_admin"
  },
  {
    "input": "Delete unusedaccount",
    "output": "userdel unusedaccount"
  },
  {
    "input": "Completely delete oldservice account",
    "output": "userdel -r oldservice"
  },
  {
    "input": "Remove localbot",
    "output": "userdel localbot"
  },
  {
    "input": "Delete staging_user2 and home dir",
    "output": "userdel -r staging_user2"
  },
  {
    "input": "Delete old_developer account",
    "output": "userdel old_developer"
  },
  {
    "input": "Remove unwanted_user from system",
    "output": "userdel unwanted_user"
  },
  {
    "input": "Delete ftp_user and its files",
    "output": "userdel -r ftp_user"
  },
  {
    "input": "Remove archived_account",
    "output": "userdel archived_account"
  },
  {
    "input": "Delete expired_user completely",
    "output": "userdel -r expired_user"
  },
  {
    "input": "Remove beta_tester",
    "output": "userdel beta_tester"
  },
  {
    "input": "Delete trial_user",
    "output": "userdel trial_user"
  },
  {
    "input": "Remove api_testing1 with home directory",
    "output": "userdel -r api_testing1"
  },
  {
    "input": "Delete buildserver",
    "output": "userdel buildserver"
  },
  {
    "input": "Remove vm_user from the system",
    "output": "userdel vm_user"
  },
  {
    "input": "Delete user docker_guest and remove files",
    "output": "userdel -r docker_guest"
  },
  {
    "input": "Remove sandbox1 account",
    "output": "userdel sandbox1"
  },
  {
    "input": "Delete temp_guest user",
    "output": "userdel temp_guest"
  },
  {
    "input": "Remove old_intern and all related data",
    "output": "userdel -r old_intern"
  },
  {
    "input": "Delete loadtest_user",
    "output": "userdel loadtest_user"
  },
  {
    "input": "Remove forgotten_user from the machine",
    "output": "userdel forgotten_user"
  },
  {
    "input": "Delete miscuser account and files",
    "output": "userdel -r miscuser"
  },
  {
    "input": "Remove cloud_user",
    "output": "userdel cloud_user"
  },
  {
    "input": "Delete database_admin and home folder",
    "output": "userdel -r database_admin"
  },
  {
    "input": "Remove user nologin_guest",
    "output": "userdel nologin_guest"
  },
  {
    "input": "Delete student_temp",
    "output": "userdel student_temp"
  },
  {
    "input": "Remove mail_test_user and their data",
    "output": "userdel -r mail_test_user"
  },
  {
    "input": "Delete ci_runner from system",
    "output": "userdel ci_runner"
  },
  {
    "input": "Remove worker_node account",
    "output": "userdel worker_node"
  },
  {
    "input": "Delete buildbot_user",
    "output": "userdel buildbot_user"
  },
  {
    "input": "Remove legacyroot with home directory",
    "output": "userdel -r legacyroot"
  },
  {
    "input": "Delete backuphelper user",
    "output": "userdel backuphelper"
  },
  {
    "input": "Remove vpn_guest and clean up home",
    "output": "userdel -r vpn_guest"
  },
  {
    "input": "Delete read_only_user",
    "output": "userdel read_only_user"
  },
  {
    "input": "Remove helpdesk_demo account",
    "output": "userdel helpdesk_demo"
  },
  {
    "input": "Delete ux_test_user",
    "output": "userdel ux_test_user"
  },
  {
    "input": "Remove webdemo account and home",
    "output": "userdel -r webdemo"
  },
  {
    "input": "Delete nodebot_user",
    "output": "userdel nodebot_user"
  },
  {
    "input": "Remove expiredbot",
    "output": "userdel expiredbot"
  },
  {
    "input": "Delete oldscript_runner",
    "output": "userdel oldscript_runner"
  },
  {
    "input": "Remove sandbox2 and all files",
    "output": "userdel -r sandbox2"
  },
  {
    "input": "Delete appbuilder_user",
    "output": "userdel appbuilder_user"
  },
  {
    "input": "Remove devtest2 from the system",
    "output": "userdel devtest2"
  },
  {
    "input": "Delete k8s_demo_user",
    "output": "userdel k8s_demo_user"
  },
  {
    "input": "Remove project_guest and delete home",
    "output": "userdel -r project_guest"
  },
  {
    "input": "Change the login shell of user alice to bash",
    "output": "usermod -s /bin/bash alice"
  },
  {
    "input": "Set the home directory of bob to /srv/bobhome",
    "output": "usermod -d /srv/bobhome bob"
  },
  {
    "input": "Move the home directory of charlie to /users/charlie",
    "output": "usermod -d /users/charlie -m charlie"
  },
  {
    "input": "Add user dave to the sudo group",
    "output": "usermod -aG sudo dave"
  },
  {
    "input": "Remove user emily from group developers",
    "output": "gpasswd -d emily developers"
  },
  {
    "input": "Change UID of user frank to 1500",
    "output": "usermod -u 1500 frank"
  },
  {
    "input": "Change GID of user george to 2000",
    "output": "usermod -g 2000 george"
  },
  {
    "input": "Add user helen to groups docker and wheel",
    "output": "usermod -aG docker,wheel helen"
  },
  {
    "input": "Lock user account ivan",
    "output": "usermod -L ivan"
  },
  {
    "input": "Unlock the account of user julie",
    "output": "usermod -U julie"
  },
  {
    "input": "Rename user karen to karen_smith",
    "output": "usermod -l karen_smith karen"
  },
  {
    "input": "Expire the account of user lucas today",
    "output": "usermod -e $(date +%Y-%m-%d) lucas"
  },
  {
    "input": "Set expiry of user mike to 2025-12-31",
    "output": "usermod -e 2025-12-31 mike"
  },
  {
    "input": "Change comment of user nina to 'Senior Analyst'",
    "output": "usermod -c 'Senior Analyst' nina"
  },
  {
    "input": "Disable password for user oliver",
    "output": "usermod -p '!' oliver"
  },
  {
    "input": "Change shell of user paul to /bin/zsh",
    "output": "usermod -s /bin/zsh paul"
  },
  {
    "input": "Change login name from quinn to quinn_123",
    "output": "usermod -l quinn_123 quinn"
  },
  {
    "input": "Move rob's home directory and update records",
    "output": "usermod -d /home/rob_new -m rob"
  },
  {
    "input": "Add user steve to audio and video groups",
    "output": "usermod -aG audio,video steve"
  },
  {
    "input": "Lock access for tempuser",
    "output": "usermod -L tempuser"
  },
  {
    "input": "Change GID of user ubuntu to 1050",
    "output": "usermod -g 1050 ubuntu"
  },
  {
    "input": "Set comment of user vera to 'Temporary Staff'",
    "output": "usermod -c 'Temporary Staff' vera"
  },
  {
    "input": "Add user walter to group backup",
    "output": "usermod -aG backup walter"
  },
  {
    "input": "Change user xavier's shell to /sbin/nologin",
    "output": "usermod -s /sbin/nologin xavier"
  },
  {
    "input": "Rename user yuki to yuki23",
    "output": "usermod -l yuki23 yuki"
  },
  {
    "input": "Set expiration date of zoe to 2026-01-01",
    "output": "usermod -e 2026-01-01 zoe"
  },
  {
    "input": "Change UID of systembot to 900",
    "output": "usermod -u 900 systembot"
  },
  {
    "input": "Assign group staff to user john",
    "output": "usermod -g staff john"
  },
  {
    "input": "Add testuser to multiple groups",
    "output": "usermod -aG testers,qa,dev testuser"
  },
  {
    "input": "Unlock user account admin",
    "output": "usermod -U admin"
  },
  {
    "input": "Add user deploy to wheel group",
    "output": "usermod -aG wheel deploy"
  },
  {
    "input": "Change full name of user raj to 'Raj Kumar'",
    "output": "usermod -c 'Raj Kumar' raj"
  },
  {
    "input": "Change primary group of smith to developers",
    "output": "usermod -g developers smith"
  },
  {
    "input": "Add user amit to audio and video",
    "output": "usermod -aG audio,video amit"
  },
  {
    "input": "Lock the guest account",
    "output": "usermod -L guest"
  },
  {
    "input": "Move harry's home directory to /data/harry",
    "output": "usermod -d /data/harry -m harry"
  },
  {
    "input": "Rename user beta to betatest",
    "output": "usermod -l betatest beta"
  },
  {
    "input": "Update shell for tester to /bin/sh",
    "output": "usermod -s /bin/sh tester"
  },
  {
    "input": "Change user neil's shell to nologin",
    "output": "usermod -s /usr/sbin/nologin neil"
  },
  {
    "input": "Add support user to helpdesk group",
    "output": "usermod -aG helpdesk support"
  },
  {
    "input": "Set expiry for intern account to 2025-06-30",
    "output": "usermod -e 2025-06-30 intern"
  },
  {
    "input": "Unlock user download_bot",
    "output": "usermod -U download_bot"
  },
  {
    "input": "Lock user archiveuser",
    "output": "usermod -L archiveuser"
  },
  {
    "input": "Change login name of tom to tom_dev",
    "output": "usermod -l tom_dev tom"
  },
  {
    "input": "Set home directory for alice2 to /opt/users/alice2",
    "output": "usermod -d /opt/users/alice2 -m alice2"
  },
  {
    "input": "Add user rootbot to monitoring and logs groups",
    "output": "usermod -aG monitoring,logs rootbot"
  },
  {
    "input": "Expire account guest123 in 3 days",
    "output": "usermod -e $(date -d '+3 days' +%Y-%m-%d) guest123"
  },
  {
    "input": "Assign new shell /bin/fish to user fisher",
    "output": "usermod -s /bin/fish fisher"
  },
  {
    "input": "Rename devops1 to devops_main",
    "output": "usermod -l devops_main devops1"
  },
  {
    "input": "Add user archie to sysadmins group",
    "output": "usermod -aG sysadmins archie"
  },
  {
    "input": "Change GID of builduser to 9000",
    "output": "usermod -g 9000 builduser"
  },
  {
    "input": "Update comment for dbadmin to 'Postgres DBA'",
    "output": "usermod -c 'Postgres DBA' dbadmin"
  },
  {
    "input": "Move the user sshguest's home to /nonstandard/sshguest",
    "output": "usermod -d /nonstandard/sshguest -m sshguest"
  },
  {
    "input": "Add user sandbox to all test groups",
    "output": "usermod -aG test1,test2,test3 sandbox"
  },
  {
    "input": "Set userroot's home directory to /home/rootuser",
    "output": "usermod -d /home/rootuser -m userroot"
  },
  {
    "input": "Change comment of user vinay to 'Senior Dev'",
    "output": "usermod -c 'Senior Dev' vinay"
  },
  {
    "input": "Unlock user sessionlogger",
    "output": "usermod -U sessionlogger"
  },
  {
    "input": "Lock account unused_bot",
    "output": "usermod -L unused_bot"
  },
  {
    "input": "Add user readaccess to viewers group",
    "output": "usermod -aG viewers readaccess"
  },
  {
    "input": "Rename user api_runner to api_exec",
    "output": "usermod -l api_exec api_runner"
  },
  {
    "input": "Change default shell of ankit to /bin/bash",
    "output": "usermod -s /bin/bash ankit"
  },
  {
    "input": "Add user ramesh to group network",
    "output": "usermod -aG network ramesh"
  },
  {
    "input": "Change primary group of user priya to admins",
    "output": "usermod -g admins priya"
  },
  {
    "input": "Lock the account of user devbot",
    "output": "usermod -L devbot"
  },
  {
    "input": "Move user rahul's home directory to /home/users/rahul",
    "output": "usermod -d /home/users/rahul -m rahul"
  },
  {
    "input": "Rename user alpha1 to alpha_main",
    "output": "usermod -l alpha_main alpha1"
  },
  {
    "input": "Change comment for user sneha to 'Documentation Lead'",
    "output": "usermod -c 'Documentation Lead' sneha"
  },
  {
    "input": "Add user ashwin to the devops group",
    "output": "usermod -aG devops ashwin"
  },
  {
    "input": "Unlock the account of user demo",
    "output": "usermod -U demo"
  },
  {
    "input": "Expire account of user trainee on 2025-07-31",
    "output": "usermod -e 2025-07-31 trainee"
  },
  {
    "input": "Add sid to groups docker and wheel",
    "output": "usermod -aG docker,wheel sid"
  },
  {
    "input": "Change UID of user logbot to 2100",
    "output": "usermod -u 2100 logbot"
  },
  {
    "input": "Add user reporter1 to the news group",
    "output": "usermod -aG news reporter1"
  },
  {
    "input": "Change the primary group of devtest to qa",
    "output": "usermod -g qa devtest"
  },
  {
    "input": "Rename backupuser to backup_archiver",
    "output": "usermod -l backup_archiver backupuser"
  },
  {
    "input": "Move home directory of shiva to /opt/shiva and update path",
    "output": "usermod -d /opt/shiva -m shiva"
  },
  {
    "input": "Change shell of user gautham to /bin/fish",
    "output": "usermod -s /bin/fish gautham"
  },
  {
    "input": "Set expiration for guest99 to 2025-09-01",
    "output": "usermod -e 2025-09-01 guest99"
  },
  {
    "input": "Lock the account for testapi",
    "output": "usermod -L testapi"
  },
  {
    "input": "Unlock the user alpha2",
    "output": "usermod -U alpha2"
  },
  {
    "input": "Set comment for developer1 as 'Python Developer'",
    "output": "usermod -c 'Python Developer' developer1"
  },
  {
    "input": "Add user manager to teams group",
    "output": "usermod -aG teams manager"
  },
  {
    "input": "Rename user userx to user_x1",
    "output": "usermod -l user_x1 userx"
  },
  {
    "input": "Change shell of nologinuser to /usr/sbin/nologin",
    "output": "usermod -s /usr/sbin/nologin nologinuser"
  },
  {
    "input": "Change home directory of kiran to /users/kiran",
    "output": "usermod -d /users/kiran -m kiran"
  },
  {
    "input": "Add newuser to ftp and ssh groups",
    "output": "usermod -aG ftp,ssh newuser"
  },
  {
    "input": "Lock inactiveuser",
    "output": "usermod -L inactiveuser"
  },
  {
    "input": "Unlock temporaryuser",
    "output": "usermod -U temporaryuser"
  },
  {
    "input": "Set primary group of vinod to wheel",
    "output": "usermod -g wheel vinod"
  },
  {
    "input": "Move home for ghost to /tmp/ghost",
    "output": "usermod -d /tmp/ghost -m ghost"
  },
  {
    "input": "Change comment of devopsteam to 'DevOps Team Member'",
    "output": "usermod -c 'DevOps Team Member' devopsteam"
  },
  {
    "input": "Change login name from apiuser to api_u",
    "output": "usermod -l api_u apiuser"
  },
  {
    "input": "Change user shell to zsh for ritu",
    "output": "usermod -s /bin/zsh ritu"
  },
  {
    "input": "Set home directory of guestacc to /srv/guest",
    "output": "usermod -d /srv/guest -m guestacc"
  },
  {
    "input": "Set expiration for stag_user to 2025-10-01",
    "output": "usermod -e 2025-10-01 stag_user"
  },
  {
    "input": "Add preet to the testing group",
    "output": "usermod -aG testing preet"
  },
  {
    "input": "Change user test_id's UID to 1777",
    "output": "usermod -u 1777 test_id"
  },
  {
    "input": "Add demo_user to ssh group",
    "output": "usermod -aG ssh demo_user"
  },
  {
    "input": "Change shell of archive to /bin/sh",
    "output": "usermod -s /bin/sh archive"
  },
  {
    "input": "Lock user emailbot",
    "output": "usermod -L emailbot"
  },
  {
    "input": "Unlock account of verify_user",
    "output": "usermod -U verify_user"
  },
  {
    "input": "Change login name of rajeev to rajeev_k",
    "output": "usermod -l rajeev_k rajeev"
  },
  {
    "input": "Update comment of user anusha to 'Data Science Intern'",
    "output": "usermod -c 'Data Science Intern' anusha"
  },
  {
    "input": "Change group of vikas to techlead",
    "output": "usermod -g techlead vikas"
  },
  {
    "input": "Add user content_mgr to group writers",
    "output": "usermod -aG writers content_mgr"
  },
  {
    "input": "Set shell of sde1 to /bin/zsh",
    "output": "usermod -s /bin/zsh sde1"
  },
  {
    "input": "Expire user account dockeruser on 2025-08-01",
    "output": "usermod -e 2025-08-01 dockeruser"
  },
  {
    "input": "Move user rootclone's home to /admin/rootclone",
    "output": "usermod -d /admin/rootclone -m rootclone"
  },
  {
    "input": "Display all users currently logged in with activity",
    "output": "w"
  },
  {
    "input": "Show who is logged in and what they are doing",
    "output": "w"
  },
  {
    "input": "View active user sessions with load average",
    "output": "w"
  },
  {
    "input": "Check what users are doing right now",
    "output": "w"
  },
  {
    "input": "List current users and their activities",
    "output": "w"
  },
  {
    "input": "Monitor system usage by users",
    "output": "w"
  },
  {
    "input": "See login name, tty, and idle time for users",
    "output": "w"
  },
  {
    "input": "Get full user activity report",
    "output": "w"
  },
  {
    "input": "Print all users currently using the system",
    "output": "w"
  },
  {
    "input": "Check terminal usage and commands being run",
    "output": "w"
  },
  {
    "input": "Display who is doing what on the system",
    "output": "w"
  },
  {
    "input": "Show current user load",
    "output": "w"
  },
  {
    "input": "List users and their CPU usage",
    "output": "w"
  },
  {
    "input": "Find idle users",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1, $5}'"
  },
  {
    "input": "Print user and process info together",
    "output": "w"
  },
  {
    "input": "Show w command output without header",
    "output": "w -h"
  },
  {
    "input": "Only see command column from w",
    "output": "w | awk '{print $8}'"
  },
  {
    "input": "Display load averages and active users",
    "output": "w"
  },
  {
    "input": "List users who are using bash",
    "output": "w | grep bash"
  },
  {
    "input": "See users who are using vim",
    "output": "w | grep vim"
  },
  {
    "input": "Count how many users are logged in",
    "output": "w -h | wc -l"
  },
  {
    "input": "Monitor system activity in real time",
    "output": "w"
  },
  {
    "input": "Identify idle SSH sessions",
    "output": "w | grep ssh"
  },
  {
    "input": "Show logged in users sorted by idle time",
    "output": "w | sort -k5"
  },
  {
    "input": "Check what root is currently doing",
    "output": "w root"
  },
  {
    "input": "Get a summary of all terminal sessions",
    "output": "w"
  },
  {
    "input": "View w command usage",
    "output": "w"
  },
  {
    "input": "Extract list of ttys in use",
    "output": "w | awk '{print $2}' | sort | uniq"
  },
  {
    "input": "Filter users with idle time greater than 1hr",
    "output": "w | awk '$5 ~ /[0-9]+:[0-9]+/ {print $0}'"
  },
  {
    "input": "Show only remote users",
    "output": "w | grep '('"
  },
  {
    "input": "List all users using screen",
    "output": "w | grep screen"
  },
  {
    "input": "Find commands being run by each user",
    "output": "w | awk '{print $1, $8}'"
  },
  {
    "input": "Print the user activity list",
    "output": "w"
  },
  {
    "input": "Track what everyone is doing",
    "output": "w"
  },
  {
    "input": "Log current system user activity",
    "output": "w"
  },
  {
    "input": "Check activity for user 'guest'",
    "output": "w guest"
  },
  {
    "input": "See if anyone is using top",
    "output": "w | grep top"
  },
  {
    "input": "Get quick snapshot of user tasks",
    "output": "w"
  },
  {
    "input": "View process activity by terminal",
    "output": "w | awk '{print $2, $8}'"
  },
  {
    "input": "Count how many are idle",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1}' | wc -l"
  },
  {
    "input": "List command being executed by user1",
    "output": "w user1"
  },
  {
    "input": "Filter all users with bash as shell",
    "output": "w | grep bash"
  },
  {
    "input": "Who is using nano editor",
    "output": "w | grep nano"
  },
  {
    "input": "Print idle users only",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1}'"
  },
  {
    "input": "Sort users by terminal",
    "output": "w | sort -k2"
  },
  {
    "input": "Identify longest idle session",
    "output": "w | sort -k5 | tail -1"
  },
  {
    "input": "Display user login terminals and commands",
    "output": "w | awk '{print $2, $8}'"
  },
  {
    "input": "Show load average from w output",
    "output": "w | head -1"
  },
  {
    "input": "Extract users using /dev/pts/0",
    "output": "w | grep pts/0"
  },
  {
    "input": "Display all users currently logged in with activity",
    "output": "w"
  },
  {
    "input": "Show who is logged in and what they are doing",
    "output": "w"
  },
  {
    "input": "View active user sessions with load average",
    "output": "w"
  },
  {
    "input": "Check what users are doing right now",
    "output": "w"
  },
  {
    "input": "List current users and their activities",
    "output": "w"
  },
  {
    "input": "Monitor system usage by users",
    "output": "w"
  },
  {
    "input": "See login name, tty, and idle time for users",
    "output": "w"
  },
  {
    "input": "Get full user activity report",
    "output": "w"
  },
  {
    "input": "Print all users currently using the system",
    "output": "w"
  },
  {
    "input": "Check terminal usage and commands being run",
    "output": "w"
  },
  {
    "input": "Display who is doing what on the system",
    "output": "w"
  },
  {
    "input": "Show current user load",
    "output": "w"
  },
  {
    "input": "List users and their CPU usage",
    "output": "w"
  },
  {
    "input": "Find idle users",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1, $5}'"
  },
  {
    "input": "Print user and process info together",
    "output": "w"
  },
  {
    "input": "Show w command output without header",
    "output": "w -h"
  },
  {
    "input": "Only see command column from w",
    "output": "w | awk '{print $8}'"
  },
  {
    "input": "Display load averages and active users",
    "output": "w"
  },
  {
    "input": "List users who are using bash",
    "output": "w | grep bash"
  },
  {
    "input": "See users who are using vim",
    "output": "w | grep vim"
  },
  {
    "input": "Count how many users are logged in",
    "output": "w -h | wc -l"
  },
  {
    "input": "Monitor system activity in real time",
    "output": "w"
  },
  {
    "input": "Identify idle SSH sessions",
    "output": "w | grep ssh"
  },
  {
    "input": "Show logged in users sorted by idle time",
    "output": "w | sort -k5"
  },
  {
    "input": "Check what root is currently doing",
    "output": "w root"
  },
  {
    "input": "Get a summary of all terminal sessions",
    "output": "w"
  },
  {
    "input": "View w command usage",
    "output": "w"
  },
  {
    "input": "Extract list of ttys in use",
    "output": "w | awk '{print $2}' | sort | uniq"
  },
  {
    "input": "Filter users with idle time greater than 1hr",
    "output": "w | awk '$5 ~ /[0-9]+:[0-9]+/ {print $0}'"
  },
  {
    "input": "Show only remote users",
    "output": "w | grep '('"
  },
  {
    "input": "List all users using screen",
    "output": "w | grep screen"
  },
  {
    "input": "Find commands being run by each user",
    "output": "w | awk '{print $1, $8}'"
  },
  {
    "input": "Print the user activity list",
    "output": "w"
  },
  {
    "input": "Track what everyone is doing",
    "output": "w"
  },
  {
    "input": "Log current system user activity",
    "output": "w"
  },
  {
    "input": "Check activity for user 'guest'",
    "output": "w guest"
  },
  {
    "input": "See if anyone is using top",
    "output": "w | grep top"
  },
  {
    "input": "Get quick snapshot of user tasks",
    "output": "w"
  },
  {
    "input": "View process activity by terminal",
    "output": "w | awk '{print $2, $8}'"
  },
  {
    "input": "Count how many are idle",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1}' | wc -l"
  },
  {
    "input": "List command being executed by user1",
    "output": "w user1"
  },
  {
    "input": "Filter all users with bash as shell",
    "output": "w | grep bash"
  },
  {
    "input": "Who is using nano editor",
    "output": "w | grep nano"
  },
  {
    "input": "Print idle users only",
    "output": "w | awk '$5 ~ /[0-9]+/ {print $1}'"
  },
  {
    "input": "Sort users by terminal",
    "output": "w | sort -k2"
  },
  {
    "input": "Identify longest idle session",
    "output": "w | sort -k5 | tail -1"
  },
  {
    "input": "Display user login terminals and commands",
    "output": "w | awk '{print $2, $8}'"
  },
  {
    "input": "Show load average from w output",
    "output": "w | head -1"
  },
  {
    "input": "Extract users using /dev/pts/0",
    "output": "w | grep pts/0"
  },
  {
    "input": "Display current shell for each user",
    "output": "w | awk '{print $1}' | xargs -I {} getent passwd {} | cut -d: -f7"
  },
  {
    "input": "List users with zero idle time",
    "output": "w | awk '$5 == \".\" {print $1}'"
  },
  {
    "input": "Find who is logged in with the most CPU usage",
    "output": "w | sort -k9 -n | tail -1"
  },
  {
    "input": "Check users accessing via pts/1",
    "output": "w | grep pts/1"
  },
  {
    "input": "Find out who is logged in",
    "output": "who"
  },
  {
    "input": "Check current user sessions",
    "output": "who"
  },
  {
    "input": "Get list of active users",
    "output": "who"
  },
  {
    "input": "Display who is currently using the system",
    "output": "who"
  },
  {
    "input": "List all logged in users",
    "output": "who"
  },
  {
    "input": "See user login names and terminals",
    "output": "who"
  },
  {
    "input": "Get login times of users",
    "output": "who"
  },
  {
    "input": "Show users logged in via SSH",
    "output": "who"
  },
  {
    "input": "Print usernames and their sessions",
    "output": "who"
  },
  {
    "input": "Display terminal lines of users",
    "output": "who"
  },
  {
    "input": "Find users with open sessions",
    "output": "who"
  },
  {
    "input": "See who is connected right now",
    "output": "who"
  },
  {
    "input": "Check login sessions",
    "output": "who"
  },
  {
    "input": "Print information of current users",
    "output": "who"
  },
  {
    "input": "Check all active terminals",
    "output": "who"
  },
  {
    "input": "List users currently logged in",
    "output": "who"
  },
  {
    "input": "Show usernames and remote connections",
    "output": "who"
  },
  {
    "input": "Identify users on this server",
    "output": "who"
  },
  {
    "input": "Get list of current sessions",
    "output": "who"
  },
  {
    "input": "Find out which users are online",
    "output": "who"
  },
  {
    "input": "Display IPs of logged-in users",
    "output": "who"
  },
  {
    "input": "Show the login terminal of all users",
    "output": "who"
  },
  {
    "input": "Print login shell of users",
    "output": "who"
  },
  {
    "input": "List usernames with session info",
    "output": "who"
  },
  {
    "input": "See who logged in through TTY",
    "output": "who"
  },
  {
    "input": "Identify system usage by users",
    "output": "who"
  },
  {
    "input": "Check which users have GUI sessions",
    "output": "who"
  },
  {
    "input": "Print all logged-in user details",
    "output": "who"
  },
  {
    "input": "Find number of logged in users",
    "output": "who | wc -l"
  },
  {
    "input": "Check if root is logged in",
    "output": "who | grep root"
  },
  {
    "input": "Filter users by terminal",
    "output": "who | grep tty"
  },
  {
    "input": "View remote user logins",
    "output": "who | grep pts"
  },
  {
    "input": "Show only usernames",
    "output": "who | awk '{print $1}'"
  },
  {
    "input": "Display current user count",
    "output": "who | wc -l"
  },
  {
    "input": "Get logged-in users list",
    "output": "who"
  },
  {
    "input": "List users using GUI",
    "output": "who | grep :0"
  },
  {
    "input": "Display users with login time",
    "output": "who"
  },
  {
    "input": "Show user login dates",
    "output": "who"
  },
  {
    "input": "Extract usernames from who",
    "output": "who | cut -d ' ' -f1"
  },
  {
    "input": "Print usernames and IPs",
    "output": "who | awk '{print $1, $5}'"
  },
  {
    "input": "Who is connected via SSH",
    "output": "who | grep ssh"
  },
  {
    "input": "Find sessions from specific host",
    "output": "who | grep 192.168.1.1"
  },
  {
    "input": "Find all pts sessions",
    "output": "who | grep pts"
  },
  {
    "input": "List all TTY sessions",
    "output": "who | grep tty"
  },
  {
    "input": "See users from specific terminal",
    "output": "who | grep tty1"
  },
  {
    "input": "Only display usernames",
    "output": "who | awk '{print $1}'"
  },
  {
    "input": "Check who is on GUI session",
    "output": "who | grep ':0'"
  },
  {
    "input": "Print sessions on pts/0",
    "output": "who | grep pts/0"
  },
  {
    "input": "Print remote IP addresses",
    "output": "who | awk '{print $5}'"
  },
  {
    "input": "Check for any remote logins",
    "output": "who | grep '('"
  },
  {
    "input": "Check active user sessions",
    "output": "who"
  },
  {
    "input": "Identify all current user logins",
    "output": "who"
  },
  {
    "input": "Display who is currently connected",
    "output": "who"
  },
  {
    "input": "Check terminal activity",
    "output": "who"
  },
  {
    "input": "List usernames currently logged in",
    "output": "who | awk '{print $1}'"
  },
  {
    "input": "Print who is using the system",
    "output": "who"
  },
  {
    "input": "Get user login timestamps",
    "output": "who"
  },
  {
    "input": "Find all logged in SSH users",
    "output": "who | grep ssh"
  },
  {
    "input": "List all users on tty2",
    "output": "who | grep tty2"
  },
  {
    "input": "Check for local login users",
    "output": "who | grep tty"
  },
  {
    "input": "Only view usernames from who",
    "output": "who | awk '{print $1}'"
  },
  {
    "input": "Get login details by IP",
    "output": "who | awk '{print $1, $5}'"
  },
  {
    "input": "Extract IPs from login list",
    "output": "who | awk '{print $5}'"
  },
  {
    "input": "Print users on pts/1",
    "output": "who | grep pts/1"
  },
  {
    "input": "See active console users",
    "output": "who | grep tty"
  },
  {
    "input": "Show GUI session users",
    "output": "who | grep :0"
  },
  {
    "input": "Get count of GUI logins",
    "output": "who | grep :0 | wc -l"
  },
  {
    "input": "Find users on terminal tty7",
    "output": "who | grep tty7"
  },
  {
    "input": "List all logins from host 10.0.0.2",
    "output": "who | grep 10.0.0.2"
  },
  {
    "input": "Only view login times",
    "output": "who | awk '{print $3, $4}'"
  },
  {
    "input": "Extract terminal names",
    "output": "who | awk '{print $2}'"
  },
  {
    "input": "Get user sessions for current machine",
    "output": "who"
  },
  {
    "input": "Check for GUI users",
    "output": "who | grep ':0'"
  },
  {
    "input": "Monitor SSH logins",
    "output": "who | grep ssh"
  },
  {
    "input": "See who is using tty3",
    "output": "who | grep tty3"
  },
  {
    "input": "Check if admin is logged in",
    "output": "who | grep admin"
  },
  {
    "input": "Display detailed user session info",
    "output": "who"
  },
  {
    "input": "Find number of ssh sessions",
    "output": "who | grep ssh | wc -l"
  },
  {
    "input": "Find all console users",
    "output": "who | grep tty"
  },
  {
    "input": "List users by terminal name",
    "output": "who | awk '{print $2}'"
  },
  {
    "input": "Print who is connected remotely",
    "output": "who | grep '('"
  },
  {
    "input": "Count all remote logins",
    "output": "who | grep '(' | wc -l"
  },
  {
    "input": "Show hostnames of logged in users",
    "output": "who | awk '{print $5}'"
  },
  {
    "input": "Find login info on pts/2",
    "output": "who | grep pts/2"
  },
  {
    "input": "Check GUI terminal logins",
    "output": "who | grep :0"
  },
  {
    "input": "Show current login sessions",
    "output": "who"
  },
  {
    "input": "Print unique users logged in",
    "output": "who | awk '{print $1}' | sort | uniq"
  },
  {
    "input": "Extract all host IPs",
    "output": "who | awk '{print $5}'"
  },
  {
    "input": "Display user sessions by login time",
    "output": "who | sort -k3"
  },
  {
    "input": "Get login terminals sorted",
    "output": "who | awk '{print $2}' | sort"
  },
  {
    "input": "Count how many terminals in use",
    "output": "who | awk '{print $2}' | sort | uniq | wc -l"
  },
  {
    "input": "Print raw who output",
    "output": "who"
  },
  {
    "input": "Check login status of user named guest",
    "output": "who | grep guest"
  },
  {
    "input": "List who is using tty8",
    "output": "who | grep tty8"
  },
  {
    "input": "Find total login terminals",
    "output": "who | awk '{print $2}' | sort | uniq | wc -l"
  },
  {
    "input": "Extract login times only",
    "output": "who | awk '{print $3, $4}'"
  }
]
